[
  {
    "objectID": "handson_ex/handson_ex02/handson_ex02.html",
    "href": "handson_ex/handson_ex02/handson_ex02.html",
    "title": "Hands-On Ex02",
    "section": "",
    "text": "List of packages will be used.\n\npacman::p_load(sf, tidyverse,readr,readxl,tidyr,dplyr,ggplot2)\n\n\n\n\n\nMP14_SUBZONE_WEB_PL, a polygon feature layer in ESRI shapefile format\n\n\nmpsz = st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\yifei-alpaca\\IS415-GAA\\handson_ex\\handson_ex02\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\nCyclingPath, a line feature layer in ESRI shapefile format\n\n\ncyclingpath = st_read(dsn = \"data/geospatial\", \n                         layer = \"CyclingPathGazette\")\n\nReading layer `CyclingPathGazette' from data source \n  `C:\\yifei-alpaca\\IS415-GAA\\handson_ex\\handson_ex02\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2248 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\n\n\n\nPreSchool, a point feature layer in kml file format.\n\n\npreschool = st_read(\"data/geospatial/pre-schools-location-kml.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\yifei-alpaca\\IS415-GAA\\handson_ex\\handson_ex02\\data\\geospatial\\pre-schools-location-kml.kml' \n  using driver `KML'\nSimple feature collection with 1925 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\n\n\n\n\nplot(mpsz)\n\n\n\n\nPlot only the geometry.\n\nplot(st_geometry(mpsz))\n\n\n\n\nPlot using specific attribute.\n\nplot(mpsz[\"PLN_AREA_N\"])\n\n\n\n\n\n\n\n\nChange EPSG code from 9001\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nto 3414\n\nmpsz3414 <- st_transform(mpsz, 3414)\n\n\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\nTransforming the projection of preschool from wgs84 to svy21.\n\npreschool3414 <- st_transform(preschool, \n                              crs = 3414)\n\nCheck:\n\nst_geometry(preschool3414)\n\nGeometry set for 1925 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 11203.01 ymin: 25596.33 xmax: 45404.24 ymax: 49300.88\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:\n\n\n\n\n\n\nread in csv file (rmb not to push the csv raw data file to github)\n\nlistings <- read.csv(\"data/aspatial/listings.csv\", sep=',')\n\n%>% is call the “pipe” operator. It is used to perform multiple functions.\n\nlistings_sf <- st_as_sf(listings, \n                       coords = c(\"longitude\", \"latitude\"),crs=4326) %>%\n  st_transform(crs = 3414)\n\n\nglimpse(listings_sf)\n\nRows: 4,161\nColumns: 17\n$ id                             <dbl> 50646, 71609, 71896, 71903, 275344, 289…\n$ name                           <chr> \"Pleasant Room along Bukit Timah\", \"Ens…\n$ host_id                        <int> 227796, 367042, 367042, 367042, 1439258…\n$ host_name                      <chr> \"Sujatha\", \"Belinda\", \"Belinda\", \"Belin…\n$ neighbourhood_group            <chr> \"Central Region\", \"East Region\", \"East …\n$ neighbourhood                  <chr> \"Bukit Timah\", \"Tampines\", \"Tampines\", …\n$ room_type                      <chr> \"Private room\", \"Private room\", \"Privat…\n$ price                          <int> 80, 145, 85, 85, 49, 184, 79, 49, 55, 5…\n$ minimum_nights                 <int> 92, 92, 92, 92, 60, 92, 92, 60, 60, 60,…\n$ number_of_reviews              <int> 18, 20, 24, 47, 14, 12, 133, 17, 12, 3,…\n$ last_review                    <chr> \"2014-12-26\", \"2020-01-17\", \"2019-10-13…\n$ reviews_per_month              <dbl> 0.18, 0.15, 0.18, 0.34, 0.11, 0.10, 1.0…\n$ calculated_host_listings_count <int> 1, 6, 6, 6, 44, 6, 7, 44, 44, 44, 6, 7,…\n$ availability_365               <int> 365, 340, 265, 365, 296, 285, 365, 181,…\n$ number_of_reviews_ltm          <int> 0, 0, 0, 0, 1, 0, 0, 3, 2, 0, 1, 0, 0, …\n$ license                        <chr> \"\", \"\", \"\", \"\", \"S0399\", \"\", \"\", \"S0399…\n$ geometry                       <POINT [m]> POINT (22646.02 35167.9), POINT (…\n\n\n\n\n\n\nnQuadSegs refers to how many segments are generated per quadrant and features. Distance is in meters.\n\nbuffer_cycling <- st_buffer(cyclingpath, \n                               dist=5, nQuadSegs = 30)\n\ncalculating the area\n\nbuffer_cycling$AREA <- st_area(buffer_cycling)\n\nsum() the total are\n\nsum(buffer_cycling$AREA)\n\n1556978 [m^2]\n\n\n\n\n\n\n\nmpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))\n\n\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    3.00    5.96    9.00   58.00 \n\n\n*Note that the count is slightly different from the website. I believed that it is due to the difference in number of rows in the dataset. Currently there is 1925 rows.\n\ntop_n(mpsz3414, 1, `PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           58\n\n\n\n\n\n\nmpsz3414$Area <- mpsz3414 %>%\n  st_area()\nmpsz3414 <- mpsz3414 %>%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)\n\n\nplot(mpsz3414['PreSch Density'])\n\n\n\n\n\n\n\n\nhist(mpsz3414$`PreSch Density`)\n\n\n\n\n\nggplot(data=mpsz3414, \n       aes(x= as.numeric(`PreSch Density`)))+\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  labs(title = \"Are pre-school even distributed in Singapore?\",\n       subtitle= \"There are many planning sub-zones with a single pre-school, on the other hand, \\nthere are two planning sub-zones with at least 20 pre-schools\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Frequency\")\n\n\n\n\n\ny <- as.numeric(mpsz3414$`PreSch Count`)\nx <- as.numeric(mpsz3414$`PreSch Density`)\nplot(x, y, main = \"RS between Pre-school Density and Pre-school Count\",\n     xlab = \"Pre-school density (per km sq)\", ylab = \"Pre-school count\",\n     pch = 19, frame = FALSE)\nabline(lm(y ~ x, data = mpsz3414), col = \"blue\")"
  },
  {
    "objectID": "handson_ex/handson_ex03/handson_ex03.html",
    "href": "handson_ex/handson_ex03/handson_ex03.html",
    "title": "Hands-On Ex03",
    "section": "",
    "text": "pacman::p_load(sf, tmap, tidyverse)\n\n\n\n\nmpsz <- st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\yifei-alpaca\\IS415-GAA\\handson_ex\\handson_ex03\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\n\n\n\n\npopdata <- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n\n\n\n\n\ntail(popdata, n=5)\n\n# A tibble: 5 × 7\n  PA     SZ          AG          Sex     TOD                           Pop  Time\n  <chr>  <chr>       <chr>       <chr>   <chr>                       <dbl> <dbl>\n1 Yishun Yishun West 90_and_over Females HDB 5-Room and Executive F…    20  2020\n2 Yishun Yishun West 90_and_over Females HUDC Flats (excluding thos…     0  2020\n3 Yishun Yishun West 90_and_over Females Landed Properties               0  2020\n4 Yishun Yishun West 90_and_over Females Condominiums and Other Apa…    10  2020\n5 Yishun Yishun West 90_and_over Females Others                         30  2020\n\n\nCheck for unique() values\n\nunique(popdata[\"AG\"])\n\n# A tibble: 19 × 1\n   AG         \n   <chr>      \n 1 0_to_4     \n 2 5_to_9     \n 3 10_to_14   \n 4 15_to_19   \n 5 20_to_24   \n 6 25_to_29   \n 7 30_to_34   \n 8 35_to_39   \n 9 40_to_44   \n10 45_to_49   \n11 50_to_54   \n12 55_to_59   \n13 60_to_64   \n14 65_to_69   \n15 70_to_74   \n16 75_to_79   \n17 80_to_84   \n18 85_to_89   \n19 90_and_over\n\n\n\npopdata2020 <- popdata %>%\n  filter(Time == 2020) %>%\n  group_by(PA, SZ, AG) %>%\n  summarise(`POP` = sum(`Pop`)) %>%\n  ungroup()%>%\n  pivot_wider(names_from=AG, \n              values_from=POP) %>%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %>%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%>%\nmutate(`AGED`=rowSums(.[16:21])) %>%\nmutate(`TOTAL`=rowSums(.[3:21])) %>%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %>%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\n\n\n\n\nmutate_at is used to create new variable or columns to the dataframe in R. This function is under the dplyr package.\n.fun() create a list of function calls. a flexible way to generate a named list of functions.\n\n\npopdata2020 <- popdata2020 %>%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = funs(toupper)) %>%\n  filter(`ECONOMY ACTIVE` > 0)\n\nleft join by joining popdata2020 to mpsz. If we do another way round, the map would have blank patches or it will not be a full complete sg map.\n\nmpsz_pop2020 <- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\n\n\n\n\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")\n\n\n\n\n\nqtm(), refers to quick thematic map plot\n\n\ntmap_mode(\"plot\")\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\n\n\n\nDifferent kinds of color scheme palette:\n\nhttp://www.sthda.com/english/wiki/colors-in-r#:~:text=There%20are%203%20types%20of,YlGn%2C%20YlGnBu%20YlOrBr%2C%20YlOrRd.\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"RdPu\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.1,  alpha = 1)\n\n\n\n\n\n\n\nhttps://www.rdocumentation.org/packages/tmap/versions/3.3-3/topics/tm_fill\n\njenks\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\nequal\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\nkmeans\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"kmeans\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\npretty\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"pretty\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\nquantile\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\nhclust\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"hclust\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\nheadtails\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"headtails\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\nsd\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"sd\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.0000  0.6519  0.7025  0.7742  0.7645 19.0000      92 \n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\nMap Legend\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\nMap Style\nhttps://r-tmap.github.io/tmap/reference/tmap_style.html\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"cobalt\")\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\ntmap_style(\"white\")\n\n\n\n\nDrawing small multiple choropleth maps\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Greens\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nyoungmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "handson_ex/handson_ex04a/handson_ex04a.html",
    "href": "handson_ex/handson_ex04a/handson_ex04a.html",
    "title": "Hands-On Ex04a - 1st Order SPA Methods",
    "section": "",
    "text": "pacman::p_load(maptools, sf, raster, spatstat, tmap)\n\n\n\n\nchildcare_sf <- st_read(\"data/child-care-services-geojson.geojson\") %>%\n  st_transform(crs = 3414)\n\nReading layer `child-care-services-geojson' from data source \n  `C:\\yifei-alpaca\\IS415-GAA\\handson_ex\\handson_ex04a\\data\\child-care-services-geojson.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1545 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\nsg_sf <- st_read(dsn = \"data\", layer=\"CostalOutline\")\n\nReading layer `CostalOutline' from data source \n  `C:\\yifei-alpaca\\IS415-GAA\\handson_ex\\handson_ex04a\\data' using driver `ESRI Shapefile'\nSimple feature collection with 60 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2663.926 ymin: 16357.98 xmax: 56047.79 ymax: 50244.03\nProjected CRS: SVY21\n\n\n\n sg_sf <- st_set_crs(sg_sf, 3414)\n\n\nmpsz_sf <- st_read(dsn = \"data\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\yifei-alpaca\\IS415-GAA\\handson_ex\\handson_ex04a\\data' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\n mpsz_sf <- st_set_crs(mpsz_sf, 3414)\n\n\n\n\n\n\n\n\nst_geometry(mpsz_sf)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:\n\n\nChildcare is in 3414 format.\n\nst_crs(childcare_sf)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\nst_crs(mpsz_sf)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\n\n\n\ntmap_mode('view')\ntm_shape(childcare_sf)+\n  tm_dots()\n\n\n\n\n\n\n\ntmap_mode('plot')"
  },
  {
    "objectID": "handson_ex/handson_ex04a/handson_ex04a.html#geospatial-data-wrangling",
    "href": "handson_ex/handson_ex04a/handson_ex04a.html#geospatial-data-wrangling",
    "title": "Hands-On Ex04a - 1st Order SPA Methods",
    "section": "Geospatial Data Wrangling",
    "text": "Geospatial Data Wrangling\nas_Spatial() convert geospatial data from simple feature data frame to sp spatial class.\nClass = SpatialPointsDataFrame\n\nchildcare <- as_Spatial(childcare_sf)\nmpsz <- as_Spatial(mpsz_sf)\nsg <- as_Spatial(sg_sf)\n\n\nchildcare\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 2\nnames       :    Nameescription \nmin values  :   kml_1, <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSBLOCKHOUSENUMBER</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSBUILDINGNAME</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSPOSTALCODE</th> <td>018989</td> </tr><tr bgcolor=\"\"> <th>ADDRESSSTREETNAME</th> <td>1, MARINA BOULEVARD, #B1 - 01, ONE MARINA BOULEVARD, SINGAPORE 018989</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSTYPE</th> <td></td> </tr><tr bgcolor=\"\"> <th>DESCRIPTION</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>HYPERLINK</th> <td></td> </tr><tr bgcolor=\"\"> <th>LANDXADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>LANDYADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"\"> <th>NAME</th> <td>THE LITTLE SKOOL-HOUSE INTERNATIONAL PTE. LTD.</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>PHOTOURL</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSFLOORNUMBER</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>08F73931F4A691F4</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200826094036</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSUNITNUMBER</th> <td></td> </tr></table></center> \nmax values  : kml_999,                  <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSBLOCKHOUSENUMBER</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSBUILDINGNAME</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSPOSTALCODE</th> <td>829646</td> </tr><tr bgcolor=\"\"> <th>ADDRESSSTREETNAME</th> <td>200, PONGGOL SEVENTEENTH AVENUE, SINGAPORE 829646</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSTYPE</th> <td></td> </tr><tr bgcolor=\"\"> <th>DESCRIPTION</th> <td>Child Care Services</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>HYPERLINK</th> <td></td> </tr><tr bgcolor=\"\"> <th>LANDXADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>LANDYADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"\"> <th>NAME</th> <td>RAFFLES KIDZ @ PUNGGOL PTE LTD</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>PHOTOURL</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSFLOORNUMBER</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>379D017BF244B0FA</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200826094036</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSUNITNUMBER</th> <td></td> </tr></table></center> \n\n\n\nmpsz\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 323 \nextent      : 2667.538, 56396.44, 15748.72, 50256.33  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 15\nnames       : OBJECTID, SUBZONE_NO, SUBZONE_N, SUBZONE_C, CA_IND, PLN_AREA_N, PLN_AREA_C,       REGION_N, REGION_C,          INC_CRC, FMEL_UPD_D,     X_ADDR,     Y_ADDR,    SHAPE_Leng,    SHAPE_Area \nmin values  :        1,          1, ADMIRALTY,    AMSZ01,      N, ANG MO KIO,         AM, CENTRAL REGION,       CR, 00F5E30B5C9B7AD8,      16409,  5092.8949,  19579.069, 871.554887798, 39437.9352703 \nmax values  :      323,         17,    YUNNAN,    YSSZ09,      Y,     YISHUN,         YS,    WEST REGION,       WR, FFCCF172717C2EAF,      16409, 50424.7923, 49552.7904, 68083.9364708,  69748298.792 \n\n\n\nsg\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 4\nnames       : GDO_GID, MSLINK, MAPID,              COSTAL_NAM \nmin values  :       1,      1,     0,             ISLAND LINK \nmax values  :      60,     67,     0, SINGAPORE - MAIN ISLAND"
  },
  {
    "objectID": "handson_ex/handson_ex04a/handson_ex04a.html#converting-the-spatial-class-into-generic-sp-format",
    "href": "handson_ex/handson_ex04a/handson_ex04a.html#converting-the-spatial-class-into-generic-sp-format",
    "title": "Hands-On Ex04a - 1st Order SPA Methods",
    "section": "Converting the Spatial* class into generic SP format",
    "text": "Converting the Spatial* class into generic SP format\nIn order to convert data in ppp object format, we need to convert the spatial class into spatial object first.\nppp refers to two-dimensional point pattern.\n\nchildcare_sp <- as(childcare, \"SpatialPoints\")\nsg_sp <- as(sg, \"SpatialPolygons\")\n\nClass = SpatialPoints\n\nchildcare_sp\n\nclass       : SpatialPoints \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\n\nsg_sp\n\nclass       : SpatialPolygons \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\n\nppp Point Pattern Object\nconvert spatial data into spatstat’s pp object format.\nA ppp object has the coordinates of the points and the analysis “window”. To assign the points locations we need to extract the coordinates from sptialpoint object which has been done above.\n\nchildcare_ppp <- as(childcare_sp, \"ppp\")\nchildcare_ppp\n\nPlanar point pattern: 1545 points\nwindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n\n\n\nplot(childcare_ppp)\n\n\n\n\n\nsummary(childcare_ppp)\n\nPlanar point pattern:  1545 points\nAverage intensity 1.91145e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 3 decimal places\ni.e. rounded to the nearest multiple of 0.001 units\n\nWindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n                    (34200 x 23630 units)\nWindow area = 808287000 square units\n\n\n\n\nHandling duplicated points\nto check if there is duplicates\n\nany(duplicated(childcare_ppp))\n\n[1] TRUE\n\n\nCount the number of duplicates\n\nmultiplicity(childcare_ppp)\n\n   1    2    3    4    5    6    7    8    9   10   11   12   13   14   15   16 \n   1    1    1    3    1    1    1    1    2    1    1    1    1    1    1    1 \n  17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32 \n   1    1    1    1    1    1    1    1    1    1    9    1    1    1    1    1 \n  33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n  49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64 \n   1    1    1    1    1    1    2    1    1    3    1    1    1    1    1    1 \n  65   66   67   68   69   70   71   72   73   74   75   76   77   78   79   80 \n   1    1    1    1    1    2    1    1    1    1    1    2    1    1    1    1 \n  81   82   83   84   85   86   87   88   89   90   91   92   93   94   95   96 \n   1    1    1    3    1    1    1    1    1    1    1    1    1    1    1    1 \n  97   98   99  100  101  102  103  104  105  106  107  108  109  110  111  112 \n   1    1    1    1    1    1    1    1    2    1    1    1    1    1    1    1 \n 113  114  115  116  117  118  119  120  121  122  123  124  125  126  127  128 \n   1    1    1    1    1    1    2    1    1    1    3    1    1    1    2    1 \n 129  130  131  132  133  134  135  136  137  138  139  140  141  142  143  144 \n   1    1    1    1    1    2    1    1    1    1    1    1    1    1    3    2 \n 145  146  147  148  149  150  151  152  153  154  155  156  157  158  159  160 \n   1    2    1    1    1    2    2    3    1    5    1    5    1    1    1    2 \n 161  162  163  164  165  166  167  168  169  170  171  172  173  174  175  176 \n   1    1    1    1    2    1    1    1    1    1    1    2    1    1    1    1 \n 177  178  179  180  181  182  183  184  185  186  187  188  189  190  191  192 \n   1    4    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 193  194  195  196  197  198  199  200  201  202  203  204  205  206  207  208 \n   1    1    1    1    1    2    2    1    1    1    1    2    1    4    1    1 \n 209  210  211  212  213  214  215  216  217  218  219  220  221  222  223  224 \n   2    1    1    1    1    1    1    1    1    1    1    1    2    1    1    1 \n 225  226  227  228  229  230  231  232  233  234  235  236  237  238  239  240 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 241  242  243  244  245  246  247  248  249  250  251  252  253  254  255  256 \n   1    1    1    1    2    1    1    1    1    1    1    1    1    1    1    1 \n 257  258  259  260  261  262  263  264  265  266  267  268  269  270  271  272 \n   1    1    1    1    1    1    1    1    1    1    2    1    1    1    1    3 \n 273  274  275  276  277  278  279  280  281  282  283  284  285  286  287  288 \n   1    1    1    1    1    1    3    1    1    1    1    1    1    1    1    1 \n 289  290  291  292  293  294  295  296  297  298  299  300  301  302  303  304 \n   1    1    1    1    1    1    1    9    1    1    2    1    1    1    1    1 \n 305  306  307  308  309  310  311  312  313  314  315  316  317  318  319  320 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 321  322  323  324  325  326  327  328  329  330  331  332  333  334  335  336 \n   1    1    1    5    1    1    1    1    1    2    1    1    2    2    1    1 \n 337  338  339  340  341  342  343  344  345  346  347  348  349  350  351  352 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    2    2    1 \n 353  354  355  356  357  358  359  360  361  362  363  364  365  366  367  368 \n   1    1    1    1    9    1    1    1    1    1    1    1    1    1    1    1 \n 369  370  371  372  373  374  375  376  377  378  379  380  381  382  383  384 \n   1    3    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 385  386  387  388  389  390  391  392  393  394  395  396  397  398  399  400 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 401  402  403  404  405  406  407  408  409  410  411  412  413  414  415  416 \n   1    1    2    1    1    1    1    1    1    1    2    1    1    1    1    1 \n 417  418  419  420  421  422  423  424  425  426  427  428  429  430  431  432 \n   1    1    1    1    1    1    1    2    1    1    2    1    1    1    1    1 \n 433  434  435  436  437  438  439  440  441  442  443  444  445  446  447  448 \n   1    1    1    1    2    1    1    1    1    1    1    1    1    1    1    1 \n 449  450  451  452  453  454  455  456  457  458  459  460  461  462  463  464 \n   1    1    9    9    1    1    1    1    1    1    1    1    1    1    2    1 \n 465  466  467  468  469  470  471  472  473  474  475  476  477  478  479  480 \n   2    1    1    1    1    1    1    1    1    1    1    1    2    2    1    1 \n 481  482  483  484  485  486  487  488  489  490  491  492  493  494  495  496 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 497  498  499  500  501  502  503  504  505  506  507  508  509  510  511  512 \n   1    1    1    1    1    1    2    1    1    1    1    1    1    1    1    2 \n 513  514  515  516  517  518  519  520  521  522  523  524  525  526  527  528 \n   1    1    1    1    1    1    1    1    1    1    1    2    1    1    3    1 \n 529  530  531  532  533  534  535  536  537  538  539  540  541  542  543  544 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 545  546  547  548  549  550  551  552  553  554  555  556  557  558  559  560 \n   1    1    1    1    1    1    1    1    1    3    1    1    1    1    1    1 \n 561  562  563  564  565  566  567  568  569  570  571  572  573  574  575  576 \n   2    2    2    1    1    1    1    2    1    1    2    1    1    1    2    1 \n 577  578  579  580  581  582  583  584  585  586  587  588  589  590  591  592 \n   1    2    1    1    1    1    1    9    1    4    1    2    1    1    1    1 \n 593  594  595  596  597  598  599  600  601  602  603  604  605  606  607  608 \n   2    1    1    1    1    1    1    1    2    1    2    1    1    1    1    1 \n 609  610  611  612  613  614  615  616  617  618  619  620  621  622  623  624 \n   1    1    1    1    1    1    1    1    1    2    1    2    1    1    1    1 \n 625  626  627  628  629  630  631  632  633  634  635  636  637  638  639  640 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 641  642  643  644  645  646  647  648  649  650  651  652  653  654  655  656 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    4 \n 657  658  659  660  661  662  663  664  665  666  667  668  669  670  671  672 \n   1    1    1    1    1    1    1    3    1    1    1    1    1    1    1    1 \n 673  674  675  676  677  678  679  680  681  682  683  684  685  686  687  688 \n   1    1    1    1    1    4    1    1    1    1    1    4    1    1    1    1 \n 689  690  691  692  693  694  695  696  697  698  699  700  701  702  703  704 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 705  706  707  708  709  710  711  712  713  714  715  716  717  718  719  720 \n   1    1    2    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 721  722  723  724  725  726  727  728  729  730  731  732  733  734  735  736 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 737  738  739  740  741  742  743  744  745  746  747  748  749  750  751  752 \n   1    2    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 753  754  755  756  757  758  759  760  761  762  763  764  765  766  767  768 \n   1    1    1    1    1    2    1    1    1    1    1    1    1    1    1    1 \n 769  770  771  772  773  774  775  776  777  778  779  780  781  782  783  784 \n   1    1    1    1    1    1    1    1    1    4    1    1    1    1    1    1 \n 785  786  787  788  789  790  791  792  793  794  795  796  797  798  799  800 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 801  802  803  804  805  806  807  808  809  810  811  812  813  814  815  816 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 817  818  819  820  821  822  823  824  825  826  827  828  829  830  831  832 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 833  834  835  836  837  838  839  840  841  842  843  844  845  846  847  848 \n   1    1    1    1    1    1    1    2    1    1    1    1    1    1    1    1 \n 849  850  851  852  853  854  855  856  857  858  859  860  861  862  863  864 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 865  866  867  868  869  870  871  872  873  874  875  876  877  878  879  880 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    2 \n 881  882  883  884  885  886  887  888  889  890  891  892  893  894  895  896 \n   3    1    1    1    2    1    1    1    3    1    1    3    1    1    1    1 \n 897  898  899  900  901  902  903  904  905  906  907  908  909  910  911  912 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 913  914  915  916  917  918  919  920  921  922  923  924  925  926  927  928 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 929  930  931  932  933  934  935  936  937  938  939  940  941  942  943  944 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 945  946  947  948  949  950  951  952  953  954  955  956  957  958  959  960 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    2 \n 961  962  963  964  965  966  967  968  969  970  971  972  973  974  975  976 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 977  978  979  980  981  982  983  984  985  986  987  988  989  990  991  992 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 993  994  995  996  997  998  999 1000 1001 1002 1003 1004 1005 1006 1007 1008 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 \n   1    1    1    1    1    1    1    1    1    2    2    1    1    1    1    1 \n1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 \n   1    1    1    1    1    2    1    1    1    1    1    1    1    1    1    1 \n1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 \n   1    1    1    1    1    1    1    1    2    2    1    1    1    5    1    1 \n1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 \n   1    1    1    1    1    1    1    1    1    2    1    1    1    1    1    1 \n1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 \n   1    1    1    1    1    1    1    1    1    1    2    1    1    1    1    1 \n1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 \n   1    9    1    2    2    1    1    1    2    1    1    1    1    1    1    1 \n1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 \n   1    1    1    1    2    1    1    1    3    1    1    1    1    1    1    1 \n1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 \n   9    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 \n   1    1    1    2    1    1    1    1    1    1    1    1    1    1    1    1 \n1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    2 \n1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 \n   1    1    1    2    1    2    1    1    1    2    2    2    1    1    1    1 \n1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 \n   1    1    2    1    1    1    1    1    1    1    1    1    2    1    1    1 \n1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 \n   1    1    1    1    3    1    1    1    1    1    1    1    1    1    1    1 \n1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 \n   1    1    1    1    1    1    1    1    4    1    1    1    1    1    2    1 \n1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 \n   1    1    1    1    1    1    1    1    1    9    1    1    1    1    1    1 \n1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    2    1 \n1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 \n   1    2    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 \n   1    1    1    1    1    1    1    1    1    1    2    1    1    1    1    1 \n1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 \n   1    1    1    1    1    1    2    1    1    1    1    1    1    1    1    1 \n1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 \n   1    1    1    1    1    1    1    1    1    1    5    1    1    1    1    1 \n1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 \n   1    1    1    1    1    2    1    1    1    1    2    1    1    1    1    3 \n1537 1538 1539 1540 1541 1542 1543 1544 1545 \n   1    1    1    1    1    1    2    1    1 \n\n\nto know how many locations have more than one point event\n\nsum(multiplicity(childcare_ppp) > 1)\n\n[1] 128\n\n\nTo view the location of the duplicates\n\ntmap_mode('view')\ntm_shape(childcare) +\n  tm_dots(alpha=0.4, \n          size=0.05)\n\n\n\n\n\n\n\n\n3 ways to overcome the problem of duplicates\n\ndelete duplicates (some useful points might be lost)\nuse jittering (do not occupy the same exact space)\nmake each point unique and attach the duplicates, and mark it.\n\nBelow code is using the 2nd method.\n\nchildcare_ppp_jit <- rjitter(childcare_ppp, \n                             retry=TRUE, \n                             nsim=1, \n                             drop=TRUE)\n\n\nany(duplicated(childcare_ppp_jit))\n\n[1] FALSE"
  },
  {
    "objectID": "handson_ex/handson_ex04a/handson_ex04a.html#creating-owin-object",
    "href": "handson_ex/handson_ex04a/handson_ex04a.html#creating-owin-object",
    "title": "Hands-On Ex04a - 1st Order SPA Methods",
    "section": "Creating owin object",
    "text": "Creating owin object\nOwin = define the observation window of a point pattern. It is specially designed to represent this polygonal region.\n\nsg_owin <- as(sg_sp, \"owin\")\n\n\nplot(sg_owin)\n\n\n\n\n\nsummary(sg_owin)\n\nWindow: polygonal boundary\n60 separate polygons (no holes)\n            vertices        area relative.area\npolygon 1         38 1.56140e+04      2.09e-05\npolygon 2        735 4.69093e+06      6.27e-03\npolygon 3         49 1.66986e+04      2.23e-05\npolygon 4         76 3.12332e+05      4.17e-04\npolygon 5       5141 6.36179e+08      8.50e-01\npolygon 6         42 5.58317e+04      7.46e-05\npolygon 7         67 1.31354e+06      1.75e-03\npolygon 8         15 4.46420e+03      5.96e-06\npolygon 9         14 5.46674e+03      7.30e-06\npolygon 10        37 5.26194e+03      7.03e-06\npolygon 11        53 3.44003e+04      4.59e-05\npolygon 12        74 5.82234e+04      7.78e-05\npolygon 13        69 5.63134e+04      7.52e-05\npolygon 14       143 1.45139e+05      1.94e-04\npolygon 15       165 3.38736e+05      4.52e-04\npolygon 16       130 9.40465e+04      1.26e-04\npolygon 17        19 1.80977e+03      2.42e-06\npolygon 18        16 2.01046e+03      2.69e-06\npolygon 19        93 4.30642e+05      5.75e-04\npolygon 20        90 4.15092e+05      5.54e-04\npolygon 21       721 1.92795e+06      2.57e-03\npolygon 22       330 1.11896e+06      1.49e-03\npolygon 23       115 9.28394e+05      1.24e-03\npolygon 24        37 1.01705e+04      1.36e-05\npolygon 25        25 1.66227e+04      2.22e-05\npolygon 26        10 2.14507e+03      2.86e-06\npolygon 27       190 2.02489e+05      2.70e-04\npolygon 28       175 9.25904e+05      1.24e-03\npolygon 29      1993 9.99217e+06      1.33e-02\npolygon 30        38 2.42492e+04      3.24e-05\npolygon 31        24 6.35239e+03      8.48e-06\npolygon 32        53 6.35791e+05      8.49e-04\npolygon 33        41 1.60161e+04      2.14e-05\npolygon 34        22 2.54368e+03      3.40e-06\npolygon 35        30 1.08382e+04      1.45e-05\npolygon 36       327 2.16921e+06      2.90e-03\npolygon 37       111 6.62927e+05      8.85e-04\npolygon 38        90 1.15991e+05      1.55e-04\npolygon 39        98 6.26829e+04      8.37e-05\npolygon 40       415 3.25384e+06      4.35e-03\npolygon 41       222 1.51142e+06      2.02e-03\npolygon 42       107 6.33039e+05      8.45e-04\npolygon 43         7 2.48299e+03      3.32e-06\npolygon 44        17 3.28303e+04      4.38e-05\npolygon 45        26 8.34758e+03      1.11e-05\npolygon 46       177 4.67446e+05      6.24e-04\npolygon 47        16 3.19460e+03      4.27e-06\npolygon 48        15 4.87296e+03      6.51e-06\npolygon 49        66 1.61841e+04      2.16e-05\npolygon 50       149 5.63430e+06      7.53e-03\npolygon 51       609 2.62570e+07      3.51e-02\npolygon 52         8 7.82256e+03      1.04e-05\npolygon 53       976 2.33447e+07      3.12e-02\npolygon 54        55 8.25379e+04      1.10e-04\npolygon 55       976 2.33447e+07      3.12e-02\npolygon 56        61 3.33449e+05      4.45e-04\npolygon 57         6 1.68410e+04      2.25e-05\npolygon 58         4 9.45963e+03      1.26e-05\npolygon 59        46 6.99702e+05      9.35e-04\npolygon 60        13 7.00873e+04      9.36e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 748741000 square units\nFraction of frame area: 0.414\n\n\n\nCombining point events object and owin object\n\nchildcareSG_ppp = childcare_ppp[sg_owin]\n\n*** Combine both the point and polygon feature in one ppp object class as shown below.\n\nsummary(childcareSG_ppp)\n\nPlanar point pattern:  1545 points\nAverage intensity 2.063463e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 3 decimal places\ni.e. rounded to the nearest multiple of 0.001 units\n\nWindow: polygonal boundary\n60 separate polygons (no holes)\n            vertices        area relative.area\npolygon 1         38 1.56140e+04      2.09e-05\npolygon 2        735 4.69093e+06      6.27e-03\npolygon 3         49 1.66986e+04      2.23e-05\npolygon 4         76 3.12332e+05      4.17e-04\npolygon 5       5141 6.36179e+08      8.50e-01\npolygon 6         42 5.58317e+04      7.46e-05\npolygon 7         67 1.31354e+06      1.75e-03\npolygon 8         15 4.46420e+03      5.96e-06\npolygon 9         14 5.46674e+03      7.30e-06\npolygon 10        37 5.26194e+03      7.03e-06\npolygon 11        53 3.44003e+04      4.59e-05\npolygon 12        74 5.82234e+04      7.78e-05\npolygon 13        69 5.63134e+04      7.52e-05\npolygon 14       143 1.45139e+05      1.94e-04\npolygon 15       165 3.38736e+05      4.52e-04\npolygon 16       130 9.40465e+04      1.26e-04\npolygon 17        19 1.80977e+03      2.42e-06\npolygon 18        16 2.01046e+03      2.69e-06\npolygon 19        93 4.30642e+05      5.75e-04\npolygon 20        90 4.15092e+05      5.54e-04\npolygon 21       721 1.92795e+06      2.57e-03\npolygon 22       330 1.11896e+06      1.49e-03\npolygon 23       115 9.28394e+05      1.24e-03\npolygon 24        37 1.01705e+04      1.36e-05\npolygon 25        25 1.66227e+04      2.22e-05\npolygon 26        10 2.14507e+03      2.86e-06\npolygon 27       190 2.02489e+05      2.70e-04\npolygon 28       175 9.25904e+05      1.24e-03\npolygon 29      1993 9.99217e+06      1.33e-02\npolygon 30        38 2.42492e+04      3.24e-05\npolygon 31        24 6.35239e+03      8.48e-06\npolygon 32        53 6.35791e+05      8.49e-04\npolygon 33        41 1.60161e+04      2.14e-05\npolygon 34        22 2.54368e+03      3.40e-06\npolygon 35        30 1.08382e+04      1.45e-05\npolygon 36       327 2.16921e+06      2.90e-03\npolygon 37       111 6.62927e+05      8.85e-04\npolygon 38        90 1.15991e+05      1.55e-04\npolygon 39        98 6.26829e+04      8.37e-05\npolygon 40       415 3.25384e+06      4.35e-03\npolygon 41       222 1.51142e+06      2.02e-03\npolygon 42       107 6.33039e+05      8.45e-04\npolygon 43         7 2.48299e+03      3.32e-06\npolygon 44        17 3.28303e+04      4.38e-05\npolygon 45        26 8.34758e+03      1.11e-05\npolygon 46       177 4.67446e+05      6.24e-04\npolygon 47        16 3.19460e+03      4.27e-06\npolygon 48        15 4.87296e+03      6.51e-06\npolygon 49        66 1.61841e+04      2.16e-05\npolygon 50       149 5.63430e+06      7.53e-03\npolygon 51       609 2.62570e+07      3.51e-02\npolygon 52         8 7.82256e+03      1.04e-05\npolygon 53       976 2.33447e+07      3.12e-02\npolygon 54        55 8.25379e+04      1.10e-04\npolygon 55       976 2.33447e+07      3.12e-02\npolygon 56        61 3.33449e+05      4.45e-04\npolygon 57         6 1.68410e+04      2.25e-05\npolygon 58         4 9.45963e+03      1.26e-05\npolygon 59        46 6.99702e+05      9.35e-04\npolygon 60        13 7.00873e+04      9.36e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 748741000 square units\nFraction of frame area: 0.414\n\n\n\nplot(childcareSG_ppp)"
  },
  {
    "objectID": "handson_ex/handson_ex04a/handson_ex04a.html#first-order-spatial-point-pattern-analysis",
    "href": "handson_ex/handson_ex04a/handson_ex04a.html#first-order-spatial-point-pattern-analysis",
    "title": "Hands-On Ex04a - 1st Order SPA Methods",
    "section": "First-order Spatial Point Pattern Analysis",
    "text": "First-order Spatial Point Pattern Analysis\n\nKernel density estimation (KDE)\nConfirmatory Spatial Point Patterns Analysis by using Nearest Neighbour"
  },
  {
    "objectID": "handson_ex/handson_ex04a/handson_ex04a.html#kernel-density-estimation",
    "href": "handson_ex/handson_ex04a/handson_ex04a.html#kernel-density-estimation",
    "title": "Hands-On Ex04a - 1st Order SPA Methods",
    "section": "Kernel Density Estimation",
    "text": "Kernel Density Estimation\n\nType bandwidth algorithm\n\nkde_childcareSG_bw_diggle <- density(childcareSG_ppp,\n                              sigma=bw.diggle,\n                              edge=TRUE,\n                            kernel=\"gaussian\") \n\n\nkde_childcareSG_bw_scott <- density(childcareSG_ppp,\n                              sigma=bw.scott,\n                              edge=TRUE,\n                            kernel=\"gaussian\")\n\n\nkde_childcareSG_bw_CvL <- density(childcareSG_ppp,\n                              sigma=bw.CvL,\n                              edge=TRUE,\n                            kernel=\"gaussian\")\n\n\nkde_childcareSG_bw_ppl <- density(childcareSG_ppp,sigma=bw.ppl,\n                              edge=TRUE,\n                            kernel=\"gaussian\")\n\nppl algorithm gives us the narrower and smaller bandwidth. we can see how other algo works too as shown below.\n\nplot(kde_childcareSG_bw_ppl)\n\n\n\nplot(kde_childcareSG_bw_CvL)\n\n\n\nplot(kde_childcareSG_bw_scott)\n\n\n\nplot(kde_childcareSG_bw_diggle)\n\n\n\n\n\nbw <- bw.diggle(childcareSG_ppp)\nbw\n\n   sigma \n298.4095 \n\n\n\n\nRecalling KDE values\nrescale() is used to convert the unit of measurement from meter to kilometer.\n\nchildcareSG_ppp.km <- rescale(childcareSG_ppp, 1000, \"km\")\n\nre-run density()\n\nkde_childcareSG.bw <- density(childcareSG_ppp.km, sigma=bw.diggle, edge=TRUE, kernel=\"gaussian\")\nplot(kde_childcareSG.bw)\n\n\n\n\n\n\nWorking with different automatic bandwidth method\n\n bw.CvL(childcareSG_ppp.km)\n\n   sigma \n4.543278 \n\n\n\nbw.scott(childcareSG_ppp.km)\n\n sigma.x  sigma.y \n2.224898 1.450966 \n\n\n\nbw.ppl(childcareSG_ppp.km)\n\n    sigma \n0.3897114 \n\n\n\nbw.diggle(childcareSG_ppp.km)\n\n    sigma \n0.2984095 \n\n\n\n\nWorking with different kernel method\n\npar(mfrow=c(2,2))\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"gaussian\"), \n     main=\"Gaussian\")\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"epanechnikov\"), \n     main=\"Epanechnikov\")\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"quartic\"), \n     main=\"Quartic\")\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"disc\"), \n     main=\"Disc\")"
  },
  {
    "objectID": "handson_ex/handson_ex04a/handson_ex04a.html#fixed-and-adaptive-kde",
    "href": "handson_ex/handson_ex04a/handson_ex04a.html#fixed-and-adaptive-kde",
    "title": "Hands-On Ex04a - 1st Order SPA Methods",
    "section": "Fixed and Adaptive KDE",
    "text": "Fixed and Adaptive KDE\n\nComputing KDE by using fixed bandwidth\nFixed bandwidth method is very sensitive to highly skew distribution of spatial point patterns over geographical units for example urban versus rural. One way to overcome the prob is by using adaptive bandwidth instead.\n\nkde_childcareSG_600 <- density(childcareSG_ppp.km, sigma=0.6, edge=TRUE, kernel=\"gaussian\")\nplot(kde_childcareSG_600)\n\n\n\n\n\n\nComputing KDE by using adaptive bandwidth\n\nkde_childcareSG_adaptive <- adaptive.density(childcareSG_ppp.km, method=\"kernel\")\nplot(kde_childcareSG_adaptive)\n\n\n\n\n\npar(mfrow=c(1,2))\nplot(kde_childcareSG.bw, main = \"Fixed bandwidth\")\nplot(kde_childcareSG_adaptive, main = \"Adaptive bandwidth\")\n\n\n\n\n\n\nConverting KDE output into grid object\nspplot is a plot method for spatial data with attributes.\n\ngridded_kde_childcareSG_bw <- as.SpatialGridDataFrame.im(kde_childcareSG.bw)\nspplot(gridded_kde_childcareSG_bw)\n\n\n\n\n\n\nConverting grided output into raster\n\nkde_childcareSG_bw_raster <- raster(gridded_kde_childcareSG_bw)\n\n\nkde_childcareSG_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : v \nvalues     : -8.476185e-15, 28.51831  (min, max)\n\n\n\n\nAssigning projection systems\n\nprojection(kde_childcareSG_bw_raster) <- CRS(\"+init=EPSG:3414\")\nkde_childcareSG_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : +init=EPSG:3414 \nsource     : memory\nnames      : v \nvalues     : -8.476185e-15, 28.51831  (min, max)"
  },
  {
    "objectID": "handson_ex/handson_ex04a/handson_ex04a.html#visualizing-the-output-in-tmap",
    "href": "handson_ex/handson_ex04a/handson_ex04a.html#visualizing-the-output-in-tmap",
    "title": "Hands-On Ex04a - 1st Order SPA Methods",
    "section": "Visualizing the output in tmap",
    "text": "Visualizing the output in tmap\n\ntmap_mode('plot')\ntm_shape(kde_childcareSG_bw_raster) + \n  tm_raster(\"v\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE)\n\n\n\n\n\nComparing spatial point patterns using KDE\n\npg = mpsz[mpsz@data$PLN_AREA_N == \"PUNGGOL\",]\ntm = mpsz[mpsz@data$PLN_AREA_N == \"TAMPINES\",]\nck = mpsz[mpsz@data$PLN_AREA_N == \"CHOA CHU KANG\",]\njw = mpsz[mpsz@data$PLN_AREA_N == \"JURONG WEST\",]\n\n\npar(mfrow=c(2,2))\nplot(pg, main = \"Ponggol\")\nplot(tm, main = \"Tampines\")\nplot(ck, main = \"Choa Chu Kang\")\nplot(jw, main = \"Jurong West\")\n\n\n\n\n\n\nConverting the spatial points data frame into generic sp format\n\npg_sp = as(pg, \"SpatialPolygons\")\ntm_sp = as(tm, \"SpatialPolygons\")\nck_sp = as(ck, \"SpatialPolygons\")\njw_sp = as(jw, \"SpatialPolygons\")\n\n\n\nCreate owin object\n\npg_owin = as(pg_sp, \"owin\")\ntm_owin = as(tm_sp, \"owin\")\nck_owin = as(ck_sp, \"owin\")\njw_owin = as(jw_sp, \"owin\")\n\n\n\n***Combining childcare points and the study area\n\nchildcare_pg_ppp = childcare_ppp_jit[pg_owin]\nchildcare_tm_ppp = childcare_ppp_jit[tm_owin]\nchildcare_ck_ppp = childcare_ppp_jit[ck_owin]\nchildcare_jw_ppp = childcare_ppp_jit[jw_owin]\n\n\nchildcare_pg_ppp.km = rescale(childcare_pg_ppp, 1000, \"km\")\nchildcare_tm_ppp.km = rescale(childcare_tm_ppp, 1000, \"km\")\nchildcare_ck_ppp.km = rescale(childcare_ck_ppp, 1000, \"km\")\nchildcare_jw_ppp.km = rescale(childcare_jw_ppp, 1000, \"km\")\n\nplot areas and locations of the childcare centres.\n\npar(mfrow=c(2,2))\nplot(childcare_pg_ppp.km, main=\"Punggol\")\nplot(childcare_tm_ppp.km, main=\"Tampines\")\nplot(childcare_ck_ppp.km, main=\"Choa Chu Kang\")\nplot(childcare_jw_ppp.km, main=\"Jurong West\")\n\n\n\n\n\n\nComputing KDE\n\npar(mfrow=c(2,2))\nplot(density(childcare_pg_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\nplot(density(childcare_tm_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tempines\")\nplot(density(childcare_ck_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Choa Chu Kang\")\nplot(density(childcare_jw_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"JUrong West\")\n\n\n\n\n\n\nComputing fixed bandwidth KDE\n\npar(mfrow=c(2,2))\nplot(density(childcare_ck_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Chou Chu Kang\")\nplot(density(childcare_jw_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"JUrong West\")\nplot(density(childcare_pg_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\nplot(density(childcare_tm_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tampines\")"
  },
  {
    "objectID": "handson_ex/handson_ex04a/handson_ex04a.html#nearest-neighbour-analysis",
    "href": "handson_ex/handson_ex04a/handson_ex04a.html#nearest-neighbour-analysis",
    "title": "Hands-On Ex04a - 1st Order SPA Methods",
    "section": "Nearest Neighbour Analysis",
    "text": "Nearest Neighbour Analysis\nThe test hypotheses are:\nHo = The distribution of childcare services are randomly distributed.\nH1= The distribution of childcare services are not randomly distributed.\nThe 95% confident interval will be used.\nthere are many types of alternatives:\n\n“two.sided”\n“less”\n“greater”\n“clustered”\n“regular”\nalternative=\"less\" or alternative=\"clustered\": the alternative hypothesis is that R<1 corresponding to a clustered point pattern;\nalternative=\"greater\" or alternative=\"regular\": the alternative hypothesis is that R>1 corresponding to a regular or ordered point pattern;\nalternative=\"two.sided\": the alternative hypothesis is that R≠1 corresponding to a clustered or regular pattern.\n\nIn accordance with the conventional acceptance of statistical significance at a P-value of 0.05 or 5%, CI are frequently calculated at a confidence level of 95%. In general, if an observed result is statistically significant at a P-value of 0.05, then the null hypothesis should not fall within the 95% CI.\n\nclarkevans.test(childcareSG_ppp,\n                correction=\"none\",\n                clipregion=\"sg_owin\",\n                alternative=c(\"clustered\"),\n                nsim=99 )\n\n\n    Clark-Evans test\n    No edge correction\n    Monte Carlo test based on 99 simulations of CSR with fixed n\n\ndata:  childcareSG_ppp\nR = 0.54756, p-value = 0.01\nalternative hypothesis: clustered (R < 1)\n\n\n\nclarkevans.test(childcare_ck_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Monte Carlo test based on 999 simulations of CSR with fixed n\n\ndata:  childcare_ck_ppp\nR = 0.94365, p-value = 0.096\nalternative hypothesis: two-sided\n\n\n\nclarkevans.test(childcare_tm_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Monte Carlo test based on 999 simulations of CSR with fixed n\n\ndata:  childcare_tm_ppp\nR = 0.80257, p-value = 0.002\nalternative hypothesis: two-sided"
  },
  {
    "objectID": "handson_ex/handson_ex04b/handson_ex04b.html",
    "href": "handson_ex/handson_ex04b/handson_ex04b.html",
    "title": "Hands-On Ex04b - 2nd Order SPA Methods",
    "section": "",
    "text": "pacman::p_load(maptools, sf, raster, spatstat, tmap)"
  },
  {
    "objectID": "handson_ex/handson_ex04b/handson_ex04b.html#import-the-spatial-data",
    "href": "handson_ex/handson_ex04b/handson_ex04b.html#import-the-spatial-data",
    "title": "Hands-On Ex04b - 2nd Order SPA Methods",
    "section": "Import the spatial data",
    "text": "Import the spatial data\n\nchildcare_sf <- st_read(\"data/child-care-services-geojson.geojson\") %>%\n  st_transform(crs = 3414)\n\nReading layer `child-care-services-geojson' from data source \n  `C:\\yifei-alpaca\\IS415-GAA\\handson_ex\\handson_ex04b\\data\\child-care-services-geojson.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1545 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\nsg_sf <- st_read(dsn = \"data\", layer=\"CostalOutline\")  %>%\n  st_transform(crs = 3414)\n\nReading layer `CostalOutline' from data source \n  `C:\\yifei-alpaca\\IS415-GAA\\handson_ex\\handson_ex04b\\data' using driver `ESRI Shapefile'\nSimple feature collection with 60 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2663.926 ymin: 16357.98 xmax: 56047.79 ymax: 50244.03\nProjected CRS: SVY21\n\n\n\nst_crs(sg_sf)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\nmpsz_sf <- st_read(dsn = \"data\", \n                layer = \"MP14_SUBZONE_WEB_PL\")  %>%\n  st_transform(crs = 3414)\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\yifei-alpaca\\IS415-GAA\\handson_ex\\handson_ex04b\\data' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\ntmap_mode('view')\n\n\ntm_shape(childcare_sf)+\n  tm_dots()\n\n\n\n\n\n\n\ntmap_mode('plot')\n\n\nConvert sf data frames to sp’s Spatial* class\n\nchildcare <- as_Spatial(childcare_sf)\nmpsz <- as_Spatial(mpsz_sf)\nsg <- as_Spatial(sg_sf)\n\n\n\nConverting the Spatial* class into generic sp format\n\nchildcare_sp <- as(childcare, \"SpatialPoints\")\nsg_sp <- as(sg, \"SpatialPolygons\")\n\n\nchildcare_sp\n\nclass       : SpatialPoints \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\n\nsg_sp\n\nclass       : SpatialPolygons \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\n\n\nConverting the generic sp format into spatstat’s ppp format\n\nchildcare_ppp <- as(childcare_sp, \"ppp\")\nchildcare_ppp\n\nPlanar point pattern: 1545 points\nwindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n\n\n\nplot(childcare_ppp)\n\n\n\n\n\nsummary(childcare_ppp)\n\nPlanar point pattern:  1545 points\nAverage intensity 1.91145e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 3 decimal places\ni.e. rounded to the nearest multiple of 0.001 units\n\nWindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n                    (34200 x 23630 units)\nWindow area = 808287000 square units\n\n\n\n\nHandling Duplicates\n\nany(duplicated(childcare_ppp))\n\n[1] TRUE\n\n\n\nsum(multiplicity(childcare_ppp) > 1)\n\n[1] 128\n\n\n\ntmap_mode('view')\n\n\ntm_shape(childcare) +\n  tm_dots(alpha=0.4, \n          size=0.05)\n\n\n\n\n\n\n\ntmap_mode('plot')\n\n\nchildcare_ppp_jit <- rjitter(childcare_ppp, \n                             retry=TRUE, \n                             nsim=1, \n                             drop=TRUE)\n\n\nany(duplicated(childcare_ppp_jit))\n\n[1] FALSE\n\n\n\n\nCreating owin object\n\nsg_owin <- as(sg_sp, \"owin\")\n\n\nplot(sg_owin)\n\n\n\n\n\nsummary(sg_owin)\n\nWindow: polygonal boundary\n60 separate polygons (no holes)\n            vertices        area relative.area\npolygon 1         38 1.56140e+04      2.09e-05\npolygon 2        735 4.69093e+06      6.27e-03\npolygon 3         49 1.66986e+04      2.23e-05\npolygon 4         76 3.12332e+05      4.17e-04\npolygon 5       5141 6.36179e+08      8.50e-01\npolygon 6         42 5.58317e+04      7.46e-05\npolygon 7         67 1.31354e+06      1.75e-03\npolygon 8         15 4.46420e+03      5.96e-06\npolygon 9         14 5.46674e+03      7.30e-06\npolygon 10        37 5.26194e+03      7.03e-06\npolygon 11        53 3.44003e+04      4.59e-05\npolygon 12        74 5.82234e+04      7.78e-05\npolygon 13        69 5.63134e+04      7.52e-05\npolygon 14       143 1.45139e+05      1.94e-04\npolygon 15       165 3.38736e+05      4.52e-04\npolygon 16       130 9.40465e+04      1.26e-04\npolygon 17        19 1.80977e+03      2.42e-06\npolygon 18        16 2.01046e+03      2.69e-06\npolygon 19        93 4.30642e+05      5.75e-04\npolygon 20        90 4.15092e+05      5.54e-04\npolygon 21       721 1.92795e+06      2.57e-03\npolygon 22       330 1.11896e+06      1.49e-03\npolygon 23       115 9.28394e+05      1.24e-03\npolygon 24        37 1.01705e+04      1.36e-05\npolygon 25        25 1.66227e+04      2.22e-05\npolygon 26        10 2.14507e+03      2.86e-06\npolygon 27       190 2.02489e+05      2.70e-04\npolygon 28       175 9.25904e+05      1.24e-03\npolygon 29      1993 9.99217e+06      1.33e-02\npolygon 30        38 2.42492e+04      3.24e-05\npolygon 31        24 6.35239e+03      8.48e-06\npolygon 32        53 6.35791e+05      8.49e-04\npolygon 33        41 1.60161e+04      2.14e-05\npolygon 34        22 2.54368e+03      3.40e-06\npolygon 35        30 1.08382e+04      1.45e-05\npolygon 36       327 2.16921e+06      2.90e-03\npolygon 37       111 6.62927e+05      8.85e-04\npolygon 38        90 1.15991e+05      1.55e-04\npolygon 39        98 6.26829e+04      8.37e-05\npolygon 40       415 3.25384e+06      4.35e-03\npolygon 41       222 1.51142e+06      2.02e-03\npolygon 42       107 6.33039e+05      8.45e-04\npolygon 43         7 2.48299e+03      3.32e-06\npolygon 44        17 3.28303e+04      4.38e-05\npolygon 45        26 8.34758e+03      1.11e-05\npolygon 46       177 4.67446e+05      6.24e-04\npolygon 47        16 3.19460e+03      4.27e-06\npolygon 48        15 4.87296e+03      6.51e-06\npolygon 49        66 1.61841e+04      2.16e-05\npolygon 50       149 5.63430e+06      7.53e-03\npolygon 51       609 2.62570e+07      3.51e-02\npolygon 52         8 7.82256e+03      1.04e-05\npolygon 53       976 2.33447e+07      3.12e-02\npolygon 54        55 8.25379e+04      1.10e-04\npolygon 55       976 2.33447e+07      3.12e-02\npolygon 56        61 3.33449e+05      4.45e-04\npolygon 57         6 1.68410e+04      2.25e-05\npolygon 58         4 9.45963e+03      1.26e-05\npolygon 59        46 6.99702e+05      9.35e-04\npolygon 60        13 7.00873e+04      9.36e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 748741000 square units\nFraction of frame area: 0.414\n\n\n\n\nCombining point events object and owin object\n\nchildcareSG_ppp = childcare_ppp[sg_owin]\n\n\nsummary(childcareSG_ppp)\n\nPlanar point pattern:  1545 points\nAverage intensity 2.063463e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 3 decimal places\ni.e. rounded to the nearest multiple of 0.001 units\n\nWindow: polygonal boundary\n60 separate polygons (no holes)\n            vertices        area relative.area\npolygon 1         38 1.56140e+04      2.09e-05\npolygon 2        735 4.69093e+06      6.27e-03\npolygon 3         49 1.66986e+04      2.23e-05\npolygon 4         76 3.12332e+05      4.17e-04\npolygon 5       5141 6.36179e+08      8.50e-01\npolygon 6         42 5.58317e+04      7.46e-05\npolygon 7         67 1.31354e+06      1.75e-03\npolygon 8         15 4.46420e+03      5.96e-06\npolygon 9         14 5.46674e+03      7.30e-06\npolygon 10        37 5.26194e+03      7.03e-06\npolygon 11        53 3.44003e+04      4.59e-05\npolygon 12        74 5.82234e+04      7.78e-05\npolygon 13        69 5.63134e+04      7.52e-05\npolygon 14       143 1.45139e+05      1.94e-04\npolygon 15       165 3.38736e+05      4.52e-04\npolygon 16       130 9.40465e+04      1.26e-04\npolygon 17        19 1.80977e+03      2.42e-06\npolygon 18        16 2.01046e+03      2.69e-06\npolygon 19        93 4.30642e+05      5.75e-04\npolygon 20        90 4.15092e+05      5.54e-04\npolygon 21       721 1.92795e+06      2.57e-03\npolygon 22       330 1.11896e+06      1.49e-03\npolygon 23       115 9.28394e+05      1.24e-03\npolygon 24        37 1.01705e+04      1.36e-05\npolygon 25        25 1.66227e+04      2.22e-05\npolygon 26        10 2.14507e+03      2.86e-06\npolygon 27       190 2.02489e+05      2.70e-04\npolygon 28       175 9.25904e+05      1.24e-03\npolygon 29      1993 9.99217e+06      1.33e-02\npolygon 30        38 2.42492e+04      3.24e-05\npolygon 31        24 6.35239e+03      8.48e-06\npolygon 32        53 6.35791e+05      8.49e-04\npolygon 33        41 1.60161e+04      2.14e-05\npolygon 34        22 2.54368e+03      3.40e-06\npolygon 35        30 1.08382e+04      1.45e-05\npolygon 36       327 2.16921e+06      2.90e-03\npolygon 37       111 6.62927e+05      8.85e-04\npolygon 38        90 1.15991e+05      1.55e-04\npolygon 39        98 6.26829e+04      8.37e-05\npolygon 40       415 3.25384e+06      4.35e-03\npolygon 41       222 1.51142e+06      2.02e-03\npolygon 42       107 6.33039e+05      8.45e-04\npolygon 43         7 2.48299e+03      3.32e-06\npolygon 44        17 3.28303e+04      4.38e-05\npolygon 45        26 8.34758e+03      1.11e-05\npolygon 46       177 4.67446e+05      6.24e-04\npolygon 47        16 3.19460e+03      4.27e-06\npolygon 48        15 4.87296e+03      6.51e-06\npolygon 49        66 1.61841e+04      2.16e-05\npolygon 50       149 5.63430e+06      7.53e-03\npolygon 51       609 2.62570e+07      3.51e-02\npolygon 52         8 7.82256e+03      1.04e-05\npolygon 53       976 2.33447e+07      3.12e-02\npolygon 54        55 8.25379e+04      1.10e-04\npolygon 55       976 2.33447e+07      3.12e-02\npolygon 56        61 3.33449e+05      4.45e-04\npolygon 57         6 1.68410e+04      2.25e-05\npolygon 58         4 9.45963e+03      1.26e-05\npolygon 59        46 6.99702e+05      9.35e-04\npolygon 60        13 7.00873e+04      9.36e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 748741000 square units\nFraction of frame area: 0.414\n\n\n\nplot(sg_owin, col='light blue')\npoints(childcareSG_ppp, col='black', cex=.5)\n\n\n\n\nanother simple method.\n\nplot(childcareSG_ppp)"
  },
  {
    "objectID": "handson_ex/handson_ex04b/handson_ex04b.html#extract-study-area-by-target-planning-area",
    "href": "handson_ex/handson_ex04b/handson_ex04b.html#extract-study-area-by-target-planning-area",
    "title": "Hands-On Ex04b - 2nd Order SPA Methods",
    "section": "* Extract study area (by target planning area)",
    "text": "* Extract study area (by target planning area)\n\npg = mpsz[mpsz@data$PLN_AREA_N == \"PUNGGOL\",]\ntm = mpsz[mpsz@data$PLN_AREA_N == \"TAMPINES\",]\nck = mpsz[mpsz@data$PLN_AREA_N == \"CHOA CHU KANG\",]\njw = mpsz[mpsz@data$PLN_AREA_N == \"JURONG WEST\",]\n\n\npar(mfrow=c(2,2))\nplot(pg, main = \"Ponggol\")\nplot(tm, main = \"Tampines\")\nplot(ck, main = \"Choa Chu Kang\")\nplot(jw, main = \"Jurong West\")\n\n\n\n\n\nConvert the spatial point data frame into generic sp format\n\npg_sp = as(pg, \"SpatialPolygons\")\ntm_sp = as(tm, \"SpatialPolygons\")\nck_sp = as(ck, \"SpatialPolygons\")\njw_sp = as(jw, \"SpatialPolygons\")\n\n\n\nCreate owin object\n\npg_owin = as(pg_sp, \"owin\")\ntm_owin = as(tm_sp, \"owin\")\nck_owin = as(ck_sp, \"owin\")\njw_owin = as(jw_sp, \"owin\")\n\n\n\nCombining childcare points and the study area\n\nchildcare_pg_ppp = childcare_ppp_jit[pg_owin]\nchildcare_tm_ppp = childcare_ppp_jit[tm_owin]\nchildcare_ck_ppp = childcare_ppp_jit[ck_owin]\nchildcare_jw_ppp = childcare_ppp_jit[jw_owin]\n\ntransform the unit of measurements from m to km.\n\nchildcare_pg_ppp.km = rescale(childcare_pg_ppp, 1000, \"km\")\nchildcare_tm_ppp.km = rescale(childcare_tm_ppp, 1000, \"km\")\nchildcare_ck_ppp.km = rescale(childcare_ck_ppp, 1000, \"km\")\nchildcare_jw_ppp.km = rescale(childcare_jw_ppp, 1000, \"km\")\n\nplots them\n\npar(mfrow=c(2,2))\nplot(childcare_pg_ppp.km, main=\"Punggol\")\nplot(childcare_tm_ppp.km, main=\"Tampines\")\nplot(childcare_ck_ppp.km, main=\"Choa Chu Kang\")\nplot(childcare_jw_ppp.km, main=\"Jurong West\")"
  },
  {
    "objectID": "handson_ex/handson_ex04b/handson_ex04b.html#second-order-spatial-point-pattern-analysis",
    "href": "handson_ex/handson_ex04b/handson_ex04b.html#second-order-spatial-point-pattern-analysis",
    "title": "Hands-On Ex04b - 2nd Order SPA Methods",
    "section": "* Second-order Spatial Point Pattern Analysis",
    "text": "* Second-order Spatial Point Pattern Analysis\n\nAnalysing spatial point process using G-function Gest() function\n\nEstimates the nearest neighbour distance distribution function G(r) from a point pattern in a window of arbitrary shape.\nThe estimate of G is a useful statistic summarizing one aspect of the “clustering” points.\n\n\n\nChua Chu Kang Planning Area\n\nG_CK = Gest(childcare_ck_ppp, correction = \"border\")\nplot(G_CK, xlim=c(0,500))\n\n\n\n\n\n\nPerforming complete spatial Randomness Test\n\nHo = The distribution of childcare services at Choa Chu Kang are randomly distributed.\nH1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001. (99.9%)\n\nMonte Carlo test with G-function\n\nG_CK.csr <- envelope(childcare_ck_ppp, Gest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60........\n.70.........80.........90.........100.........110.........120.........130......\n...140.........150.........160.........170.........180.........190.........200....\n.....210.........220.........230.........240.........250.........260.........270..\n.......280.........290.........300.........310.........320.........330.........340\n.........350.........360.........370.........380.........390.........400........\n.410.........420.........430.........440.........450.........460.........470......\n...480.........490.........500.........510.........520.........530.........540....\n.....550.........560.........570.........580.........590.........600.........610..\n.......620.........630.........640.........650.........660.........670.........680\n.........690.........700.........710.........720.........730.........740........\n.750.........760.........770.........780.........790.........800.........810......\n...820.........830.........840.........850.........860.........870.........880....\n.....890.........900.........910.........920.........930.........940.........950..\n.......960.........970.........980.........990........ 999.\n\nDone.\n\n\n\nplot(G_CK.csr)\n\n\n\n\n\n\nTampines Planning Area\n\nG_tm = Gest(childcare_tm_ppp, correction = \"best\")\nplot(G_tm)\n\n\n\n\n\nHo = The distribution of childcare services at Tampines are randomly distributed.\nH1= The distribution of childcare services at Tampines are not randomly distributed.\nThe null hypothesis will be rejected is p-value is smaller than alpha value of 0.001.\n\n\nG_tm.csr <- envelope(childcare_tm_ppp, Gest, correction = \"all\", nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60........\n.70.........80.........90.........100.........110.........120.........130......\n...140.........150.........160.........170.........180.........190.........200....\n.....210.........220.........230.........240.........250.........260.........270..\n.......280.........290.........300.........310.........320.........330.........340\n.........350.........360.........370.........380.........390.........400........\n.410.........420.........430.........440.........450.........460.........470......\n...480.........490.........500.........510.........520.........530.........540....\n.....550.........560.........570.........580.........590.........600.........610..\n.......620.........630.........640.........650.........660.........670.........680\n.........690.........700.........710.........720.........730.........740........\n.750.........760.........770.........780.........790.........800.........810......\n...820.........830.........840.........850.........860.........870.........880....\n.....890.........900.........910.........920.........930.........940.........950..\n.......960.........970.........980.........990........ 999.\n\nDone.\n\n\n\nplot(G_tm.csr)"
  },
  {
    "objectID": "handson_ex/handson_ex04b/handson_ex04b.html#analysing-spatial-point-process-using-f-function",
    "href": "handson_ex/handson_ex04b/handson_ex04b.html#analysing-spatial-point-process-using-f-function",
    "title": "Hands-On Ex04b - 2nd Order SPA Methods",
    "section": "Analysing Spatial Point Process Using F-Function",
    "text": "Analysing Spatial Point Process Using F-Function\nEstimates the empty space function F(r) or its hazard rate h(r) from a point pattern in a window of arbitrary shape.\n\nChua Chu Kang Planning Area\n\nF_CK = Fest(childcare_ck_ppp)\nplot(F_CK)\n\n\n\n\n\n\nPerforming Complete Spatial Randomness Test\n\nF_CK.csr <- envelope(childcare_ck_ppp, Fest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60........\n.70.........80.........90.........100.........110.........120.........130......\n...140.........150.........160.........170.........180.........190.........200....\n.....210.........220.........230.........240.........250.........260.........270..\n.......280.........290.........300.........310.........320.........330.........340\n.........350.........360.........370.........380.........390.........400........\n.410.........420.........430.........440.........450.........460.........470......\n...480.........490.........500.........510.........520.........530.........540....\n.....550.........560.........570.........580.........590.........600.........610..\n.......620.........630.........640.........650.........660.........670.........680\n.........690.........700.........710.........720.........730.........740........\n.750.........760.........770.........780.........790.........800.........810......\n...820.........830.........840.........850.........860.........870.........880....\n.....890.........900.........910.........920.........930.........940.........950..\n.......960.........970.........980.........990........ 999.\n\nDone.\n\n\n\nplot(F_CK.csr)\n\n\n\n\n\n\nTampines Planning Area\n\nF_tm = Fest(childcare_tm_ppp, correction = \"best\")\nplot(F_tm)\n\n\n\n\n\nF_tm.csr <- envelope(childcare_tm_ppp, Fest, correction = \"all\", nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60........\n.70.........80.........90.........100.........110.........120.........130......\n...140.........150.........160.........170.........180.........190.........200....\n.....210.........220.........230.........240.........250.........260.........270..\n.......280.........290.........300.........310.........320.........330.........340\n.........350.........360.........370.........380.........390.........400........\n.410.........420.........430.........440.........450.........460.........470......\n...480.........490.........500.........510.........520.........530.........540....\n.....550.........560.........570.........580.........590.........600.........610..\n.......620.........630.........640.........650.........660.........670.........680\n.........690.........700.........710.........720.........730.........740........\n.750.........760.........770.........780.........790.........800.........810......\n...820.........830.........840.........850.........860.........870.........880....\n.....890.........900.........910.........920.........930.........940.........950..\n.......960.........970.........980.........990........ 999.\n\nDone.\n\n\n\nplot(F_tm.csr)"
  },
  {
    "objectID": "handson_ex/handson_ex04b/handson_ex04b.html#section",
    "href": "handson_ex/handson_ex04b/handson_ex04b.html#section",
    "title": "Hands-On Ex04b - 2nd Order SPA Methods",
    "section": "",
    "text": "Analysing Spatial Point Process Using K-Function\nK-function measures the number of events found up to a given distance of any particular event.\n\nChua Chu Kang Planning Area\n\nK_ck = Kest(childcare_ck_ppp, correction = \"Ripley\")\nplot(K_ck, . -r ~ r, ylab= \"K(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\nK_ck.csr <- envelope(childcare_ck_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,  99.\n\nDone.\n\n\n\nplot(K_ck.csr, . - r ~ r, xlab=\"d\", ylab=\"K(d)-r\")\n\n\n\n\n\n\nTampines Planning Area\n\nK_tm = Kest(childcare_tm_ppp, correction = \"Ripley\")\nplot(K_tm, . -r ~ r, \n     ylab= \"K(d)-r\", xlab = \"d(m)\", \n     xlim=c(0,1000))\n\n\n\n\n\nK_tm.csr <- envelope(childcare_tm_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,  99.\n\nDone.\n\n\n\nplot(K_tm.csr, . - r ~ r, \n     xlab=\"d\", ylab=\"K(d)-r\", xlim=c(0,500))"
  },
  {
    "objectID": "handson_ex/handson_ex04b/handson_ex04b.html#analysing-spatial-point-process-using-l-function",
    "href": "handson_ex/handson_ex04b/handson_ex04b.html#analysing-spatial-point-process-using-l-function",
    "title": "Hands-On Ex04b - 2nd Order SPA Methods",
    "section": "Analysing Spatial Point Process Using L-Function",
    "text": "Analysing Spatial Point Process Using L-Function\n\n\nChua Chu Kang Planning Area\n\nL_ck = Lest(childcare_ck_ppp, correction = \"Ripley\")\nplot(L_ck, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\nL_ck.csr <- envelope(childcare_ck_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,  99.\n\nDone.\n\n\n\nplot(L_ck.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\")\n\n\n\n\n\n\nTampines Planning Area\n\nL_tm = Lest(childcare_tm_ppp, correction = \"Ripley\")\nplot(L_tm, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\", \n     xlim=c(0,1000))\n\n\n\n\n\nL_tm.csr <- envelope(childcare_tm_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,  99.\n\nDone.\n\n\n\nplot(L_tm.csr, . - r ~ r, \n     xlab=\"d\", ylab=\"L(d)-r\", xlim=c(0,500))"
  },
  {
    "objectID": "inclass_ex/inclass_ex02/In-class_Ex02.html",
    "href": "inclass_ex/inclass_ex02/In-class_Ex02.html",
    "title": "In-Class Ex02",
    "section": "",
    "text": "Download 3 R packages:\n\npacman::p_load(sf, tidyverse, funModeling)\n\n\nNotes to take note of:\n\nst_ refers to spatial and temporal\nsf, the table with feature attributes and feature geometries, which contains\nsfc , the list-column with the geometries for each feature (record), which is composed of\nsfg, the feature geometry of an individual simple feature."
  },
  {
    "objectID": "inclass_ex/inclass_ex02/In-class_Ex02.html#importing-geospatial",
    "href": "inclass_ex/inclass_ex02/In-class_Ex02.html#importing-geospatial",
    "title": "In-Class Ex02",
    "section": "Importing Geospatial",
    "text": "Importing Geospatial\n\nThe geoBoundaries dataset\n\ngeoNGA <- st_read(\"data/geospatial/\",\n                  layer = \"geoBoundaries-NGA-ADM2\" ) %>%\n  st_transform(crs=26392)\n\nReading layer `geoBoundaries-NGA-ADM2' from data source \n  `C:\\yifei-alpaca\\IS415-GAA\\inclass_ex\\inclass_ex02\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n\n\n\n\n\nThe NGA dataset\n\nNGAadm <- st_read(\"data/geospatial/\",\n                  layer = \"nga_admbnda_adm2_osgof_20190417\" ) %>%\n  st_transform(crs=26392)\n\nReading layer `nga_admbnda_adm2_osgof_20190417' from data source \n  `C:\\yifei-alpaca\\IS415-GAA\\inclass_ex\\inclass_ex02\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n\n\n\n\nImporting Aspatial data\n\nwp_nga <- read_csv(\"data/aspatial/WPdx.csv\") %>%\n  filter(`#clean_country_name` == \"Nigeria\")\n\n\n\nWrite the extracted data into rds format\n\n#saveRDS(wp_nga, file = \"data/rsd/wp_nga.RDS\")"
  },
  {
    "objectID": "inclass_ex/inclass_ex02/In-class_Ex02.html#converting-aspatial-data-into-geospatial",
    "href": "inclass_ex/inclass_ex02/In-class_Ex02.html#converting-aspatial-data-into-geospatial",
    "title": "In-Class Ex02",
    "section": "Converting Aspatial Data into Geospatial",
    "text": "Converting Aspatial Data into Geospatial\n\nst_as_sfc, convert foreign geomerty object to a sfc object.\nst_as_sf, convert foreign object to an sf object. if dataset contains a column call “geometry”, coords will results in overwriting of this column by sfc geometry list column.\n\n\nwp_nga$Geometry = st_as_sfc(wp_nga$`New Georeferenced Column`)\nwp_nga\n\n# A tibble: 95,008 × 71\n   row_id `#source`      #lat_…¹ #lon_…² #repo…³ #stat…⁴ #wate…⁵ #wate…⁶ #wate…⁷\n    <dbl> <chr>            <dbl>   <dbl> <chr>   <chr>   <chr>   <chr>   <chr>  \n 1 429068 GRID3             7.98    5.12 08/29/… Unknown <NA>    <NA>    Tapsta…\n 2 222071 Federal Minis…    6.96    3.60 08/16/… Yes     Boreho… Well    Mechan…\n 3 160612 WaterAid          6.49    7.93 12/04/… Yes     Boreho… Well    Hand P…\n 4 160669 WaterAid          6.73    7.65 12/04/… Yes     Boreho… Well    <NA>   \n 5 160642 WaterAid          6.78    7.66 12/04/… Yes     Boreho… Well    Hand P…\n 6 160628 WaterAid          6.96    7.78 12/04/… Yes     Boreho… Well    Hand P…\n 7 160632 WaterAid          7.02    7.84 12/04/… Yes     Boreho… Well    Hand P…\n 8 642747 Living Water …    7.33    8.98 10/03/… Yes     Boreho… Well    Mechan…\n 9 642456 Living Water …    7.17    9.11 10/03/… Yes     Boreho… Well    Hand P…\n10 641347 Living Water …    7.20    9.22 03/28/… Yes     Boreho… Well    Hand P…\n# … with 94,998 more rows, 62 more variables: `#water_tech_category` <chr>,\n#   `#facility_type` <chr>, `#clean_country_name` <chr>, `#clean_adm1` <chr>,\n#   `#clean_adm2` <chr>, `#clean_adm3` <chr>, `#clean_adm4` <chr>,\n#   `#install_year` <dbl>, `#installer` <chr>, `#rehab_year` <lgl>,\n#   `#rehabilitator` <lgl>, `#management_clean` <chr>, `#status_clean` <chr>,\n#   `#pay` <chr>, `#fecal_coliform_presence` <chr>,\n#   `#fecal_coliform_value` <dbl>, `#subjective_quality` <chr>, …\n\n\n\nst_sf, is to create sf object, which extends df-like objects with a simple feature list column.\n\n\nwp_sf <- st_sf(wp_nga, crs=4326)\nwp_sf\n\nSimple feature collection with 95008 features and 70 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 2.707441 ymin: 4.301812 xmax: 14.21828 ymax: 13.86568\nGeodetic CRS:  WGS 84\n# A tibble: 95,008 × 71\n   row_id `#source`      #lat_…¹ #lon_…² #repo…³ #stat…⁴ #wate…⁵ #wate…⁶ #wate…⁷\n *  <dbl> <chr>            <dbl>   <dbl> <chr>   <chr>   <chr>   <chr>   <chr>  \n 1 429068 GRID3             7.98    5.12 08/29/… Unknown <NA>    <NA>    Tapsta…\n 2 222071 Federal Minis…    6.96    3.60 08/16/… Yes     Boreho… Well    Mechan…\n 3 160612 WaterAid          6.49    7.93 12/04/… Yes     Boreho… Well    Hand P…\n 4 160669 WaterAid          6.73    7.65 12/04/… Yes     Boreho… Well    <NA>   \n 5 160642 WaterAid          6.78    7.66 12/04/… Yes     Boreho… Well    Hand P…\n 6 160628 WaterAid          6.96    7.78 12/04/… Yes     Boreho… Well    Hand P…\n 7 160632 WaterAid          7.02    7.84 12/04/… Yes     Boreho… Well    Hand P…\n 8 642747 Living Water …    7.33    8.98 10/03/… Yes     Boreho… Well    Mechan…\n 9 642456 Living Water …    7.17    9.11 10/03/… Yes     Boreho… Well    Hand P…\n10 641347 Living Water …    7.20    9.22 03/28/… Yes     Boreho… Well    Hand P…\n# … with 94,998 more rows, 62 more variables: `#water_tech_category` <chr>,\n#   `#facility_type` <chr>, `#clean_country_name` <chr>, `#clean_adm1` <chr>,\n#   `#clean_adm2` <chr>, `#clean_adm3` <chr>, `#clean_adm4` <chr>,\n#   `#install_year` <dbl>, `#installer` <chr>, `#rehab_year` <lgl>,\n#   `#rehabilitator` <lgl>, `#management_clean` <chr>, `#status_clean` <chr>,\n#   `#pay` <chr>, `#fecal_coliform_presence` <chr>,\n#   `#fecal_coliform_value` <dbl>, `#subjective_quality` <chr>, …\n\n\n\nProject transformation\ncheck projection\n\nst_crs(wp_sf)\n\nCoordinate Reference System:\n  User input: EPSG:4326 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n        MEMBER[\"World Geodetic System 1984 (Transit)\"],\n        MEMBER[\"World Geodetic System 1984 (G730)\"],\n        MEMBER[\"World Geodetic System 1984 (G873)\"],\n        MEMBER[\"World Geodetic System 1984 (G1150)\"],\n        MEMBER[\"World Geodetic System 1984 (G1674)\"],\n        MEMBER[\"World Geodetic System 1984 (G1762)\"],\n        MEMBER[\"World Geodetic System 1984 (G2139)\"],\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]],\n        ENSEMBLEACCURACY[2.0]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    USAGE[\n        SCOPE[\"Horizontal component of 3D system.\"],\n        AREA[\"World.\"],\n        BBOX[-90,-180,90,180]],\n    ID[\"EPSG\",4326]]\n\n\n\nwp_sf <- wp_sf %>%\n  st_transform(crs = 26392)\n\n\nst_crs(wp_sf)\n\nCoordinate Reference System:\n  User input: EPSG:26392 \n  wkt:\nPROJCRS[\"Minna / Nigeria Mid Belt\",\n    BASEGEOGCRS[\"Minna\",\n        DATUM[\"Minna\",\n            ELLIPSOID[\"Clarke 1880 (RGS)\",6378249.145,293.465,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4263]],\n    CONVERSION[\"Nigeria Mid Belt\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",4,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",8.5,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.99975,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",670553.98,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"Nigeria between 6°30'E and 10°30'E, onshore and offshore shelf.\"],\n        BBOX[3.57,6.5,13.53,10.51]],\n    ID[\"EPSG\",26392]]\n\n\n\n\nExcluded redundant fields\n\nNGA <- NGAadm %>%\n  select(c(3:4, 8:9))\n\n\n\nCheck for duplicate names\n\nNGA$ADM2_EN[duplicated(NGA$ADM2_EN)==TRUE]\n\n[1] \"Bassa\"    \"Ifelodun\" \"Irepodun\" \"Nasarawa\" \"Obi\"      \"Surulere\"\n\n\n\nNGA$ADM2_EN[94] <- \"Bassa, Kogi\"\nNGA$ADM2_EN[95] <- \"Bassa, Plateau\"\nNGA$ADM2_EN[304] <- \"Ifelodun, Kwara\"\nNGA$ADM2_EN[305] <- \"Ifelodun, Osun\"\nNGA$ADM2_EN[355] <- \"Irepodun, Kwara\"\nNGA$ADM2_EN[356] <- \"Irepodun, Osun\"\nNGA$ADM2_EN[519] <- \"Nasarawa, Kano\"\nNGA$ADM2_EN[520] <- \"Nasarawa, Nasarawa\"\nNGA$ADM2_EN[546] <- \"Obi, Benue\"\nNGA$ADM2_EN[547] <- \"Obi, Nasarawa\"\nNGA$ADM2_EN[693] <- \"Surulere, Lagos\"\nNGA$ADM2_EN[694] <- \"Surulere, Oyo\"\n\n\nfreq(data=wp_sf,\n     input = \"#status_clean\")\n\n\n\n\n                     #status_clean frequency percentage cumulative_perc\n1                       Functional     45883      48.29           48.29\n2                   Non-Functional     29385      30.93           79.22\n3                             <NA>     10656      11.22           90.44\n4      Functional but needs repair      4579       4.82           95.26\n5 Non-Functional due to dry season      2403       2.53           97.79\n6        Functional but not in use      1686       1.77           99.56\n7         Abandoned/Decommissioned       234       0.25           99.81\n8                        Abandoned       175       0.18           99.99\n9 Non functional due to dry season         7       0.01          100.00\n\n\n\nwp_sf_nga <- wp_sf %>%\n  rename (status_clean = '#status_clean') %>%\n  select (status_clean) %>%\n  mutate(status_clean = replace_na(\n    status_clean, \"unknown\"))\n\n\n\nExtracting Water Point Data\n\nwp_functional <- wp_sf_nga %>% \n  filter(status_clean %in%\n    c(\"Functional\",\n    \"Functional but not in use\",\n    \"Functional but needs repair\"))\n\n\nwp_nonfunctional <- wp_sf_nga %>% \n  filter(status_clean %in%\n    c(\"Abandoned/Decommissioned\",\n      \"Abandoned\",\n      \"Non-Functional due to dry season\",\n      \"Non-Functional\",\n      \"Non functional due to dry season\"))\n\nextract water point with unknown status.\n\nwp_unknown <- wp_sf_nga %>% \n  filter(status_clean==\"unknown\")\n\n\nNGA_wp <- NGA %>%\n  mutate(`total_wp` = lengths(\n    st_intersects (NGA, wp_sf_nga))) %>%\n  mutate (`wp_functional` = lengths(\n    st_intersects(NGA, wp_functional))) %>%\n  mutate (`wp_nonfunctional` = lengths(\n    st_intersects(NGA, wp_nonfunctional))) %>%\n  mutate(`wp_unknown` = lengths(\n    st_intersects(NGA, wp_unknown)))\n\n\n\nSaving the analytical data in rds format\n\n#saveRDS(NGA_wp,\"data/rsd/NGA_wp.rds\")\n\n\n\nVisualising attributes by using statistical graphs\n\nggplot(data = NGA_wp,\n       aes(x = total_wp)) + \n  geom_histogram(bins=20,\n                 color=\"black\",\n                 fill=\"light blue\") +\n  geom_vline(aes(xintercept=mean(\n    total_wp, na.rm=T)),\n    color=\"red\",\n    linetype=\"dashed\", size=0.8) +\n  ggtitle(\"Distribution of total water points by LGA\") +\n  xlab(\"No. of water points\") + \n  ylab(\"No. of\\nLGAs\") +\n  theme(axis.title.y=element_text(angle = 0))"
  },
  {
    "objectID": "inclass_ex/inclass_ex03/inclass_ex03.html",
    "href": "inclass_ex/inclass_ex03/inclass_ex03.html",
    "title": "In-Class Ex03",
    "section": "",
    "text": "pacman::p_load(sf, tmap, tidyverse)\n\n\n\n\nNGA_wp <- read_rds(\"data/rds/NGA_wp.rds\")\n\n\n\n\n\np1 <- tm_shape(NGA_wp) + \n  tm_fill(\"wp_functional\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Blues\") +\n  tm_borders(lwd = 0.1,\n              alpha = 1) +\n  tm_layout(main.title = \"Distribution of functional water point by LGAs\",\n            legend.outside = FALSE)\n\n\np2 <- tm_shape (NGA_wp) + \n  tm_fill(\"wp_functional\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Blues\") +\n  tm_borders(lwd = 0.1,\n              alpha = 1) +\n  tm_layout(main.title = \"Distribution of total water point by LGAs\",\n            legend.outside = FALSE)\n\n\ntmap_arrange(p1, nrow=1)\n\n\n\n\n\nNGA_wp <- NGA_wp %>% \n  mutate(pct_functional = wp_functional/total_wp) %>%\n  mutate(pct_functional= wp_nonfunctional/total_wp)\n\n\ntm_shape (NGA_wp) + \n  tm_fill(\"pct_functional\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Reds\") +\n  tm_borders(lwd = 0.1,\n              alpha = 1) +\n  tm_layout(main.title = \"Rate map of functional water points\",\n            legend.outside = TRUE)"
  },
  {
    "objectID": "inclass_ex/inclass_ex03/inclass_ex03.html#extreme-value-map",
    "href": "inclass_ex/inclass_ex03/inclass_ex03.html#extreme-value-map",
    "title": "In-Class Ex03",
    "section": "Extreme Value Map",
    "text": "Extreme Value Map\n\nPercentile map\n0-1%, 1-10%, 10-50%, 50-90%, 90-99%, 99-100%\ncumulative probabilities - c(0,01,1,5,9,99,1)\n\n\nData preparation\nStep 1 - exclude records with NA by using the code chunk below.\n\nNGA_wp <- NGA_wp %>%\n  drop_na()\n\nStep 2 - creating customized classification and extracting values\n\npercent <- c(0,.01,.1,.5,.9,.99,1)\nvar <- NGA_wp['pct_functional'] %>%\n  st_set_geometry(NULL)\nquantile(var[,1],percent)\n\n        0%         1%        10%        50%        90%        99%       100% \n0.00000000 0.00000000 0.08333333 0.35593220 0.64444444 0.84517647 1.00000000 \n\n\n\nget.var <- function (vname, df) { \n  v <- df[vname] %>%\n    st_set_geometry(NULL)\n  v <- unname (v[,1])\n  return(v)\n}\n\n\npercentmap <- function(vnam, df, legtitle=NA, mtitle=\"Percentile Map\") {\n  percent < - c(0,.01,.1,.5,.9,.99,1) \n  var <- get.var (vnam, df) \n  bperc <- quantile(var, percent) \n    tm_polygons() + \n    tm_shape(df) + \n        tm_fill(vnam,\n              title=legtitle, \n              breaks=bperc, \n              palette=\"Blues\",\n          labels= c(\"‹ 1%\", \"1% - 10%\", \"10% - 50%\",\"50% - 90%\", \"90%-99%\", \"> 99%\"))\n    tm_borders +\n    tm_layout(main.title = mtitle,\n              title.position = c(\"right\", \"bottom\"))\n}\n\n\n#percentmap(\"wp_functional\", NGA_wp)\n\n\n\nBox Map\n\nggplot(data = NGA_wp,\n       aes(x = \"\",\n           y = wp_nonfunctional)) +\n  geom_boxplot()\n\n\n\n\nTBC…"
  },
  {
    "objectID": "inclass_ex/inclass_ex04/inclass_ex04.html",
    "href": "inclass_ex/inclass_ex04/inclass_ex04.html",
    "title": "In-Class Ex04",
    "section": "",
    "text": "spatstat is mainly for spatial point analytics\n\n\npacman::p_load(maptools, sf, raster, spatstat, tmap)\n\n\n\n\ndata are in meters and are in object format\nst_read() extension of r read(), this df will create new columns called “geometry”. it stores all the geometry features inside which is a geospatial data.\ntidyverse join to sf will retain spatial data.\n\nChildcare is a single file\n\nchildcare_sf <- st_read(\"data/child-care-services-geojson.geojson\") %>%\n  st_transform(crs = 3414)\n\nReading layer `child-care-services-geojson' from data source \n  `C:\\yifei-alpaca\\IS415-GAA\\inclass_ex\\inclass_ex04\\data\\child-care-services-geojson.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1545 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nRead in list of data files in the folder\n\nsg_sf <- st_read(dsn = \"data\", layer=\"CostalOutline\")\n\nReading layer `CostalOutline' from data source \n  `C:\\yifei-alpaca\\IS415-GAA\\inclass_ex\\inclass_ex04\\data' using driver `ESRI Shapefile'\nSimple feature collection with 60 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2663.926 ymin: 16357.98 xmax: 56047.79 ymax: 50244.03\nProjected CRS: SVY21\n\n\n\nmpsz_sf <- st_read(dsn = \"data\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\yifei-alpaca\\IS415-GAA\\inclass_ex\\inclass_ex04\\data' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\ntmap_mode('view')\ntm_shape(childcare_sf)+\n  tm_dots(alph=0.5,\n          size= 0.01) + \n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\n\n\ntmap_mode(‘view’) will always connect to the server. it is best not to include more than 5.\ntm_bubbles create proportional symbol maps.\ntm_view(set.zoom.limits = c(11,14)):\n\n(a,b) a is the zoom out value, b is the zoom in"
  },
  {
    "objectID": "inclass_ex/inclass_ex05/data/stores.html",
    "href": "inclass_ex/inclass_ex05/data/stores.html",
    "title": "IS415 Journey",
    "section": "",
    "text": "<!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’>     \n\n\n        0 0     false"
  },
  {
    "objectID": "inclass_ex/inclass_ex05/data/study_area.html",
    "href": "inclass_ex/inclass_ex05/data/study_area.html",
    "title": "IS415 Journey",
    "section": "",
    "text": "<!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’>     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "inclass_ex/inclass_ex05/inclass_ex05.html",
    "href": "inclass_ex/inclass_ex05/inclass_ex05.html",
    "title": "In-Class Ex05",
    "section": "",
    "text": "sfdep - working with simple features. point pattern analysis\nonly focus on local clq\n\n\npacman::p_load(tidyverse, sf, tmap, sfdep)\n\n\n\n\nstudyArea <- st_read(dsn = \"data\",\n                     layer = \"study_area\") %>% \n  st_transform(crs= 3829)\n\nReading layer `study_area' from data source \n  `C:\\yifei-alpaca\\IS415-GAA\\inclass_ex\\inclass_ex05\\data' using driver `ESRI Shapefile'\nSimple feature collection with 7 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 121.4836 ymin: 25.00776 xmax: 121.592 ymax: 25.09288\nGeodetic CRS:  TWD97\n\n\n\nstore <- st_read(dsn = \"data\",\n                     layer = \"stores\") %>% \n  st_transform(crs= 3829)\n\nReading layer `stores' from data source \n  `C:\\yifei-alpaca\\IS415-GAA\\inclass_ex\\inclass_ex05\\data' using driver `ESRI Shapefile'\nSimple feature collection with 1409 features and 4 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 121.4902 ymin: 25.01257 xmax: 121.5874 ymax: 25.08557\nGeodetic CRS:  TWD97"
  },
  {
    "objectID": "inclass_ex/inclass_ex05/inclass_ex05.html#visualizing-the-sf-layer",
    "href": "inclass_ex/inclass_ex05/inclass_ex05.html#visualizing-the-sf-layer",
    "title": "In-Class Ex05",
    "section": "Visualizing the sf layer",
    "text": "Visualizing the sf layer\ntm_polygon must be on top followed by the dots\n\ntmap_mode(\"view\") \ntm_shape(studyArea) + \n  tm_polygons() +\ntm_shape(store)+ \n  tm_dots(col = \"Name\", \n          size = 0.01,\n          border.col = \"black\", \n          border.lwd = 0.5) +\n  tm_view(set.zoom.limits = c(12,16))"
  },
  {
    "objectID": "inclass_ex/inclass_ex05/inclass_ex05.html#local-colocation-quotient",
    "href": "inclass_ex/inclass_ex05/inclass_ex05.html#local-colocation-quotient",
    "title": "In-Class Ex05",
    "section": "Local Colocation Quotient",
    "text": "Local Colocation Quotient\nnumber 6 = 6 neighbors (always go for even number)\n\nnb <- include_self(\n  st_knn(st_geometry(store), 6)\n)\n\n\nwt <- st_kernel_weights(nb, \n                        store, \n                        \"gaussian\", \n                        adaptive = TRUE)\n\n\nFamilyMart <- store %>% \n  filter(Name == \"Family Mart\")\nA <- FamilyMart$Name\n\n\nSevenEleven <- store %>% \n  filter(Name == \"7-Eleven\")\nB <- SevenEleven$Name\n\n\nLCLQ <-local_colocation(A,B,nb,wt,49)\n\nthe code below is to combine both dataframe together. in this case we cannot use relational join because they dont have unique id. LCLQ join to store\n\nLCLQ_stores<-cbind(store, LCLQ)\n\n\ntmap_mode(\"view\") \ntm_shape(studyArea) +   \n  tm_polygons() + \ntm_shape(LCLQ_stores) +   \n  tm_dots(col = \"X7.Eleven\",           \n          size = 0.1,           \n          border.col = \"black\",           \n          border.lwd = 0.5) + \n  tm_dots(col = \"X7.Eleven\",           \n        size = 0.1,           \n        border.col = \"black\",           \n        border.lwd = 0.5) +\ntm_view(set.zoom.limits = c(12,16))"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "IS415 Journey",
    "section": "",
    "text": "Welcome to my Geospatial Analytics and Applications journey."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take-home_Ex01",
    "section": "",
    "text": "Geospatial analytics hold tremendous potential to address complex problems facing society. In this study, you are tasked to apply appropriate spatial point patterns analysis methods to discover the geographical distribution of functional and non-function water points and their co-locations if any in Osun State, Nigeria."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#importing-geospatial-dataset",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#importing-geospatial-dataset",
    "title": "Take-home_Ex01",
    "section": "Importing GeoSpatial Dataset",
    "text": "Importing GeoSpatial Dataset\n\nNGA <- st_read(\"data/geospatial/\",\n               layer = \"nga_admbnda_adm2\") %>%\n  st_transform(crs = 26392)\n\nReading layer `nga_admbnda_adm2' from data source \n  `C:\\yifei-alpaca\\IS415-GAA\\Take-home_Ex\\Take-home_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n\n\nInstead of loading just Osun state, it is good to keep a raw data above in case we need to roll back or for checking purposes. After we look at the data, we can filter for column ADM1_EN and extract out only Osun, Nigeria. Let’s run the following chunk of code:\n\nNGA_osun <- st_read(\"data/geospatial/\",\n               layer = \"nga_admbnda_adm2\") %>%\n  st_transform(crs = 26392) %>% filter(`ADM1_EN` == \"Osun\")\n\nReading layer `nga_admbnda_adm2' from data source \n  `C:\\yifei-alpaca\\IS415-GAA\\Take-home_Ex\\Take-home_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#importing-aspatial-dataset",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#importing-aspatial-dataset",
    "title": "Take-home_Ex01",
    "section": "Importing Aspatial dataset",
    "text": "Importing Aspatial dataset\n\nFilter the raw dataset to only in Osun State, Nigeria.\nFor aspatial data, we can open up csv file to check which are the columns to be filtered. In this case column #clean_country_name & #clean_adm1 will be filtered.\n\n wp_osun_nga <- read_csv(\"data/aspatial/WPdx.csv\") %>%\n  filter(`#clean_country_name` == \"Nigeria\" & `#clean_adm1` == \"Osun\")\n\nLets do a check on the content of a simple feature data frame.\n\nst_geometry(NGA_osun)\n\nGeometry set for 30 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 176503.2 ymin: 331434.7 xmax: 291043.8 ymax: 454520.1\nProjected CRS: Minna / Nigeria Mid Belt\nFirst 5 geometries:\n\n\n\n\nConverting (aspatial data) into sf point features\nWe need to convert into sfc field by using st_as_sfc data type.\n\nwp_osun_nga$Geometry = st_as_sfc(wp_osun_nga$`New Georeferenced Column`)\nwp_osun_nga\n\n# A tibble: 5,557 × 71\n   row_id `#source`      #lat_…¹ #lon_…² #repo…³ #stat…⁴ #wate…⁵ #wate…⁶ #wate…⁷\n    <dbl> <chr>            <dbl>   <dbl> <chr>   <chr>   <chr>   <chr>   <chr>  \n 1 429123 GRID3             8.02    5.06 08/29/… Unknown <NA>    <NA>    Tapsta…\n 2  70566 Federal Minis…    7.32    4.79 05/11/… No      Protec… Well    Mechan…\n 3  70578 Federal Minis…    7.76    4.56 05/11/… No      Boreho… Well    Mechan…\n 4  66401 Federal Minis…    8.03    4.64 04/30/… No      Boreho… Well    Mechan…\n 5 422190 GRID3             7.87    4.88 08/29/… Unknown <NA>    <NA>    Tapsta…\n 6 422064 GRID3             7.7     4.89 08/29/… Unknown <NA>    <NA>    Tapsta…\n 7  65607 Federal Minis…    7.89    4.71 05/12/… No      Boreho… Well    Mechan…\n 8  68989 Federal Minis…    7.51    4.27 05/07/… No      Boreho… Well    <NA>   \n 9  67708 Federal Minis…    7.48    4.35 04/29/… Yes     Boreho… Well    Mechan…\n10  66419 Federal Minis…    7.63    4.50 05/08/… Yes     Boreho… Well    Hand P…\n# … with 5,547 more rows, 62 more variables: `#water_tech_category` <chr>,\n#   `#facility_type` <chr>, `#clean_country_name` <chr>, `#clean_adm1` <chr>,\n#   `#clean_adm2` <chr>, `#clean_adm3` <chr>, `#clean_adm4` <chr>,\n#   `#install_year` <dbl>, `#installer` <chr>, `#rehab_year` <lgl>,\n#   `#rehabilitator` <lgl>, `#management_clean` <chr>, `#status_clean` <chr>,\n#   `#pay` <chr>, `#fecal_coliform_presence` <chr>,\n#   `#fecal_coliform_value` <dbl>, `#subjective_quality` <chr>, …\n\n\nNext, we will convert the dataframe into an sf object by using st_sf(). It is important to transform the referencing system of the data into the sf format. Next we have to transform Nigeria projected coordinate system.\n\nwp_sf_osun <- st_sf(wp_osun_nga, crs=4326) %>%\n  st_transform(crs = 26392)\nwp_sf_osun\n\nSimple feature collection with 5557 features and 70 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 177285.9 ymin: 340054.1 xmax: 291287.1 ymax: 450859.7\nProjected CRS: Minna / Nigeria Mid Belt\n# A tibble: 5,557 × 71\n   row_id `#source`      #lat_…¹ #lon_…² #repo…³ #stat…⁴ #wate…⁵ #wate…⁶ #wate…⁷\n *  <dbl> <chr>            <dbl>   <dbl> <chr>   <chr>   <chr>   <chr>   <chr>  \n 1 429123 GRID3             8.02    5.06 08/29/… Unknown <NA>    <NA>    Tapsta…\n 2  70566 Federal Minis…    7.32    4.79 05/11/… No      Protec… Well    Mechan…\n 3  70578 Federal Minis…    7.76    4.56 05/11/… No      Boreho… Well    Mechan…\n 4  66401 Federal Minis…    8.03    4.64 04/30/… No      Boreho… Well    Mechan…\n 5 422190 GRID3             7.87    4.88 08/29/… Unknown <NA>    <NA>    Tapsta…\n 6 422064 GRID3             7.7     4.89 08/29/… Unknown <NA>    <NA>    Tapsta…\n 7  65607 Federal Minis…    7.89    4.71 05/12/… No      Boreho… Well    Mechan…\n 8  68989 Federal Minis…    7.51    4.27 05/07/… No      Boreho… Well    <NA>   \n 9  67708 Federal Minis…    7.48    4.35 04/29/… Yes     Boreho… Well    Mechan…\n10  66419 Federal Minis…    7.63    4.50 05/08/… Yes     Boreho… Well    Hand P…\n# … with 5,547 more rows, 62 more variables: `#water_tech_category` <chr>,\n#   `#facility_type` <chr>, `#clean_country_name` <chr>, `#clean_adm1` <chr>,\n#   `#clean_adm2` <chr>, `#clean_adm3` <chr>, `#clean_adm4` <chr>,\n#   `#install_year` <dbl>, `#installer` <chr>, `#rehab_year` <lgl>,\n#   `#rehabilitator` <lgl>, `#management_clean` <chr>, `#status_clean` <chr>,\n#   `#pay` <chr>, `#fecal_coliform_presence` <chr>,\n#   `#fecal_coliform_value` <dbl>, `#subjective_quality` <chr>, …\n\n\nwe can check the transformed projected system.\n\nst_crs(wp_sf_osun)\n\nCoordinate Reference System:\n  User input: EPSG:26392 \n  wkt:\nPROJCRS[\"Minna / Nigeria Mid Belt\",\n    BASEGEOGCRS[\"Minna\",\n        DATUM[\"Minna\",\n            ELLIPSOID[\"Clarke 1880 (RGS)\",6378249.145,293.465,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4263]],\n    CONVERSION[\"Nigeria Mid Belt\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",4,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",8.5,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.99975,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",670553.98,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"Nigeria between 6°30'E and 10°30'E, onshore and offshore shelf.\"],\n        BBOX[3.57,6.5,13.53,10.51]],\n    ID[\"EPSG\",26392]]"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-cleaning",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-cleaning",
    "title": "Take-home_Ex01",
    "section": "Data cleaning",
    "text": "Data cleaning\n\nRemove unwanted columns\n\nAs the data set contains many redundant fields, we will be selecting the columns that we want.\nI have included SD_EN for further analysis purposes.\n\n\n\nkeeps <- c(3:4, 8:9, 15:16)\nNGA_osun = NGA_osun[keeps]\n\n\nkeeps2 <- c(1,2,7:9,11:14,17,21,22,26)\nwp_sf_osun = wp_sf_osun[keeps2]\n\nCheck for duplicates for NGA_osun\n\nNGA_osun$ADM2_EN[duplicated(NGA_osun$ADM2_EN)==TRUE]\n\ncharacter(0)\n\n\nIn this case, there is no duplicate names, we do not need to transform any names. We can move on to the next phase which is the EDA."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#exploratory-data-analysis-and-further-cleaning",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#exploratory-data-analysis-and-further-cleaning",
    "title": "Take-home_Ex01",
    "section": "Exploratory data analysis and further cleaning",
    "text": "Exploratory data analysis and further cleaning\nIn our in class exe02, we uses ggplot() of ggplot package to reveal the distribution of water point status visually.\n*Note: currently my freq() for funModeling package is not working properly, hence, I’m using alternative method to plot the horizontal barchart.\n\nggplot(wp_sf_osun) + geom_bar(aes(y = fct_infreq(`#status_clean`), fill=`#status_clean`, stat=\"identity\"))+  theme(legend.position = \"right\")\n\n\n\n\nAs we can see from the images, there are category which can be group together such as “Abandoned” can combine with “Abandoned/Decommissioned”. As we can see that there are quite a number of missing values. Hence, we should rename to “Unknown”.\n\nwp_sf_osun <- wp_sf_osun %>% \n  rename(status_clean = '#status_clean') %>%\n  mutate(status_clean = replace_na(\n    status_clean, \"Unknown\"))\n\n\nwp_sf_osun$status_clean[wp_sf_osun$status_clean==\"Abandoned\"]  <- \"Abandoned/Decommissioned\" \n\nWe can plot the freq distribution diagram again.\n\n#freq(data = wp_sf_osun,\n     #input = 'status_clean')\n\nggplot(wp_sf_osun) + geom_bar(aes(y = fct_infreq(`status_clean`), fill=`status_clean`, stat=\"identity\"))+  theme(legend.position = \"right\")\n\n\n\n\nBased on the image above, about to 42% of the water point are Functional, followed by 4.5% needs repair and about 1.2% are not in use. Whereas for Non-Functional, it is about 36.2% and 2.8% are non functional due to the dry season. The unknown status is at about 13.5% which is quite a large %. If let say, most of the unknown falls under non-functional, we can say that in Osun state close to 50% of the water points are not very clean and further work improvement needs to perform in the future. One of the reason for being “unknown” could be the area have not been accessed yet.\n\nIn order to have a better view, we can plot a chart based on the the (adm2) which is the Secondary Administrative Division.\n\nggplot(wp_sf_osun, aes(x = `#clean_adm2`, fill = status_clean)) + \n  geom_bar() + \n  coord_flip() + \n  theme_minimal() + \n  xlab(\"Secondary Admin Division\") + \n  ylab(\"Number of status\") + \n  scale_fill_brewer(type = \"qual\", palette = 3, name = \"Status\")\n\n\n\n\nAs we can see from the image above, Aiyedade has the highest number of status record ( 455 est.) as compared to others. 2nd in line would be Ejigbo (440 est.). The lowest status recorded would be Ife East with a record of 20 est.\n\nBy plotting based on the Secondary Admin Division, it is hard to interpret the area of interest e.g located in the north, south, east or west area. Notice that for NGA_osun dataframe, I have included SD_EN which shows the results of East, West and Central. Whereas for wp_sf_osun, there is no SD_EN which shows East, West or Central.\n\nIn this section, I would combine both dataset and try to find some useful insights. As mentioned by Prof Kam during in-class 05, we use cbind when the dataset has no unique identifier and it also must have the same number of row. But, in this case, I am able to use relational join even though there is no exact unique identifier but we can join on the Secondary Admin Division as it exists in both data frame. But before joining, we need to make sure that the column name is the same. We can change it to ADM2_EN for water point.\n\nnames(wp_sf_osun)[9] <- \"ADM2_EN\"\n\nNext, we can proceed to joining the data. But before that, lets deactivate the geometry in this new data frame for the purpose of this EDA analysis. When I first left join, some rows shows NA values, I went to cross check and notice the upper and lower case difference. With that, let’s change all names to lower case instead.\n\nwp_sf_osun<- wp_sf_osun %>% \n mutate(ADM2_EN = tolower(ADM2_EN)) \n\n\nNGA_osun<- NGA_osun %>% \n mutate(ADM2_EN = tolower(ADM2_EN)) \n\n\nNGA_WP <- left_join(wp_sf_osun %>% as.data.frame(), NGA_osun %>% as.data.frame(), by = \"ADM2_EN\")\n\nAfter joining, I still have NA rows. I went to cross check and realized the difference. The spelling and “-”.\n\nNGA_osun: aiyedire, ola-oluwa\nwp_sf_osun: ayedire , ola oluwa\n\nIn the situation above, I will replace ayedire to aiyedire and ola oluwa to ola-oluwa.\n\nwp_sf_osun$ADM2_EN <- str_replace(wp_sf_osun$ADM2_EN,\"ayedire\", \"aiyedire\")\n\n\nwp_sf_osun$ADM2_EN <- str_replace(wp_sf_osun$ADM2_EN,\"ola oluwa\", \"ola-oluwa\")\n\nNext, re join the 2 data frame again.\n\nNGA_WP <- left_join(wp_sf_osun %>% as.data.frame(), NGA_osun %>% as.data.frame(), by = \"ADM2_EN\")\n\nLets do a quick check if there is any NA in the column in NGA_WP data frame.\n\nsum(is.na(NGA_WP$SD_EN))\n\n[1] 0\n\n\nyay! there is no NA values in that column. Now we can plot a graph based on SD_EN column to have a clearer view of the region.\n\nggplot(NGA_WP, aes(x = SD_EN, fill = status_clean)) + \n  geom_bar() + \n  coord_flip() + \n  theme_minimal() + \n  xlab(\"SD_EN\") + \n  ylab(\"Number of status\") + \n  scale_fill_brewer(type = \"qual\", palette = 2, name = \"Status\")\n\n\n\n\nAs we can see from the chart above, Osun west has the most number of status being recorded. It also can the most functional water point as compared to the other 2 region. As for Non functional, Osun East has the most number being recorded.\n\nExtracting water point data\nFunctional\n\nwp_functional <- wp_sf_osun %>%\n  filter(status_clean %in%\n           c(\"Functional\",\n             \"Functional but not in use\",\n             \"Functional but needs repair\"))\n\nNon Functional\n\nwp_nonfunctional <- wp_sf_osun %>%\n  filter(status_clean %in%\n           c(\"Abandoned/Decommissioned\",\n             \"Non-Functional due to dry season\",\n             \"Non-Functional\"))\n\nUnknown\n\nwp_unknown <- wp_sf_osun %>%\n  filter(status_clean == \"Unknown\")\n\n\n\n\nPerforming Point in Polygon count\nNext, we want to find out the number of total, functional, nonfunctional and unknown water points in each Secondary Division.\n\nNGA_wp_SubDiv <- NGA_osun %>% \n  mutate(`total_wp` = lengths(\n    st_intersects(NGA_osun, wp_sf_osun))) %>%\n  mutate(`wp_functional` = lengths(\n    st_intersects(NGA_osun, wp_functional))) %>%\n  mutate(`wp_nonfunctional` = lengths(\n    st_intersects(NGA_osun, wp_nonfunctional))) %>%\n  mutate(`wp_unknown` = lengths(\n    st_intersects(NGA_osun, wp_unknown)))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#section",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#section",
    "title": "Take-home_Ex01",
    "section": "",
    "text": "Converting KDE output into grid object\n\ngridded_kde_ife_east_f<- as.SpatialGridDataFrame.im(kde_ife_east_f)\ngridded_kde_iwo_f <- as.SpatialGridDataFrame.im(kde_iwo_f)\n\ngridded_kde_ife_east_nf <- as.SpatialGridDataFrame.im(kde_ife_east_nf)\ngridded_kde_iwo_nf <- as.SpatialGridDataFrame.im(kde_iwo_nf)\n\n\npar(mfrow=c(1,2))\n\nspplot(gridded_kde_ife_east_f)\n\n\n\nspplot(gridded_kde_iwo_f)\n\n\n\n\n\npar(mfrow=c(1,2))\n\nspplot(gridded_kde_ife_east_nf)\n\n\n\nspplot(gridded_kde_iwo_nf)\n\n\n\n\n\nConverting gridded output into raster\n\nkde_ife_east_f_raster <- raster(gridded_kde_ife_east_f)\nkde_iwo_f_raster <- raster(gridded_kde_iwo_f)\nkde_ife_east_nf_raster <- raster(gridded_kde_ife_east_nf)\nkde_iwo_nf_raster <- raster(gridded_kde_iwo_nf)\n\n\nprojection(kde_ife_east_f_raster) <- CRS(\"+init=EPSG:26392 +units=km\")\nprojection(kde_iwo_f_raster) <- CRS(\"+init=EPSG:26392 +units=km\")\nprojection(kde_ife_east_nf_raster) <- CRS(\"+init=EPSG:26392 +units=km\")\nprojection(kde_iwo_nf_raster) <- CRS(\"+init=EPSG:26392 +units=km\")\n\n\npar(mfrow=c(2,4))\ntm_shape(kde_ife_east_f_raster) + \n  tm_raster(\"v\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE,\n            main.title = \"ife east Funtional\",\n            main.title.position = \"center\",\n            main.title.size = 0.8)\n\n\n\ntm_shape(kde_iwo_f_raster) + \n  tm_raster(\"v\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE, \n            main.title = \"iwo Functional\",\n            main.title.position = \"center\",\n            main.title.size = 0.8)\n\n\n\ntm_shape(kde_ife_east_nf_raster) + \n  tm_raster(\"v\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE,\n            main.title = \"ife east Non Functional\",\n            main.title.position = \"center\",\n            main.title.size = 0.8)\n\n\n\ntm_shape(kde_iwo_nf_raster) + \n  tm_raster(\"v\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE, \n            main.title = \"iwo Non Functional\",\n            main.title.position = \"center\",\n            main.title.size = 0.8)\n\n\n\n\n\nHighlight the advantage of kernel density map over point map\nThe advantage of kernel density map over point map lies in the ability of the former to provide a smoother representation of the data distribution. Unlike point map which simply plots individual data points, the kernel density map uses a mathematical technique to estimate the underlying probability density function of the data and provides a smooth estimate of the data density over the entire region. This smoothed representation of the data gives a clearer picture of the underlying distribution pattern, making it easier to identify trends and anomalies. Additionally, the use of color gradients in kernel density maps allows for a clearer representation of the distribution range, making it easier to interpret the results."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#exploratory-spatial-data-analysis-esda",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#exploratory-spatial-data-analysis-esda",
    "title": "Take-home_Ex01",
    "section": "Exploratory Spatial Data Analysis (ESDA)",
    "text": "Exploratory Spatial Data Analysis (ESDA)\nPreviously, we have converted into SF format which is wp_sf_osun. However, the data frame is for Aspatial data. As for Geospatial data, we have not yet converting it. We have to convert sf data frames to sp’s Spatial class. We will be using NGA_osun.\n\nNGA_osun_s <- as_Spatial(NGA_osun)\n\nCheck the description summary of the new sp class data.\n\nNGA_osun_s\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 30 \nextent      : 176503.2, 291043.8, 331434.7, 454520.1  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \nvariables   : 6\nnames       :  ADM2_EN, ADM2_PCODE, ADM1_EN, ADM1_PCODE,        SD_EN, SD_PCODE \nmin values  : aiyedade,   NG030001,    Osun,      NG030, Osun Central,  NG03001 \nmax values  :   osogbo,   NG030030,    Osun,      NG030,    Osun West,  NG03003 \n\n\n\nNGA_osun_sp <- as(NGA_osun_s, \"SpatialPolygons\")\n\n\nNGA_osun_sp\n\nclass       : SpatialPolygons \nfeatures    : 30 \nextent      : 176503.2, 291043.8, 331434.7, 454520.1  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \n\n\nNext, we will be converting water point data frame into ppp format. But first, we have to convert it from sf to sp. Do note that, we have transformed the coordinate system previously hence, we do not need to transform again."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#create-owin-object",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#create-owin-object",
    "title": "Take-home_Ex01",
    "section": "Create owin object",
    "text": "Create owin object\nowin is specially designed to represent this polygonal region.\n\nNGA_osun_owin <- as(NGA_osun_sp, \"owin\")\n\n\nplot(NGA_osun_owin)\n\n\n\n\n\nCombining point events object and owin\n\nwpNGA_owin_f = wp_ppp_osun_f[NGA_osun_owin]\n\n\nwpNGA_owin_nf = wp_ppp_osun_nf[NGA_osun_owin]\n\n\nplot(wpNGA_owin_f)\n\n\n\n\n\nplot(wpNGA_owin_nf)\n\n\n\n\nBased on the image above, there is a little cluttered in many different areas. However, it seems that there are more records at the centre & top area of Osun, Nigeria."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#choropleth-mapping",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#choropleth-mapping",
    "title": "Take-home_Ex01",
    "section": "Choropleth Mapping",
    "text": "Choropleth Mapping\n\nfunctional_choroplot <- tm_shape(NGA_wp_SubDiv) +\n  tm_fill(\"wp_functional\",\n          n = 5,\n          style = \"equal\",\n          palette = \"Reds\") +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_text(\"ADM2_EN\", size = .7) +\n  tm_layout(main.title = \"Distribution of functional water point by Sub Division\", \n            legend.outside = TRUE)\n\n\nnonfunctional_choroplot <- tm_shape(NGA_wp_SubDiv) +\n  tm_fill(\"wp_nonfunctional\",\n          n = 5,\n          style = \"equal\",\n          palette = \"Reds\") +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_text(\"ADM2_EN\", size = .7) +\n  tm_layout(main.title = \"Distribution of non-functional water point by Sub Division\",\n            legend.outside = TRUE)\n\n\nfunctional_choroplot\n\n\n\n\nAs shown in the chart above, it has a better view where by ejigbo is more dense than the rest as compared to the bar chart shown above.\n\nnonfunctional_choroplot\n\n\n\n\nBased on images above, we can see that for ejigbo has the highest distribution in functional water point. Whereas for non functional, ejigbo and aiyedade has the highest distribution in non functional water point. This could mean that ejigbo has slightly more functional water point than non functional water point due to its scale.\n\ntmap_mode('plot')"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#first-order-spatial-point-pattern-analysis",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#first-order-spatial-point-pattern-analysis",
    "title": "Take-home_Ex01",
    "section": "First-order Spatial Point Pattern Analysis",
    "text": "First-order Spatial Point Pattern Analysis\n\nKernel density estimation (KDE)\nKernel density estimation maps are considered best for location, size, shape and orientation of the hotspot.\nIn the hands-on excises, there are a few recommendation in using methods such as, bw.CvL(), bw.scott(), bw.ppl() or bw.diggle(). But before applying the methods, we learnt from our hands-on exe that we should rescale, so as to convert the meters to kilometers.\n\nkde_wpNGA_owin_f_bw.km <- rescale(wpNGA_owin_f, 1000, \"km\")\nkde_wpNGA_owin_nf_bw.km <- rescale(wpNGA_owin_nf, 1000, \"km\")\n\nIn spatstat, the functions bw.diggle(), bw.ppl(), and bw.scott() can be used to estimate the bandwidth according to difference methods. These functions run algorithms that aim to select an appropriate bandwith.\n\n\nFunctional\n\nbw.diggle(kde_wpNGA_owin_f_bw.km)\n\n    sigma \n0.2521687 \n\n\n\nbw.ppl(kde_wpNGA_owin_f_bw.km)\n\n    sigma \n0.9192953 \n\n\n\nbw.scott(kde_wpNGA_owin_f_bw.km)\n\n sigma.x  sigma.y \n6.447815 6.379868 \n\n\n\n\nNon-Functional\n\nbw.diggle(kde_wpNGA_owin_nf_bw.km)\n\n    sigma \n0.3082061 \n\n\n\nbw.ppl(kde_wpNGA_owin_nf_bw.km)\n\n    sigma \n0.9737385 \n\n\n\nbw.scott(kde_wpNGA_owin_nf_bw.km)\n\n sigma.x  sigma.y \n6.338388 7.018473 \n\n\nAs we can see the Diggle algorithm gives us a narrower bandwidth for both functional and non-functional water point. However, Baddeley et (2016) suggest the use of the bw.ppl() algorithm because in their experience it tends to produce the more appropriate values when the pattern consists predominantly of tight clusters.\nHence, in this take home, I decided to use ppl() for my analysis.\n\n\nkde_wpNGA_owin_bw_f <- density(kde_wpNGA_owin_f_bw.km,\n                              sigma=bw.ppl,\n                              edge=TRUE,\n                            kernel=\"gaussian\") \n\n\nkde_wpNGA_owin_bw_nf <- density(kde_wpNGA_owin_nf_bw.km,\n                              sigma=bw.ppl,\n                              edge=TRUE,\n                            kernel=\"gaussian\") \n\n\npar(mfrow=c(1,2))\nplot(kde_wpNGA_owin_bw_f)\nplot(kde_wpNGA_owin_bw_nf)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#converting-kde-output-into-grid-object",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#converting-kde-output-into-grid-object",
    "title": "Take-home_Ex01",
    "section": "Converting KDE output into grid object",
    "text": "Converting KDE output into grid object\nNow, we have to convert our KDE outputs into RasterLayer objects. Since we can’t do that directly, we’ll need to convert them into a SpatialGridDataFrame first, then convert the SpatialGridDataFrame into RasterLayer objects:\n\ngridded_kde_wpNGA_owin_bw_f <- as.SpatialGridDataFrame.im(kde_wpNGA_owin_bw_f)\nspplot(gridded_kde_wpNGA_owin_bw_f)\n\n\n\n\n\ngridded_kde_wpNGA_owin_bw_nf <- as.SpatialGridDataFrame.im(kde_wpNGA_owin_bw_nf)\nspplot(gridded_kde_wpNGA_owin_bw_nf)\n\n\n\n\n\nConverting gridded output into raster\nNext, we will convert the gridded kernal density objects into RasterLayer object by using raster() of raster package.\n\nkde_wpNGA_owin_bw_raster_f <- raster(gridded_kde_wpNGA_owin_bw_f)\n\n\nkde_wpNGA_owin_bw_raster_nf <- raster(gridded_kde_wpNGA_owin_bw_nf)\n\n\nkde_wpNGA_owin_bw_raster_f\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.8948485, 0.9616045  (x, y)\nextent     : 176.5032, 291.0438, 331.4347, 454.5201  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : v \nvalues     : -4.99773e-16, 10.55944  (min, max)\n\n\n\nkde_wpNGA_owin_bw_raster_nf\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.8948485, 0.9616045  (x, y)\nextent     : 176.5032, 291.0438, 331.4347, 454.5201  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : v \nvalues     : -2.52505e-16, 9.25861  (min, max)\n\n\nNotice that the crs property is NA. We have to assign to appropriate projection system with the correct unit of measurement.\n\nprojection(kde_wpNGA_owin_bw_raster_f) <- CRS(\"+init=EPSG:26392 +units=km\" )\nkde_wpNGA_owin_bw_raster_f\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.8948485, 0.9616045  (x, y)\nextent     : 176.5032, 291.0438, 331.4347, 454.5201  (xmin, xmax, ymin, ymax)\ncrs        : +init=EPSG:26392 +units=km \nsource     : memory\nnames      : v \nvalues     : -4.99773e-16, 10.55944  (min, max)\n\n\n\nprojection(kde_wpNGA_owin_bw_raster_nf) <- CRS(\"+init=EPSG:26392 +units=km\" )\nkde_wpNGA_owin_bw_raster_nf\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.8948485, 0.9616045  (x, y)\nextent     : 176.5032, 291.0438, 331.4347, 454.5201  (xmin, xmax, ymin, ymax)\ncrs        : +init=EPSG:26392 +units=km \nsource     : memory\nnames      : v \nvalues     : -2.52505e-16, 9.25861  (min, max)\n\n\nNow we can see the crs property completed.\n\n\nVisualising the output on OpenStreetMap\n\ndensity_map <- function(rasterObj, map_title) {\n  tm_basemap(\"OpenStreetMap\") +\ntm_shape(rasterObj) +\n  tm_raster(\"v\", alpha=0.65) + \n  tm_layout(legend.position = c(\"right\", \"bottom\"), \n            legend.height = 0.5, \n            legend.width = 0.4,\n            main.title = map_title,\n            main.title.position = 'center',\n            main.title.size = 1,\n            frame = FALSE)\n  }\n\n\ndensity_map(kde_wpNGA_owin_bw_raster_f, map_title = \"Osun Functional Water Point Density Map\")\n\n\n\n\n\ndensity_map(kde_wpNGA_owin_bw_raster_nf, map_title = \"Osun Non-Functional Water Point Density Map\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#comparing-spatial-point-pattern-using-kde",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#comparing-spatial-point-pattern-using-kde",
    "title": "Take-home_Ex01",
    "section": "Comparing Spatial Point Pattern using KDE",
    "text": "Comparing Spatial Point Pattern using KDE\nPreviously, we have included the region in the data set, in this section, we will be comparing KDE water point at Central, East and West region.\n\nExtract the study area\n\noe = NGA_osun_s[NGA_osun_s$SD_EN == 'Osun East',]\now = NGA_osun_s[NGA_osun_s$SD_EN == 'Osun West',]\noc = NGA_osun_s[NGA_osun_s$SD_EN == 'Osun Central',]\n\n\npar(mfrow=c(1,3))\nplot(oc, main=\"Osun Central\")\nplot(oe, main=\"Osun East\")\nplot(ow, main=\"Osun West\")\n\n\n\n\n\noe_sp = as(oe, \"SpatialPolygons\")\now_sp = as(ow, \"SpatialPolygons\")\noc_sp = as(oc, \"SpatialPolygons\")\n\n\noe_owin = as(oe_sp, \"owin\")\now_owin = as(ow_sp, \"owin\")\noc_owin = as(oc_sp, \"owin\")\n\n\n\nCombining Water points and the study area\n\nwp_oe_ppp_f = wp_ppp_osun_f[oe_owin]\nwp_ow_ppp_f = wp_ppp_osun_f[ow_owin]\nwp_oc_ppp_f = wp_ppp_osun_f[oc_owin]\n\n\nwp_oe_ppp_nf = wp_ppp_osun_nf[oe_owin]\nwp_ow_ppp_nf = wp_ppp_osun_nf[ow_owin]\nwp_oc_ppp_nf = wp_ppp_osun_nf[oc_owin]\n\nNext, rescale() function is used to transform the unit of measurement from m to km\n\nwp_oe_ppp_f.km = rescale(wp_oe_ppp_f, 1000, \"km\")\nwp_ow_ppp_f.km = rescale(wp_ow_ppp_f, 1000, \"km\")\nwp_oc_ppp_f.km = rescale(wp_oc_ppp_f, 1000, \"km\")\n\n\nwp_oe_ppp_nf.km = rescale(wp_oe_ppp_nf, 1000, \"km\")\nwp_ow_ppp_nf.km = rescale(wp_ow_ppp_nf, 1000, \"km\")\nwp_oc_ppp_nf.km = rescale(wp_oc_ppp_nf, 1000, \"km\")\n\nplot the 3 study area and the location of the water point\n\npar(mfrow=c(1,3))\nplot(wp_oc_ppp_f.km, main=\"Osun Central Functional\")\nplot(wp_oe_ppp_f.km, main=\"Osun East Functional\")\nplot(wp_ow_ppp_f.km, main=\"Osun West Functional\")\n\n\n\n\n\npar(mfrow=c(1,3))\nplot(wp_oc_ppp_nf.km, main=\"Osun Central Non Functional\")\nplot(wp_oe_ppp_nf.km, main=\"Osun East Non Functional\")\nplot(wp_ow_ppp_nf.km, main=\"Osun West Non Functional\")\n\n\n\n\n\n\nComputing KDE by Region\nOver here, we will continue to use bw.ppl too so as to make a non bias analysis.\n\npar(mfrow=c(1,3))\nplot(density(wp_oc_ppp_f.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Osun Central Functional\")\nplot(density(wp_oe_ppp_f.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Osun East Functional\")\nplot(density(wp_ow_ppp_f.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Osun West Functional\")\n\n\n\n\n\npar(mfrow=c(1,3))\nplot(density(wp_oc_ppp_nf.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Osun Central Non Functional\")\nplot(density(wp_oe_ppp_nf.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Osun East Non Functional\")\nplot(density(wp_ow_ppp_nf.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Osun West Non Functional\")\n\n\n\n\nBased on the 3 graph above, we can see that central area seems more concentrated. Although, it is a little hard to narrow down into the division. I will be extracting Osun’s population based on region to determine which area we should be analyse on.\n\ntm_shape(NGA_wp_SubDiv_pop) +\n  tm_fill(\"T_TL\",\n          style = \"equal\",\n          palette = \"Oranges\",\n          thres.poly = 0) + \n   tm_text(\"ADM2_EN\", size = .7) +\n  tm_facets(by=\"SD_EN\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\n\n\n\nAs mentioned above here, ejigbo, iwon, irewole, oriade, ife central and ife east is most dense and from the bar chart above here ife east and iwo has the most population with 312,801 and 302,585 respectively.\nWith the findings, I will be narrowing to the 2 most populated division for further analysis:\n\nife east\niwo\n\n\n\nExtract the study area for ife east & iwo\n\nife_east = NGA_osun_s[NGA_osun_s$ADM2_EN == 'ife east',]\niwo = NGA_osun_s[NGA_osun_s$ADM2_EN == 'iwo',]\n\n\nife_east_sp = as(ife_east, \"SpatialPolygons\")\niwo_sp = as(iwo, \"SpatialPolygons\")\n\n\nife_east_owin = as(ife_east_sp, \"owin\")\niwo_owin = as(iwo_sp, \"owin\")\n\n\nwp_ife_east_ppp_f = wp_ppp_osun_f[ife_east_owin]\nwp_iwo_ppp_f = wp_ppp_osun_f[iwo_owin]\n\nwp_ife_east_ppp_nf = wp_ppp_osun_nf[ife_east_owin]\nwp_iwo_ppp_nf = wp_ppp_osun_nf[iwo_owin]\n\nwp_ife_east_ppp_f.km = rescale(wp_ife_east_ppp_f, 1000, \"km\")\nwp_iwo_ppp_f.km = rescale(wp_iwo_ppp_f, 1000, \"km\")\n\nwp_ife_east_ppp_nf.km = rescale(wp_ife_east_ppp_nf, 1000, \"km\")\nwp_iwo_ppp_nf.km = rescale(wp_iwo_ppp_nf, 1000, \"km\")\n\n\nkde_ife_east_f <- density(wp_ife_east_ppp_f.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"gaussian\")\nkde_iwo_f <- density(wp_iwo_ppp_f.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"gaussian\")\n\n\npar(mfrow=c(1,2))\nplot( kde_ife_east_f,\n   main=\"ife_east Functional\")\nplot( kde_iwo_f,\n   main=\"iwo Functional\")\n\n\n\n\n\nkde_ife_east_nf <- density(wp_ife_east_ppp_nf.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"gaussian\")\n\nkde_iwo_nf <- density(wp_iwo_ppp_nf.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"gaussian\")\n\n\npar(mfrow=c(1,2))\nplot( kde_ife_east_nf,\n   main=\"ife_east Non Functional\")\nplot( kde_iwo_nf,\n   main=\"iwo Non Functional\")\n\n\n\n\n\n\nConverting KDE output into grid object\n\ngridded_kde_ife_east_f<- as.SpatialGridDataFrame.im(kde_ife_east_f)\ngridded_kde_iwo_f <- as.SpatialGridDataFrame.im(kde_iwo_f)\n\ngridded_kde_ife_east_nf <- as.SpatialGridDataFrame.im(kde_ife_east_nf)\ngridded_kde_iwo_nf <- as.SpatialGridDataFrame.im(kde_iwo_nf)\n\n\npar(mfrow=c(1,2))\n\nspplot(gridded_kde_ife_east_f)\n\n\n\nspplot(gridded_kde_iwo_f)\n\n\n\n\n\npar(mfrow=c(1,2))\n\nspplot(gridded_kde_ife_east_nf)\n\n\n\nspplot(gridded_kde_iwo_nf)\n\n\n\n\n\n\nConverting gridded output into raster\n\nkde_ife_east_f_raster <- raster(gridded_kde_ife_east_f)\nkde_iwo_f_raster <- raster(gridded_kde_iwo_f)\nkde_ife_east_nf_raster <- raster(gridded_kde_ife_east_nf)\nkde_iwo_nf_raster <- raster(gridded_kde_iwo_nf)\n\n\nprojection(kde_ife_east_f_raster) <- CRS(\"+init=EPSG:26392 +units=km\")\nprojection(kde_iwo_f_raster) <- CRS(\"+init=EPSG:26392 +units=km\")\nprojection(kde_ife_east_nf_raster) <- CRS(\"+init=EPSG:26392 +units=km\")\nprojection(kde_iwo_nf_raster) <- CRS(\"+init=EPSG:26392 +units=km\")\n\n\npar(mfrow=c(2,4))\ntm_shape(kde_ife_east_f_raster) + \n  tm_raster(\"v\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE,\n            main.title = \"ife east Funtional\",\n            main.title.position = \"center\",\n            main.title.size = 0.8)\n\n\n\ntm_shape(kde_iwo_f_raster) + \n  tm_raster(\"v\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE, \n            main.title = \"iwo Functional\",\n            main.title.position = \"center\",\n            main.title.size = 0.8)\n\n\n\ntm_shape(kde_ife_east_nf_raster) + \n  tm_raster(\"v\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE,\n            main.title = \"ife east Non Functional\",\n            main.title.position = \"center\",\n            main.title.size = 0.8)\n\n\n\ntm_shape(kde_iwo_nf_raster) + \n  tm_raster(\"v\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE, \n            main.title = \"iwo Non Functional\",\n            main.title.position = \"center\",\n            main.title.size = 0.8)\n\n\n\ntmap_mode(\"plot\")\n\nFor ife east, there are more non functional than functional water point area as the scale shows are higher range. As for iwo state, functional water point is more than non functional water point. Due to the rural area, improvements of the water points can be challenging as a whole of Osun, Nigeria. Instead, I will be narrowing down to only a state for deeper analysis. The purpose of this analysis could inform policy and decision-making related to water manageand invest in the state, as well as guide efforts to improve the overall water supply system in ife east state because the non functional water point is higher in a highly populated state.\n\nHighlight the advantage of kernel density map over point map\nThe advantage of kernel density map over point map lies in the ability of the former to provide a smoother representation of the data distribution. Unlike point map which simply plots individual data points, the kernel density map uses a mathematical technique to estimate the underlying probability density function of the data and provides a smooth estimate of the data density over the entire region. This smoothed representation of the data gives a clearer picture of the underlying distribution pattern, making it easier to identify trends and anomalies. Additionally, the use of color gradients in kernel density maps allows for a clearer representation of the distribution range, making it easier to interpret the results."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#population-analysis",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#population-analysis",
    "title": "Take-home_Ex01",
    "section": "Population Analysis",
    "text": "Population Analysis\nIn this section, I have found Nigeria’s Subnation population statistic in this website NGA_Subnation Population statistic. We can download nga_admpop_adm2_2020.csv.\nIn this data set, it is categorized by demographics such as age and sex on a Nigeria administrative level 0-2 . The purpose of this is to help me to identify which area with the most population are affected by water shortages and poor water quality.\n\nImport aspatial data\n\nnga_osun_pop <- read_csv(\"data/aspatial/nga_admpop_adm2_2020.csv\") %>%\n  filter( `ADM1_NAME` == \"OSUN\")\n\nAfter looking at the data, we can keep T_TL as it is refer to the total population. But before that, we can drop unwanted columns to save memory space and clean the data.\n\nkeeps_pop <- c(1:9)\nnga_osun_pop = nga_osun_pop[keeps_pop]\n\n\nnga_osun_pop<- nga_osun_pop %>% \n mutate(ADM2_NAME = tolower(ADM2_NAME)) \n\nNext we can do some basic EDA to understand the data.\n\ncolourCount = length(unique(nga_osun_pop$ADM2_NAME))\ngetPalette = colorRampPalette(brewer.pal(9, \"Set1\"))\n\nggplot(nga_osun_pop, aes(x=ADM2_NAME, y=T_TL, fill=ADM2_NAME )) + \n  geom_bar(stat = \"identity\") +\n  coord_flip() + \n  xlab(\"ADM2_NAME\") + \n  ylab(\"Number of population\") +\n   geom_text(aes(label=T_TL), color=\"black\", size=2.5)+\n   scale_fill_manual(values = getPalette(colourCount))\n\n\n\n\nAs we can see from the chart above ife north and iwo has the most population with 312,801 and 302,585 respectively.\nNext, we can plot population choropleth mapping, but before that, we should do a join with NGA_wp_SubDiv as we previously joined NGA and wp together to plot chorpleth charts. In this case, we have a unique subdivision name ADM2_NAME in nga_osun_pop and can join together with ADM2_EN in NGA_wp_SubDiv.\nChange column name:\n\nnames(nga_osun_pop)[5] <- \"ADM2_EN\"\n\n\nNGA_wp_SubDiv_pop <- left_join(NGA_wp_SubDiv %>% as.data.frame(), nga_osun_pop %>% as.data.frame(), by = \"ADM2_EN\")\n\n\nst_crs(NGA_wp_SubDiv_pop)\n\nCoordinate Reference System: NA\n\n\nAs shown above, there is no Coordinate system. We have to re assign them.\n\nNGA_wp_SubDiv_pop <- st_sf(NGA_wp_SubDiv_pop, crs=4326) %>%\n  st_transform(crs = 26392)\nNGA_wp_SubDiv_pop\n\nSimple feature collection with 30 features and 20 fields (with 30 geometries empty)\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nProjected CRS: Minna / Nigeria Mid Belt\nFirst 10 features:\n          ADM2_EN ADM2_PCODE.x ADM1_EN ADM1_PCODE.x        SD_EN SD_PCODE\n1        aiyedade     NG030001    Osun        NG030    Osun West  NG03003\n2        aiyedire     NG030002    Osun        NG030    Osun West  NG03003\n3  atakumosa east     NG030003    Osun        NG030    Osun East  NG03002\n4  atakumosa west     NG030004    Osun        NG030    Osun East  NG03002\n5      boluwaduro     NG030005    Osun        NG030 Osun Central  NG03001\n6          boripe     NG030006    Osun        NG030 Osun Central  NG03001\n7       ede north     NG030007    Osun        NG030    Osun West  NG03003\n8       ede south     NG030008    Osun        NG030    Osun West  NG03003\n9        egbedore     NG030009    Osun        NG030    Osun West  NG03003\n10         ejigbo     NG030010    Osun        NG030    Osun West  NG03003\n   total_wp wp_functional wp_nonfunctional wp_unknown pct_functional\n1       389           157              154         78      0.4035990\n2       175            89               57         29      0.5085714\n3       223            98               92         33      0.4394619\n4       246           111              103         32      0.4512195\n5       129            63               51         15      0.4883721\n6       177            79               85         13      0.4463277\n7       216           141               50         25      0.6527778\n8       146            72               39         35      0.4931507\n9       142            63               44         35      0.4436620\n10      434           274              126         34      0.6313364\n   pct_nonfunctional ADM0_NAME ADM0_PCODE ADM1_NAME ADM1_PCODE.y ADM2_PCODE.y\n1          0.3958869   NIGERIA         NG      OSUN        NG030     NG030001\n2          0.3257143   NIGERIA         NG      OSUN        NG030     NG030002\n3          0.4125561   NIGERIA         NG      OSUN        NG030     NG030003\n4          0.4186992   NIGERIA         NG      OSUN        NG030     NG030004\n5          0.3953488   NIGERIA         NG      OSUN        NG030     NG030005\n6          0.4802260   NIGERIA         NG      OSUN        NG030     NG030006\n7          0.2314815   NIGERIA         NG      OSUN        NG030     NG030007\n8          0.2671233   NIGERIA         NG      OSUN        NG030     NG030008\n9          0.3098592   NIGERIA         NG      OSUN        NG030     NG030009\n10         0.2903226   NIGERIA         NG      OSUN        NG030     NG030010\n     F_TL   M_TL   T_TL           geometry\n1  101556 104135 205691 MULTIPOLYGON EMPTY\n2   61295  60528 121823 MULTIPOLYGON EMPTY\n3   48012  49623  97635 MULTIPOLYGON EMPTY\n4   43204  44483  87687 MULTIPOLYGON EMPTY\n5   46966  48109  95075 MULTIPOLYGON EMPTY\n6   93680  97503 191183 MULTIPOLYGON EMPTY\n7   40631  41179  81810 MULTIPOLYGON EMPTY\n8   36449  37233  73682 MULTIPOLYGON EMPTY\n9   58743  59536 118279 MULTIPOLYGON EMPTY\n10 108710 111767 220477 MULTIPOLYGON EMPTY\n\n\n\nst_crs(NGA_wp_SubDiv_pop)\n\nCoordinate Reference System:\n  User input: EPSG:26392 \n  wkt:\nPROJCRS[\"Minna / Nigeria Mid Belt\",\n    BASEGEOGCRS[\"Minna\",\n        DATUM[\"Minna\",\n            ELLIPSOID[\"Clarke 1880 (RGS)\",6378249.145,293.465,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4263]],\n    CONVERSION[\"Nigeria Mid Belt\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",4,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",8.5,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.99975,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",670553.98,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"Nigeria between 6°30'E and 10°30'E, onshore and offshore shelf.\"],\n        BBOX[3.57,6.5,13.53,10.51]],\n    ID[\"EPSG\",26392]]\n\n\n\npopulation_choroplot <- tm_shape(NGA_wp_SubDiv_pop) +\n  tm_fill(\"T_TL\",\n          n = 5,\n          style = \"equal\",\n          palette = \"Reds\") +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_text(\"ADM2_EN\", size = .7) +\n  tm_layout(main.title = \"Distribution of Population in Osun\", \n            legend.outside = TRUE)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#importing-aspatial-dataset-for-population.",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#importing-aspatial-dataset-for-population.",
    "title": "Take-home_Ex01",
    "section": "Importing Aspatial Dataset for Population.",
    "text": "Importing Aspatial Dataset for Population.\nLets compare point map and kernel density map for Osun Central area.\n\n#kde_oc.bw <- density(wp_oc_ppp.km, sigma=bw.diggle, edge=TRUE, kernel=\"gaussian\")\n#plot(kde_oc.bw)\n\n\n#gridded_kde_oc.bw <- as.SpatialGridDataFrame.im(kde_oc.bw)\n#spplot(gridded_kde_oc.bw)\n\n\n#kde_oc_bw_raster <- raster(gridded_kde_oc.bw)\n\n\n#projection(kde_oc_bw_raster) <- CRS(\"+init=EPSG:26392 +units=km\")\n#kde_oc_bw_raster\n\n\nClipping Polygon and Point to form Point Map\n\n#NGA_Osun_Central = NGA_osun[NGA_osun$SD_EN == \"Osun Central\",]\n\nClipping polygon and point together, using st_intersects()\n\n#oc_wp <- st_intersects(NGA_Osun_Central, wp_sf_osun)\n#oc_wp <- wp_sf_osun[unlist(oc_wp),]\n\n\n\nPoint Map\n\n#ggplot() + \n#  geom_sf(data = NGA_Osun_Central) + \n#  geom_sf(data = oc_wp) + \n#  theme(legend.position = \"none\",\n#        panel.grid = element_blank(),\n#        axis.title = element_blank(),\n#        axis.text = element_blank(),\n#        axis.ticks = element_blank(),\n#        panel.background = element_blank()) \n\n\n\nDensity Map\n\n#density_map(kde_oc_bw_raster, map_title = \"Osun Central,Nigeria Density Map\")\n\n\n\nMonte Carlo method"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#population-analysis-additional-findings",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#population-analysis-additional-findings",
    "title": "Take-home_Ex01",
    "section": "Population Analysis (additional findings)",
    "text": "Population Analysis (additional findings)\nIn this section, I have found Nigeria’s Subnation population statistic in this website NGA_Subnation Population statistic. We can download nga_admpop_adm2_2020.csv.\nIn this data set, it is categorized by demographics such as age and sex on a Nigeria administrative level 0-2 . The purpose of this is to help me to identify which area with the most population are affected by water shortages and poor water quality.\n\nImport aspatial data\n\nnga_osun_pop <- read_csv(\"data/aspatial/nga_admpop_adm2_2020.csv\") %>%\n  filter( `ADM1_NAME` == \"OSUN\")\n\nAfter looking at the data, we can keep T_TL as it is refer to the total population. But before that, we can drop unwanted columns to save memory space and clean the data.\n\nkeeps_pop <- c(1:9)\nnga_osun_pop = nga_osun_pop[keeps_pop]\n\n\nnga_osun_pop<- nga_osun_pop %>% \n mutate(ADM2_NAME = tolower(ADM2_NAME)) \n\nNext we can do some basic EDA to understand the data. Because there is some limit in the colors, we have to extend the colors by using colorRampPalette() function.\n\n\nPopulation Bar chat\n\ncolourCount = length(unique(nga_osun_pop$ADM2_NAME))\ngetPalette = colorRampPalette(brewer.pal(9, \"Set1\"))\n\nggplot(nga_osun_pop, aes(x=ADM2_NAME, y=T_TL, fill=ADM2_NAME )) + \n  geom_bar(stat = \"identity\") +\n  coord_flip() + \n  xlab(\"ADM2_NAME\") + \n  ylab(\"Number of population\") +\n   geom_text(aes(label=T_TL), color=\"black\", size=2.5)+\n   scale_fill_manual(values = getPalette(colourCount))\n\n\n\n\nAs we can see from the chart above ife east and iwo has the most population with 312,801 and 302,585 respectively.\nNext, we can plot population choropleth mapping, but before that, we should do a join with NGA_wp_SubDiv as we previously joined NGA and wp together to plot chorpleth charts. In this case, we have a unique subdivision name ADM2_NAME in nga_osun_pop and can join together with ADM2_EN in NGA_wp_SubDiv.\nChange column name:\n\nnames(nga_osun_pop)[5] <- \"ADM2_EN\"\n\n\nNGA_wp_SubDiv_pop <- left_join(NGA_osun, nga_osun_pop,\n                              by = c(\"ADM2_EN\"))\n\n\n\nDistribution of population by Sub Division\nAs shown above, there is no Coordinate system. We have to re assign them.\n\ntmap_mode(\"plot\")\ntm_shape(NGA_wp_SubDiv_pop)+\n  tm_fill(\"T_TL\", \n          style = \"quantile\", \n          palette = \"Oranges\",\n          legend.show = FALSE,\n         ) +\n  tm_text(\"ADM2_EN\", size = .6) +\n  tm_layout(main.title = \"Distribution of Population by Sub Division\",\n            main.title.position = \"center\",\n            main.title.size = 0.8) +tm_borders(alpha = 0.5)\n\n\n\n\nAs we can see from the chart, ejigbo, iwo, irewole, ife central, ife east and oriade is much more dense as compared to the rest. This shows that the dense area has the most population. We will be continue with this data below."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#converting-kde-output-into-grid-object-1",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#converting-kde-output-into-grid-object-1",
    "title": "Take-home_Ex01",
    "section": "Converting KDE output into grid object",
    "text": "Converting KDE output into grid object\n\nClipping Polygon and Point to form Point Map\n\n#NGA_Osun_Central = NGA_osun[NGA_osun$SD_EN == \"Osun Central\",]\n\nClipping polygon and point together, using st_intersects()\n\n#oc_wp <- st_intersects(NGA_Osun_Central, wp_sf_osun)\n#oc_wp <- wp_sf_osun[unlist(oc_wp),]\n\n\n\nPoint Map\n\n#ggplot() + \n#  geom_sf(data = NGA_Osun_Central) + \n#  geom_sf(data = oc_wp) + \n#  theme(legend.position = \"none\",\n#        panel.grid = element_blank(),\n#        axis.title = element_blank(),\n#        axis.text = element_blank(),\n#        axis.ticks = element_blank(),\n#        panel.background = element_blank()) \n\n\n\nDensity Map\n\n#density_map(kde_oc_bw_raster, map_title = \"Osun Central,Nigeria Density Map\")\n\n\n\nMonte Carlo method"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#st-order-spatial-point-pattern-analysis",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#st-order-spatial-point-pattern-analysis",
    "title": "Take-home_Ex01",
    "section": "1st order Spatial Point Pattern Analysis",
    "text": "1st order Spatial Point Pattern Analysis\n\nKernel density estimation (KDE)\nKernel density estimation maps are considered best for location, size, shape and orientation of the hotspot.\nIn the hands-on excises, there are a few recommendation in using methods such as, bw.CvL(), bw.scott(), bw.ppl() or bw.diggle(). But before applying the methods, we learnt from our hands-on exe that we should rescale, so as to convert the meters to kilometers.\n\nkde_wpNGA_owin_f_bw.km <- rescale(wpNGA_owin_f, 1000, \"km\")\nkde_wpNGA_owin_nf_bw.km <- rescale(wpNGA_owin_nf, 1000, \"km\")\n\nIn spatstat, the functions bw.diggle(), bw.ppl(), and bw.scott() can be used to estimate the bandwidth according to difference methods. These functions run algorithms that aim to select an appropriate bandwith.\n\n\nFunctional\n\nbw.diggle(kde_wpNGA_owin_f_bw.km)\n\n    sigma \n0.2521687 \n\n\n\nbw.ppl(kde_wpNGA_owin_f_bw.km)\n\n    sigma \n0.9192953 \n\n\n\nbw.scott(kde_wpNGA_owin_f_bw.km)\n\n sigma.x  sigma.y \n6.447815 6.379868 \n\n\n\n\nNon-Functional\n\nbw.diggle(kde_wpNGA_owin_nf_bw.km)\n\n    sigma \n0.3082061 \n\n\n\nbw.ppl(kde_wpNGA_owin_nf_bw.km)\n\n    sigma \n0.9737385 \n\n\n\nbw.scott(kde_wpNGA_owin_nf_bw.km)\n\n sigma.x  sigma.y \n6.338388 7.018473 \n\n\nAs we can see the Diggle algorithm gives us a narrower bandwidth for both functional and non-functional water point. However, Baddeley et (2016) suggest the use of the bw.ppl() algorithm because in their experience it tends to produce the more appropriate values when the pattern consists predominantly of tight clusters.\nHence, in this take home, I decided to use ppl() for my analysis.\n\n\nkde_wpNGA_owin_bw_f <- density(kde_wpNGA_owin_f_bw.km,\n                              sigma=bw.ppl,\n                              edge=TRUE,\n                            kernel=\"gaussian\") \n\n\nkde_wpNGA_owin_bw_nf <- density(kde_wpNGA_owin_nf_bw.km,\n                              sigma=bw.ppl,\n                              edge=TRUE,\n                            kernel=\"gaussian\") \n\n\npar(mfrow=c(1,2))\nplot(kde_wpNGA_owin_bw_f)\nplot(kde_wpNGA_owin_bw_nf)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#nd-order-spatial-point-pattern-analysis",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#nd-order-spatial-point-pattern-analysis",
    "title": "Take-home_Ex01",
    "section": "2nd Order Spatial Point Pattern Analysis",
    "text": "2nd Order Spatial Point Pattern Analysis\nNow that we have analysed the spatial point patterns, we have to confirm our observation statistically. I have narrowed down on my observation to ife east and iwo area which is the most populated area. The nearest-neighbour distance is the measure of distance from each point to its nearest neighbour. G-function measures the distribution of distances from an arbitrary event to its nearest neighbour.\n\nIfe East Functional - G Function Gest()\n\nH0: The distribution of the Functional water points at ife east are randomly distributed\nH1: The distribution of the Functional water points at ife east are not randomly distributed\nConfidence level at 95%\nSignificance level: 0.05\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.05\n\n\nG_ife_east_f = Gest(wp_ife_east_ppp_f, correction = \"border\")\nplot(G_ife_east_f, xlim=c(0,500))\n\n\n\n\n\nG_ife_east_f.csr <- envelope(wp_ife_east_ppp_f, Gest, nsim = 95)\n\nGenerating 95 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94,  95.\n\nDone.\n\n\n\nplot(G_ife_east_f.csr)\n\n\n\n\nConclusion: The observed G(r) is above the G(theo) as well as the envelope. This shows that functional water point in ife east are clustered. Hence, we will reject the null hypothesis that the functional water points at ife east are randomly distributed.\n\n\nIwo Functional - G Function\n\nH0: The distribution of the Functional water points at iwo are randomly distributed\nH1: The distribution of the Functional water points at iwo are not randomly distributed\nConfidence level at 95%\nSignificance level: 0.05\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.05\n\n\nG_iwo_f = Gest(wp_iwo_ppp_f, correction = \"border\")\nplot(G_iwo_f, xlim=c(0,500))\n\n\n\n\n\nG_iwo_f.csr <- envelope(wp_iwo_ppp_f, Gest, nsim = 39)\n\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\nplot(G_iwo_f.csr)\n\n\n\n\nConclusion: The observed G(r) is far above the G(theo) as well as the envelope. This shows that functional water point in iwo are clustered. Hence, we will reject the null hypothesis that the functional water points at iwo are randomly distributed at 95% confident interval.\n\n\nIfe East Non Functional - G Function\n\nH0: The distribution of the Non functional water points at ife east are randomly distributed\nH1: The distribution of the Non Functional water points at ife east are not randomly distributed\nConfidence level at 95%\nSignificance level: 0.05\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.05\n\n\nG_ife_east_nf = Gest(wp_ife_east_ppp_nf, correction = \"border\")\nplot(G_ife_east_nf, xlim=c(0,500))\n\n\n\n\n\nG_ife_east_nf.csr <- envelope(wp_ife_east_ppp_nf, Gest, nsim = 39)\n\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\nplot(G_ife_east_nf.csr)\n\n\n\n\nConclusion: The observed G(r) is above the G(theo) as well as the envelope. This shows that non functional water point in ife east are clustered. Hence, we will reject the null hypothesis that the non functional water points at ife east are randomly distributed.\n\n\nIwo Non Functional - G Function\n\nH0: The distribution of the Non functional water points at iwo are randomly distributed\nH1: The distribution of the Non Functional water points at iwo are not randomly distributed\nConfidence level at 95%\nSignificance level: 0.05\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.05\n\n\nG_iwo_nf = Gest(wp_iwo_ppp_nf, correction = \"border\")\nplot(G_iwo_nf, xlim=c(0,500))\n\n\n\n\n\nG_iwo_nf.csr <- envelope(wp_iwo_ppp_nf, Gest, nsim = 39)\n\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\nplot(G_iwo_nf.csr)\n\n\n\n\nConclusion: The observed G(r) is far above the G(theo) as well as the envelope. This shows that non functional water point in iwo are clustered. Hence, we will reject the null hypothesis that the functional water points at iwo are randomly distributed at 95% confident interval."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#section-1",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#section-1",
    "title": "Take-home_Ex01",
    "section": "",
    "text": "Spatial Correlation Analysis\nPreviously, we have visualize geospatial data on the different status here. Having to further dive in, we can look into the subjective quality in both functional and non functional.\nLet’s take a look at quality column.\n\nunique(wp_functional$`#subjective_quality`)\n\n[1] \"Acceptable quality\"   \"No because of Colour\" \"No because of Odour\" \n[4] \"No because of Taste\" \n\n\n\nunique(wp_nonfunctional$`#subjective_quality`)\n\n[1] \"Acceptable quality\"   \"No because of Taste\"  \"No because of Odour\" \n[4] \"No because of Colour\"\n\n\nBased on the result, both functional and non functional has 4 unique values.\nLet’s plot them to have a better idea.\n\ntmap_mode(\"view\")\ntm_basemap(\"OpenStreetMap\") +\ntm_shape(wp_functional) +\n  tm_dots(col = '#subjective_quality', size = 0.02, title=\"Quality Type\" ,alpha=0.6,\n          palette = c(\"#e76f51\", \"#e9c46a\",\"#2a9d8f\"))\n\n\n\n\n\n\n\ntm_basemap(\"OpenStreetMap\") +\ntm_shape(wp_nonfunctional) +\n  tm_dots(col = '#subjective_quality', size = 0.02, title=\"Quality Type\" ,alpha=0.6,\n          palette = c(\"#e76f51\", \"#e9c46a\",\"#2a9d8f\"))\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\nAs we are working with marked data, and we know that the values are categorical (different room types), we need to ensure that the marked field is of factor data type. However, as seen from the output, our room_type field is of chr data type, not factor! Let's rectify that with the as.factor() function:\n\nwp_osun_f@data$`#subjective_quality` <-as.factor(wp_osun_f@data$`X.subjective_quality`)\n\n\nwp_osun_nf@data$`X.subjective_quality` <-as.factor(wp_osun_nf@data$`X.subjective_quality`)\n\n\nwp_functional_ppp_factor <- as(wp_osun_f, \"ppp\") \nwp_nonfunctional_ppp_factor <- as(wp_osun_nf, \"ppp\") \n\n\nCorrelation\nIn this section, I will be using ife east and iwo owin object. We will be looking at:\n\nife east quality of water in functional\nife east quality of water in non functional\niwo quality of water in functional\niwo quality of water in non functional\n\n\nife_east_marked_ppp <- wp_functional_ppp_factor[ife_east_owin]\niwo_marked_ppp <- wp_functional_ppp_factor[iwo_owin]\n\n\nife_east_marked_ppp_nf <- wp_nonfunctional_ppp_factor[ife_east_owin]\niwo_marked_ppp_nf <- wp_nonfunctional_ppp_factor[iwo_owin]\n\n\npar(mfrow=c(1,2))\nplot(ife_east_marked_ppp, main = \"ife east F\", which.marks = \"#subjective_quality\")\nplot(ife_east_marked_ppp_nf, main = \"ife east NF\", which.marks = \"X.subjective_quality\")\n\n\n\n\n\npar(mfrow=c(1,2))\nplot(iwo_marked_ppp, main = \"iwo F\", which.marks = \"#subjective_quality\")\nplot(iwo_marked_ppp_nf, main = \"iwo NF\", which.marks = \"X.subjective_quality\")\n\n\n\n\nIn this section, hypothesis testing will be conducted utilising second-order statistics (L function), to assess if the spatial distribution of functional and non-functional water points are independent from each other.\n\n\n\n2nd order multi-type point pattern analysis - Cross L function\n\nplot((density(split(rescale(ife_east_marked_ppp, 1000)))))\n\n\n\n\n\nplot((density(split(rescale(ife_east_marked_ppp_nf, 1000)))))\n\n\n\n\nBased on the graphs above, acceptable quality and cause of taste seems to have a stronger complementary relationship with each other in ife east area for both functional and non functional area. However, Acceptable quality being the most strong ones due to the scale.\n\nplot((density(split(rescale(iwo_marked_ppp, 1000)))))\n\n\n\n\n\nplot((density(split(rescale(iwo_marked_ppp_nf, 1000)))))\n\n\n\n\nBased on the graphs above, for functional in iwo area, most of the charts has a stronger complementary relationship with each other except for odour. However, Acceptable quality being the most strong ones due to the scale. As for non functional, most of the charts has a strong complementary relationship too except for color chart, there is a slight difference on the area. However, Acceptable quality also being the most strong ones due to the scale."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#choropleth-map-group-by-secondary-division",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#choropleth-map-group-by-secondary-division",
    "title": "Take-home_Ex01",
    "section": "Choropleth map group by Secondary Division",
    "text": "Choropleth map group by Secondary Division\n\nFunctional\n\ntm_shape(NGA_wp_SubDiv) +\n  tm_fill(\"wp_functional\",\n          style = \"equal\",\n          palette = \"Reds\",\n          thres.poly = 0) + \n   tm_text(\"ADM2_EN\", size = .7) +\n  tm_facets(by=\"SD_EN\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\nNon-Functional\n\ntm_shape(NGA_wp_SubDiv) +\n  tm_fill(\"wp_nonfunctional\",\n          style = \"equal\",\n          palette = \"Reds\",\n          thres.poly = 0) + \n   tm_text(\"ADM2_EN\", size = .7) +\n  tm_facets(by=\"SD_EN\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\n\n\n\nHowever, We know that water points are not equally distributed in space. I will tabulate the proportion of functional water points and the proportion of non-functional water points in secondary division.\n\nNGA_wp_SubDiv <- NGA_wp_SubDiv %>%\n  mutate(pct_functional = wp_functional/total_wp) %>%\n  mutate(pct_nonfunctional = wp_nonfunctional/total_wp)\n\nPlotting the map of the rate\n\nfunctional_choroplot <- tm_shape(NGA_wp_SubDiv) +\n  tm_fill(\"pct_functional\",\n          n = 5,\n          style = \"equal\",\n          palette = \"Purples\") +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_layout(main.title = \"Rate map of functional water point by Sub Division\", \n            legend.outside = TRUE)\n\n\nnonfunctional_choroplot <- tm_shape(NGA_wp_SubDiv) +\n  tm_fill(\"pct_nonfunctional\",\n          n = 5,\n          style = \"equal\",\n          palette = \"Purples\") +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_layout(main.title = \"Rate map of non-functional water point by Sub Division\",\n            legend.outside = TRUE)\n\n\ntmap_arrange(functional_choroplot, nonfunctional_choroplot, nrow = 2)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#functional-and-non-functional",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#functional-and-non-functional",
    "title": "Take-home_Ex01",
    "section": "Functional and Non-Functional",
    "text": "Functional and Non-Functional\n\nany variable with _f means it is Functional\nany variable with _nf means it is Non-Functional\n\n\nwp_osun_f <- as_Spatial(wp_functional)\n\n\nwp_osun_nf <- as_Spatial(wp_nonfunctional)\n\n\nwp_osun_f\n\nclass       : SpatialPointsDataFrame \nfeatures    : 2630 \nextent      : 177285.9, 290751, 343128.1, 450859.7  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \nvariables   : 13\nnames       : row_id,                                     X.source, X.water_source_clean, X.water_source_category,      X.water_tech_clean, X.facility_type, X.clean_country_name, X.clean_adm1,  ADM2_EN, X.install_year,   X.management_clean,              status_clean, X.subjective_quality \nmin values  :  36914, Federal Ministry of Water Resources, Nigeria,             Borehole,                  Spring,               Hand Pump,        Improved,              Nigeria,         Osun, aiyedade,           1917, Community Management,                Functional,   Acceptable quality \nmax values  : 471319,                                        GRID3,     Protected Spring,                    Well, Mechanized Pump - Solar,        Improved,              Nigeria,         Osun,   osogbo,           2015,    School Management, Functional but not in use,  No because of Taste \n\n\n\nwp_osun_nf\n\nclass       : SpatialPointsDataFrame \nfeatures    : 2179 \nextent      : 180539, 290616, 340054.1, 450780.1  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \nvariables   : 13\nnames       : row_id,                                     X.source, X.water_source_clean, X.water_source_category,      X.water_tech_clean, X.facility_type, X.clean_country_name, X.clean_adm1,  ADM2_EN, X.install_year,   X.management_clean,                     status_clean, X.subjective_quality \nmin values  :  34829, Federal Ministry of Water Resources, Nigeria,             Borehole,                  Spring,               Hand Pump,        Improved,              Nigeria,         Osun, aiyedade,           1967, Community Management,         Abandoned/Decommissioned,   Acceptable quality \nmax values  : 421239,                                        GRID3,     Protected Spring,                    Well, Mechanized Pump - Solar,        Improved,              Nigeria,         Osun,   osogbo,           2015,    School Management, Non-Functional due to dry season,  No because of Taste \n\n\nNext, convert sf to generic sp format of the water point.\n\nwp_sp_osun_f <- as(wp_osun_f, \"SpatialPoints\")\nwp_sp_osun_nf <- as(wp_osun_nf, \"SpatialPoints\")\n\n\nwp_sp_osun_f\n\nclass       : SpatialPoints \nfeatures    : 2630 \nextent      : 177285.9, 290751, 343128.1, 450859.7  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \n\n\n\nwp_sp_osun_nf\n\nclass       : SpatialPoints \nfeatures    : 2179 \nextent      : 180539, 290616, 340054.1, 450780.1  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \n\n\nNext, we will use as.ppp() function of spatstat to convert the spatial data into spatstat’s ppp object format.\n\nwp_ppp_osun_f <- as(wp_sp_osun_f, \"ppp\")\nwp_ppp_osun_f\n\nPlanar point pattern: 2630 points\nwindow: rectangle = [177285.9, 290750.96] x [343128.1, 450859.7] units\n\n\n\nwp_ppp_osun_nf <- as(wp_sp_osun_nf, \"ppp\")\nwp_ppp_osun_nf\n\nPlanar point pattern: 2179 points\nwindow: rectangle = [180538.96, 290616] x [340054.1, 450780.1] units\n\n\n\nsummary(wp_ppp_osun_f)\n\nPlanar point pattern:  2630 points\nAverage intensity 2.151545e-07 points per square unit\n\nCoordinates are given to 2 decimal places\ni.e. rounded to the nearest multiple of 0.01 units\n\nWindow: rectangle = [177285.9, 290750.96] x [343128.1, 450859.7] units\n                    (113500 x 107700 units)\nWindow area = 12223800000 square units\n\n\n\nsummary(wp_ppp_osun_nf)\n\nPlanar point pattern:  2179 points\nAverage intensity 1.787766e-07 points per square unit\n\nCoordinates are given to 2 decimal places\ni.e. rounded to the nearest multiple of 0.01 units\n\nWindow: rectangle = [180538.96, 290616] x [340054.1, 450780.1] units\n                    (110100 x 110700 units)\nWindow area = 12188400000 square units\n\n\nCheck for duplicates.\n\nany(duplicated(wp_ppp_osun_f))\n\n[1] FALSE\n\n\n\nany(duplicated(wp_ppp_osun_nf))\n\n[1] FALSE\n\n\nyay! there is no duplicates.\n\nPlot water point data by Status\n\ntmap_mode(\"view\")\ntm_shape(wp_osun_f) +\n  tm_dots(alph = 0.7, \n          size=0.01,\n          palette = \"Dark2\",\n          col=\"status_clean\") +\n  tm_view(set.zoom.limits = c(8,11))\n\n\n\n\n\n\n\ntmap_mode(\"view\")\ntm_shape(wp_osun_nf) +\n  tm_dots(alph = 0.7, \n          size=0.01,\n          palette = \"Dark2\",\n          col=\"status_clean\") +\n  tm_view(set.zoom.limits = c(8,11))\n\n\n\n\n\n\nNotice that there are some point that is outside of Osun, Nigeria area. This is because polygon data may contain geometrical inconsistencies such as self-intersections and overlaps. These inconsistencies must be removed to prevent problems in other spatstat functions. By default, polygon data will be repaired automatically using polygon-clipping code. The repair process may change the number of vertices in a polygon and the number of polygon components. With that, we will be using owin object in the next section to help us with that.\n\ntmap_mode('plot')"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#kernel-density-estimation-kde",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#kernel-density-estimation-kde",
    "title": "Take-home_Ex01",
    "section": "Kernel density estimation (KDE)",
    "text": "Kernel density estimation (KDE)\nKernel density estimation maps are considered best for location, size, shape and orientation of the hotspot.\nIn the hands-on excises, there are a few recommendation in using methods such as, bw.CvL(), bw.scott(), bw.ppl() or bw.diggle(). But before applying the methods, we learnt from our hands-on exe that we should rescale, so as to convert the meters to kilometers.\n\nkde_wpNGA_owin_f_bw.km <- rescale(wpNGA_owin_f, 1000, \"km\")\nkde_wpNGA_owin_nf_bw.km <- rescale(wpNGA_owin_nf, 1000, \"km\")\n\nIn spatstat, the functions bw.diggle(), bw.ppl(), and bw.scott() can be used to estimate the bandwidth according to difference methods. These functions run algorithms that aim to select an appropriate bandwith.\n\nFunctional\n\nbw.diggle(kde_wpNGA_owin_f_bw.km)\n\n    sigma \n0.2521687 \n\n\n\nbw.ppl(kde_wpNGA_owin_f_bw.km)\n\n    sigma \n0.9192953 \n\n\n\nbw.scott(kde_wpNGA_owin_f_bw.km)\n\n sigma.x  sigma.y \n6.447815 6.379868 \n\n\n\n\nNon-Functional\n\nbw.diggle(kde_wpNGA_owin_nf_bw.km)\n\n    sigma \n0.3082061 \n\n\n\nbw.ppl(kde_wpNGA_owin_nf_bw.km)\n\n    sigma \n0.9737385 \n\n\n\nbw.scott(kde_wpNGA_owin_nf_bw.km)\n\n sigma.x  sigma.y \n6.338388 7.018473 \n\n\nAs we can see the Diggle algorithm gives us a narrower bandwidth for both functional and non-functional water point. However, Baddeley et (2016) suggest the use of the bw.ppl() algorithm because in their experience it tends to produce the more appropriate values when the pattern consists predominantly of tight clusters.\nHence, in this take home, I decided to use ppl() for my analysis.\n\n\nkde_wpNGA_owin_bw_f <- density(kde_wpNGA_owin_f_bw.km,\n                              sigma=bw.ppl,\n                              edge=TRUE,\n                            kernel=\"gaussian\") \n\n\nkde_wpNGA_owin_bw_nf <- density(kde_wpNGA_owin_nf_bw.km,\n                              sigma=bw.ppl,\n                              edge=TRUE,\n                            kernel=\"gaussian\") \n\n\npar(mfrow=c(1,2))\nplot(kde_wpNGA_owin_bw_f)\nplot(kde_wpNGA_owin_bw_nf)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#st-order-spatial-point-patterns-analysis",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#st-order-spatial-point-patterns-analysis",
    "title": "Take-home_Ex01",
    "section": "1st order Spatial Point Patterns Analysis",
    "text": "1st order Spatial Point Patterns Analysis\nAs we are working with marked data, and we know that the values are categorical (different quality), we need to ensure that the marked field is of factor data type. However, as seen from the output, our subjective_quality field is of chr data type, not factor.\nBut before that, we need to extract #subjective_quality only in a spatialpoint dataframe format. to do that we can:\n\n#keeps <- c(\"#subjective_quality\")\n#wp_ifeeast = wp_functional[keeps]\n#wp_ifeeast_nf = wp_nonfunctional[keeps]\nwp_ifeeast<-subset(wp_functional, select = c(\"#subjective_quality\"))\nwp_ifeeast_nf<-subset(wp_nonfunctional, select = c(\"#subjective_quality\"))\n\n\n#wp_ifeeast <- select(wp_functional, )\n#wp_ifeeast_nf <- select(wp_nonfunctional, \"#subjective_quality\")\n\n\nwp_ifeeast_f <- as_Spatial(wp_ifeeast)\nwp_ifeeast_nfs <- as_Spatial(wp_ifeeast_nf)\n\n\nstr(wp_ifeeast_f)\n\nFormal class 'SpatialPointsDataFrame' [package \"sp\"] with 5 slots\n  ..@ data       :'data.frame': 2630 obs. of  1 variable:\n  .. ..$ X.subjective_quality: chr [1:2630] \"Acceptable quality\" \"Acceptable quality\" \"Acceptable quality\" \"No because of Colour\" ...\n  ..@ coords.nrs : num(0) \n  ..@ coords     : num [1:2630, 1:2] 212810 228799 270498 212202 259332 ...\n  .. ..- attr(*, \"dimnames\")=List of 2\n  .. .. ..$ : NULL\n  .. .. ..$ : chr [1:2] \"coords.x1\" \"coords.x2\"\n  ..@ bbox       : num [1:2, 1:2] 177286 343128 290751 450860\n  .. ..- attr(*, \"dimnames\")=List of 2\n  .. .. ..$ : chr [1:2] \"coords.x1\" \"coords.x2\"\n  .. .. ..$ : chr [1:2] \"min\" \"max\"\n  ..@ proj4string:Formal class 'CRS' [package \"sp\"] with 1 slot\n  .. .. ..@ projargs: chr \"+proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,12\"| __truncated__\n  .. .. ..$ comment: chr \"PROJCRS[\\\"Minna / Nigeria Mid Belt\\\",\\n    BASEGEOGCRS[\\\"Minna\\\",\\n        DATUM[\\\"Minna\\\",\\n            ELLIPS\"| __truncated__\n\n\n\nwp_ifeeast_f@data$X.subjective_quality <- as.factor(wp_ifeeast_f@data$X.subjective_quality)\nwp_ifeeast_nfs@data$X.subjective_quality <- as.factor(wp_ifeeast_nfs@data$X.subjective_quality)\n\n\nstr(wp_ifeeast_f)\n\nFormal class 'SpatialPointsDataFrame' [package \"sp\"] with 5 slots\n  ..@ data       :'data.frame': 2630 obs. of  1 variable:\n  .. ..$ X.subjective_quality: Factor w/ 4 levels \"Acceptable quality\",..: 1 1 1 2 1 1 1 2 1 1 ...\n  ..@ coords.nrs : num(0) \n  ..@ coords     : num [1:2630, 1:2] 212810 228799 270498 212202 259332 ...\n  .. ..- attr(*, \"dimnames\")=List of 2\n  .. .. ..$ : NULL\n  .. .. ..$ : chr [1:2] \"coords.x1\" \"coords.x2\"\n  ..@ bbox       : num [1:2, 1:2] 177286 343128 290751 450860\n  .. ..- attr(*, \"dimnames\")=List of 2\n  .. .. ..$ : chr [1:2] \"coords.x1\" \"coords.x2\"\n  .. .. ..$ : chr [1:2] \"min\" \"max\"\n  ..@ proj4string:Formal class 'CRS' [package \"sp\"] with 1 slot\n  .. .. ..@ projargs: chr \"+proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,12\"| __truncated__\n  .. .. ..$ comment: chr \"PROJCRS[\\\"Minna / Nigeria Mid Belt\\\",\\n    BASEGEOGCRS[\\\"Minna\\\",\\n        DATUM[\\\"Minna\\\",\\n            ELLIPS\"| __truncated__\n\n\n\nwp_ifeeast_ppp_f <- as.ppp(wp_ifeeast_f)\nwp_ifeeast_ppp_nf <- as.ppp(wp_ifeeast_nfs)\n\n\nPlot ppp chart with marked\nIn this section, I will be using ife east owin object. We will be looking at:\n\nife east quality of water in functional\nife east quality of water in non functional\n\n\nife_east_marked_ppp <- wp_ifeeast_ppp_f[ife_east_owin]\nife_east_marked_ppp_nf <- wp_ifeeast_ppp_nf[ife_east_owin]\n\n\npar(mfrow=c(1,2))\nplot(ife_east_marked_ppp, main = \"ife east F\", which.marks = \"X.subjective_quality\")\nplot(ife_east_marked_ppp_nf, main = \"ife east NF\", which.marks = \"X.subjective_quality\")\n\n\n\n\n\n\nplot((density(split(rescale(ife_east_marked_ppp, 1000)))))\n\n\n\n\n\nplot((density(split(rescale(ife_east_marked_ppp_nf, 1000)))))\n\n\n\n\nBased on the graphs above, acceptable quality and cause of taste seems to have a stronger complementary relationship with each other in ife east area for both functional and non functional area. However, Acceptable quality being the most strong ones due to the scale."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#nd-order-multi-type-point-pattern-analysis-cross-l-function",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#nd-order-multi-type-point-pattern-analysis-cross-l-function",
    "title": "Take-home_Ex01",
    "section": "2nd order multi type Point pattern Analysis: Cross L-function",
    "text": "2nd order multi type Point pattern Analysis: Cross L-function\nIn this section, hypothesis testing will be conducted utilising second-order statistics (L function), to assess if the spatial distribution of functional and non-functional water points are independent from each other.\nWe will be using cross L-function to look into the relationship.\n\nH0: The distribution of the acceptable quality and cause of taste in ife east are spatially independent.\nH1: The distribution of the acceptable quality and cause of taste in ife east are spatially not independent.\nConfidence level: 95%\nSignificance level: 0.05\n\nIn the below section, I will be comparing ife east functional and non functional (Acceptance quality and Cause of taste)\n\nife east functional\n\nplot(Lcross(ife_east_marked_ppp, \"Acceptable quality\", \"No because of Taste\"))\n\n\n\n\nThe plot above reveals that there is a sign that the marked spatial point events are not independent spatially.\nWe will conduct a randomisation test of the Random Labelling Property.\n\nshuffle<- expression(rlabel(ife_east_marked_ppp))\nmontef_Lcross_ifeeast <- envelope(ife_east_marked_ppp, Lcross, nsim=39, simulate=shuffle, i=\"Acceptable quality\", j=\"No because of Taste\", correction=\"border\")\n\nGenerating 39 simulations by evaluating expression  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\nplot(montef_Lcross_ifeeast, xlab=\"distance(m)\")\n\n\n\n\nThe plot above reveals that the are signs that the distribution of functional water point for acceptable quality and cause of taste are not independent spatially. Unfortunately, we failed to reject the null hypothesis because the L-cross line is within the envelop of the 95% confident interval.\n\n\nife east non functional\n\nplot(Lcross(ife_east_marked_ppp_nf, \"Acceptable quality\", \"No because of Taste\"))\n\n\n\n\n\nshuffle<- expression(rlabel(ife_east_marked_ppp_nf))\nmontenf_Lcross_ifeeast <- envelope(ife_east_marked_ppp_nf, Lcross, nsim=39, simulate=shuffle, i=\"Acceptable quality\", j=\"No because of Taste\", correction=\"border\")\n\nGenerating 39 simulations by evaluating expression  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\nplot(montenf_Lcross_ifeeast, xlab=\"distance(m)\")\n\n\n\n\nThe plot above reveals that the are signs that the distribution of non functional water point for acceptable quality and cause of taste are not independent spatially. Unfortunately, we failed to reject the null hypothesis because the L-cross line is within the envelop of the 95% confident interval."
  },
  {
    "objectID": "inclass_ex/inclass_ex06/inclass_ex06.html",
    "href": "inclass_ex/inclass_ex06/inclass_ex06.html",
    "title": "In-Class Ex06",
    "section": "",
    "text": "pacman::p_load(tidyverse, sf, tmap, spdep, sfdep)"
  },
  {
    "objectID": "inclass_ex/inclass_ex06/inclass_ex06.html#import-geospatial-data",
    "href": "inclass_ex/inclass_ex06/inclass_ex06.html#import-geospatial-data",
    "title": "In-Class Ex06",
    "section": "Import geospatial data",
    "text": "Import geospatial data\n\nhunan <- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\yifei-alpaca\\IS415-GAA\\inclass_ex\\inclass_ex06\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")"
  },
  {
    "objectID": "inclass_ex/inclass_ex06/inclass_ex06.html#join-data",
    "href": "inclass_ex/inclass_ex06/inclass_ex06.html#join-data",
    "title": "In-Class Ex06",
    "section": "Join data",
    "text": "Join data\nif want to retain the geometry, no geometry data should be on the left.\n\nhunan_GDPPC <- left_join(hunan,hunan2012)%>%\n  select(1:4, 7, 15)"
  },
  {
    "objectID": "inclass_ex/inclass_ex06/inclass_ex06.html#chloropleth-plot",
    "href": "inclass_ex/inclass_ex06/inclass_ex06.html#chloropleth-plot",
    "title": "In-Class Ex06",
    "section": "Chloropleth Plot",
    "text": "Chloropleth Plot\n\ntm_shape(hunan_GDPPC)+\n  tm_fill(\"GDPPC\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"GDPPC\") +\n  tm_layout(main.title = \"Distribution of GDP per capital by district\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2)"
  },
  {
    "objectID": "inclass_ex/inclass_ex06/inclass_ex06.html#computing-contiguity-spatial-weights",
    "href": "inclass_ex/inclass_ex06/inclass_ex06.html#computing-contiguity-spatial-weights",
    "title": "In-Class Ex06",
    "section": "Computing Contiguity Spatial Weights",
    "text": "Computing Contiguity Spatial Weights\nknowing the neighbour\n\ncn_queen <- hunan_GDPPC %>%\n  mutate(nb= st_contiguity(geometry),\n        .before = 1)\n\n\ncn_rook <- hunan_GDPPC %>% \n    mutate(nb= st_contiguity(geometry),\n           queen = FALSE,\n        .before = 1)"
  },
  {
    "objectID": "inclass_ex/inclass_ex06/inclass_ex06.html#contiguity-weights-queens-method",
    "href": "inclass_ex/inclass_ex06/inclass_ex06.html#contiguity-weights-queens-method",
    "title": "In-Class Ex06",
    "section": "Contiguity weights: Queen’s method",
    "text": "Contiguity weights: Queen’s method\ncombining the weights together with contiguity in a single code chunk.\n\ncn_queen <- hunan_GDPPC %>%\n  mutate(nb= st_contiguity(geometry),\n         wt = st_weights(nb),\n        .before = 1)"
  },
  {
    "objectID": "handson_ex/handson_ex07a/handson_ex07a.html",
    "href": "handson_ex/handson_ex07a/handson_ex07a.html",
    "title": "Hands-On Ex07a - Global Measures of Spatial Autocorrelation",
    "section": "",
    "text": "pacman::p_load(sf, spdep, tmap, tidyverse)\n\n\n\n\nhunan <- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\yifei-alpaca\\IS415-GAA\\handson_ex\\handson_ex07a\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\n\n\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\n\n\n\nIn the below code, we will be using left_join()\n\nhunan <- left_join(hunan,hunan2012) %>%\n  select(1:4, 7, 15)\n\n\n\n\n\nequal <- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile <- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)\n\n\n\n\n\n\n\nBefore we can compute the global spatial autocorrelation statistics, we need to construct a spatial weights of the study area.\n*** The spatial weights is used to define the neighbourhood relationships between the geographical units.\nIn the code chunk below, poly2nb() of spdep package is used to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries.\nNOTE! you can pass a “queen” argument that takes TRUE or FALSE as options. If you do not specify this argument the default is set to TRUE, that is, if you don’t specify queen = FALSE this function will return a list of first order neighbours using the Queen criteria.\n\nwm_q <- poly2nb(hunan, \n                queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe most connected area unit has 11 neighbours. There are two area units with only one neighbours.\n\n\n\nIn our case, each neighboring polygon will be assigned equal weight (style=“W”) for simplicity’s sake but note that other more robust options are available, notably style=“B”.\n\nrswm_q <- nb2listw(wm_q, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\n\n\n\n\n\n\nmoran.test(hunan$GDPPC, \n           listw=rswm_q, \n           zero.policy = TRUE, \n           na.action=na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  hunan$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\n\n\n\n\nset.seed(1234)\nbperm= moran.mc(hunan$GDPPC, \n                listw=rswm_q, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\n\n\n\nExamine the simulated Moran’s test stats in greater details.\n\nmean(bperm$res[1:999])\n\n[1] -0.01504572\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.004371574\n\n\n\nsummary(bperm$res[1:999])\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.18339 -0.06168 -0.02125 -0.01505  0.02611  0.27593 \n\n\n\nhist(bperm$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\") \n\n\n\n\nThe histogram shows a normal distribution range there are a few outliers which lies at around 0.3.\n\n\n\nperforming Geary’s C test\n\ngeary.test(hunan$GDPPC, listw=rswm_q)\n\n\n    Geary C test under randomisation\n\ndata:  hunan$GDPPC \nweights: rswm_q \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n\n\n\n\n\n\nset.seed(1234)\nbperm=geary.mc(hunan$GDPPC, \n               listw=rswm_q, \n               nsim=999)\nbperm\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan$GDPPC \nweights: rswm_q \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\n\n\n\n\nmean(bperm$res[1:999])\n\n[1] 1.004402\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.007436493\n\n\n\nsummary(bperm$res[1:999])\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.7142  0.9502  1.0052  1.0044  1.0595  1.2722 \n\n\n\nhist(bperm$res, freq=TRUE, breaks=20, xlab=\"Simulated Geary c\")\nabline(v=1, col=\"red\") \n\n\n\n\nAs compared with the Moran’s I histogram, both are normally distibuted. However, for Geary C, it is more standardized as there are no outliers at both ends.\n\n\n\n\nSpatial correlograms are great to examine patterns of spatial autocorrelation in your data or model residuals. They are very useful as an exploratory and descriptive tool.\n\n\n\nThe code below is used to compute a 6-lag spatial correlogram of GDPPC.\n\nMI_corr <- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"I\", \n                          style=\"W\")\nplot(MI_corr)\n\n\n\n\nBy plotting the output might not allow us to provide complete interpretation. This is because not all autocorrelation values are statistically significant. Hence, it is important for us to examine the full analysis report by printing out the analysis results as in the code chunk below.\n\nprint(MI_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\n\n\nGC_corr <- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"C\", \n                          style=\"W\")\nplot(GC_corr)\n\n\n\n\n\nprint(GC_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nMoran’s I and Geary’s c are well known tests for spatial autocorrelation. They represent two special cases of the general cross-product statistic that measures spatial autocorrelation. Moran’s I is produced by standardizing the spatial autocovariance by the variance of the data. Geary’s c uses the sum of the squared differences between pairs of data values as its measure of covariation. Both of these statistics depend on a spatial structural specification such as a spatial weights matrix or a distance related decline function."
  },
  {
    "objectID": "handson_ex/handson_ex07b/handson_ex07b.html",
    "href": "handson_ex/handson_ex07b/handson_ex07b.html",
    "title": "Hands-On Ex07b - Local Measures of Spatial Autocorrelation",
    "section": "",
    "text": "pacman::p_load(sf, spdep, tmap, tidyverse)\n\n\n\n\nhunan <- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\yifei-alpaca\\IS415-GAA\\handson_ex\\handson_ex07b\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\n\n\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\n\n\n\n\nhunan <- left_join(hunan,hunan2012) %>%\n  select(1:4, 7, 15)\n\nVisualising Regional Developement Indicator\n\nequal <- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile <- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)\n\n\n\n\n\n\n\n\nwm_q <- poly2nb(hunan, \n                queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\n\n\n\nrswm_q <- nb2listw(wm_q, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\n\n\n\n\nmoran.test(hunan$GDPPC, \n           listw=rswm_q, \n           zero.policy = TRUE, \n           na.action=na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  hunan$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\nComputing Monte Carlo Moran’s I\n\nset.seed(1234)\nbperm= moran.mc(hunan$GDPPC, \n                listw=rswm_q, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\n\nmean(bperm$res[1:999])\n\n[1] -0.01504572\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.004371574\n\n\n\nhist(bperm$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\") \n\n\n\n\n\n\n\n\ngeary.test(hunan$GDPPC, listw=rswm_q)\n\n\n    Geary C test under randomisation\n\ndata:  hunan$GDPPC \nweights: rswm_q \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n\n\nComputing Monte Carlo Geary’s C\n\nset.seed(1234)\nbperm=geary.mc(hunan$GDPPC, \n               listw=rswm_q, \n               nsim=999)\nbperm\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan$GDPPC \nweights: rswm_q \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\n\nmean(bperm$res[1:999])\n\n[1] 1.004402\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.007436493\n\n\n\nhist(bperm$res, freq=TRUE, breaks=20, xlab=\"Simulated Geary c\")\nabline(v=1, col=\"red\") \n\n\n\n\n\n\n\n\n\n\n\nMI_corr <- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"I\", \n                          style=\"W\")\nplot(MI_corr)\n\n\n\n\n\n\n\n\nGC_corr <- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"C\", \n                          style=\"W\")\nplot(GC_corr)\n\n\n\n\n\n\n\n\nLISA are statistics that evaluate the existence of clusters in the spatial arrangement of a given variable\nFor instance if we are studying cancer rates among census tracts in a given city local clusters in the rates mean that there are areas that have higher or lower rates than is to be expected by chance alone; that is, the values occurring are above or below those of a random distribution in space.\nNOTE!\nWill learn how to apply appropriate Local Indicators for Spatial Association (LISA), especially local Moran’I to detect cluster and/or outlier from GDP per capita 2012 of Hunan Province, PRC.\n\n\n\n\nfips <- order(hunan$County)\nlocalMI <- localmoran(hunan$GDPPC, rswm_q)\nhead(localMI)\n\n            Ii          E.Ii       Var.Ii        Z.Ii Pr(z != E(Ii))\n1 -0.001468468 -2.815006e-05 4.723841e-04 -0.06626904      0.9471636\n2  0.025878173 -6.061953e-04 1.016664e-02  0.26266425      0.7928094\n3 -0.011987646 -5.366648e-03 1.133362e-01 -0.01966705      0.9843090\n4  0.001022468 -2.404783e-07 5.105969e-06  0.45259801      0.6508382\n5  0.014814881 -6.829362e-05 1.449949e-03  0.39085814      0.6959021\n6 -0.038793829 -3.860263e-04 6.475559e-03 -0.47728835      0.6331568\n\n\nlocalmoran() function returns a matrix of values whose columns are:\n\nIi: the local Moran’s I statistics\nE.Ii: the expectation of local moran statistic under the randomisation hypothesis\nVar.Ii: the variance of local moran statistic under the randomisation hypothesis\nZ.Ii:the standard deviate of local moran statistic\nPr(): the p-value of local moran statistic\n\n\nprintCoefmat(data.frame(\n  localMI[fips,], \n  row.names=hunan$County[fips]),\n  check.names=FALSE)\n\n                       Ii        E.Ii      Var.Ii        Z.Ii Pr.z....E.Ii..\nAnhua         -2.2493e-02 -5.0048e-03  5.8235e-02 -7.2467e-02         0.9422\nAnren         -3.9932e-01 -7.0111e-03  7.0348e-02 -1.4791e+00         0.1391\nAnxiang       -1.4685e-03 -2.8150e-05  4.7238e-04 -6.6269e-02         0.9472\nBaojing        3.4737e-01 -5.0089e-03  8.3636e-02  1.2185e+00         0.2230\nChaling        2.0559e-02 -9.6812e-04  2.7711e-02  1.2932e-01         0.8971\nChangning     -2.9868e-05 -9.0010e-09  1.5105e-07 -7.6828e-02         0.9388\nChangsha       4.9022e+00 -2.1348e-01  2.3194e+00  3.3590e+00         0.0008\nChengbu        7.3725e-01 -1.0534e-02  2.2132e-01  1.5895e+00         0.1119\nChenxi         1.4544e-01 -2.8156e-03  4.7116e-02  6.8299e-01         0.4946\nCili           7.3176e-02 -1.6747e-03  4.7902e-02  3.4200e-01         0.7324\nDao            2.1420e-01 -2.0824e-03  4.4123e-02  1.0297e+00         0.3032\nDongan         1.5210e-01 -6.3485e-04  1.3471e-02  1.3159e+00         0.1882\nDongkou        5.2918e-01 -6.4461e-03  1.0748e-01  1.6338e+00         0.1023\nFenghuang      1.8013e-01 -6.2832e-03  1.3257e-01  5.1198e-01         0.6087\nGuidong       -5.9160e-01 -1.3086e-02  3.7003e-01 -9.5104e-01         0.3416\nGuiyang        1.8240e-01 -3.6908e-03  3.2610e-02  1.0305e+00         0.3028\nGuzhang        2.8466e-01 -8.5054e-03  1.4152e-01  7.7931e-01         0.4358\nHanshou        2.5878e-02 -6.0620e-04  1.0167e-02  2.6266e-01         0.7928\nHengdong       9.9964e-03 -4.9063e-04  6.7742e-03  1.2742e-01         0.8986\nHengnan        2.8064e-02 -3.2160e-04  3.7597e-03  4.6294e-01         0.6434\nHengshan      -5.8201e-03 -3.0437e-05  5.1076e-04 -2.5618e-01         0.7978\nHengyang       6.2997e-02 -1.3046e-03  2.1865e-02  4.3486e-01         0.6637\nHongjiang      1.8790e-01 -2.3019e-03  3.1725e-02  1.0678e+00         0.2856\nHuarong       -1.5389e-02 -1.8667e-03  8.1030e-02 -4.7503e-02         0.9621\nHuayuan        8.3772e-02 -8.5569e-04  2.4495e-02  5.4072e-01         0.5887\nHuitong        2.5997e-01 -5.2447e-03  1.1077e-01  7.9685e-01         0.4255\nJiahe         -1.2431e-01 -3.0550e-03  5.1111e-02 -5.3633e-01         0.5917\nJianghua       2.8651e-01 -3.8280e-03  8.0968e-02  1.0204e+00         0.3076\nJiangyong      2.4337e-01 -2.7082e-03  1.1746e-01  7.1800e-01         0.4728\nJingzhou       1.8270e-01 -8.5106e-04  2.4363e-02  1.1759e+00         0.2396\nJinshi        -1.1988e-02 -5.3666e-03  1.1334e-01 -1.9667e-02         0.9843\nJishou        -2.8680e-01 -2.6305e-03  4.4028e-02 -1.3543e+00         0.1756\nLanshan        6.3334e-02 -9.6365e-04  2.0441e-02  4.4972e-01         0.6529\nLeiyang        1.1581e-02 -1.4948e-04  2.5082e-03  2.3422e-01         0.8148\nLengshuijiang -1.7903e+00 -8.2129e-02  2.1598e+00 -1.1623e+00         0.2451\nLi             1.0225e-03 -2.4048e-07  5.1060e-06  4.5260e-01         0.6508\nLianyuan      -1.4672e-01 -1.8983e-03  1.9145e-02 -1.0467e+00         0.2952\nLiling         1.3774e+00 -1.5097e-02  4.2601e-01  2.1335e+00         0.0329\nLinli          1.4815e-02 -6.8294e-05  1.4499e-03  3.9086e-01         0.6959\nLinwu         -2.4621e-03 -9.0703e-06  1.9258e-04 -1.7676e-01         0.8597\nLinxiang       6.5904e-02 -2.9028e-03  2.5470e-01  1.3634e-01         0.8916\nLiuyang        3.3688e+00 -7.7502e-02  1.5180e+00  2.7972e+00         0.0052\nLonghui        8.0801e-01 -1.1377e-02  1.5538e-01  2.0787e+00         0.0376\nLongshan       7.5663e-01 -1.1100e-02  3.1449e-01  1.3690e+00         0.1710\nLuxi           1.8177e-01 -2.4855e-03  3.4249e-02  9.9561e-01         0.3194\nMayang         2.1852e-01 -5.8773e-03  9.8049e-02  7.1663e-01         0.4736\nMiluo          1.8704e+00 -1.6927e-02  2.7925e-01  3.5715e+00         0.0004\nNan           -9.5789e-03 -4.9497e-04  6.8341e-03 -1.0988e-01         0.9125\nNingxiang      1.5607e+00 -7.3878e-02  8.0012e-01  1.8274e+00         0.0676\nNingyuan       2.0910e-01 -7.0884e-03  8.2306e-02  7.5356e-01         0.4511\nPingjiang     -9.8964e-01 -2.6457e-03  5.6027e-02 -4.1698e+00         0.0000\nQidong         1.1806e-01 -2.1207e-03  2.4747e-02  7.6396e-01         0.4449\nQiyang         6.1966e-02 -7.3374e-04  8.5743e-03  6.7712e-01         0.4983\nRucheng       -3.6992e-01 -8.8999e-03  2.5272e-01 -7.1814e-01         0.4727\nSangzhi        2.5053e-01 -4.9470e-03  6.8000e-02  9.7972e-01         0.3272\nShaodong      -3.2659e-02 -3.6592e-05  5.0546e-04 -1.4510e+00         0.1468\nShaoshan       2.1223e+00 -5.0227e-02  1.3668e+00  1.8583e+00         0.0631\nShaoyang       5.9499e-01 -1.1253e-02  1.3012e-01  1.6807e+00         0.0928\nShimen        -3.8794e-02 -3.8603e-04  6.4756e-03 -4.7729e-01         0.6332\nShuangfeng     9.2835e-03 -2.2867e-03  3.1516e-02  6.5174e-02         0.9480\nShuangpai      8.0591e-02 -3.1366e-04  8.9838e-03  8.5358e-01         0.3933\nSuining        3.7585e-01 -3.5933e-03  4.1870e-02  1.8544e+00         0.0637\nTaojiang      -2.5394e-01 -1.2395e-03  1.4477e-02 -2.1002e+00         0.0357\nTaoyuan        1.4729e-02 -1.2039e-04  8.5103e-04  5.0903e-01         0.6107\nTongdao        4.6482e-01 -6.9870e-03  1.9879e-01  1.0582e+00         0.2900\nWangcheng      4.4220e+00 -1.1067e-01  1.3596e+00  3.8873e+00         0.0001\nWugang         7.1003e-01 -7.8144e-03  1.0710e-01  2.1935e+00         0.0283\nXiangtan       2.4530e-01 -3.6457e-04  3.2319e-03  4.3213e+00         0.0000\nXiangxiang     2.6271e-01 -1.2703e-03  2.1290e-02  1.8092e+00         0.0704\nXiangyin       5.4525e-01 -4.7442e-03  7.9236e-02  1.9539e+00         0.0507\nXinhua         1.1810e-01 -6.2649e-03  8.6001e-02  4.2409e-01         0.6715\nXinhuang       1.5725e-01 -4.1820e-03  3.6648e-01  2.6667e-01         0.7897\nXinning        6.8928e-01 -9.6674e-03  2.0328e-01  1.5502e+00         0.1211\nXinshao        5.7578e-02 -8.5932e-03  1.1769e-01  1.9289e-01         0.8470\nXintian       -7.4050e-03 -5.1493e-03  1.0877e-01 -6.8395e-03         0.9945\nXupu           3.2406e-01 -5.7468e-03  5.7735e-02  1.3726e+00         0.1699\nYanling       -6.9021e-02 -5.9211e-04  9.9306e-03 -6.8667e-01         0.4923\nYizhang       -2.6844e-01 -2.2463e-03  4.7588e-02 -1.2202e+00         0.2224\nYongshun       6.3064e-01 -1.1350e-02  1.8830e-01  1.4795e+00         0.1390\nYongxing       4.3411e-01 -9.0735e-03  1.5088e-01  1.1409e+00         0.2539\nYou            7.8750e-02 -7.2728e-03  1.2116e-01  2.4714e-01         0.8048\nYuanjiang      2.0004e-04 -1.7760e-04  2.9798e-03  6.9181e-03         0.9945\nYuanling       8.7298e-03 -2.2981e-06  2.3221e-05  1.8121e+00         0.0700\nYueyang        4.1189e-02 -1.9768e-04  2.3113e-03  8.6085e-01         0.3893\nZhijiang       1.0476e-01 -7.8123e-04  1.3100e-02  9.2214e-01         0.3565\nZhongfang     -2.2685e-01 -2.1455e-03  3.5927e-02 -1.1855e+00         0.2358\nZhuzhou        3.2864e-01 -5.2432e-04  7.2391e-03  3.8688e+00         0.0001\nZixing        -7.6849e-01 -8.8210e-02  9.4057e-01 -7.0144e-01         0.4830\n\n\n\n\n\nappend the local Moran’s I dataframe (i.e. localMI) onto hunan SpatialPolygonDataFrame\n\nhunan.localMI <- cbind(hunan,localMI) %>%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\n\n\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nThe choropleth shows the evidence for both positive and negative values in li.\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nFor effective interpretation, it is better to plot both the local Moran’s I values map and its corresponding p-values map next to each other.\n\nlocalMI.map <- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\", \n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\npvalue.map <- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)\n\n\n\n\n\n\n\nCreating LISA cluster map\nThe LISA Cluster Map shows the significant locations color coded by type of spatial autocorrelation\n\n\nPlotting Moran’s scatter plot ( this is v cool!)\n\nnci <- moran.plot(hunan$GDPPC, rswm_q,\n                  labels=as.character(hunan$County), \n                  xlab=\"GDPPC 2012\", \n                  ylab=\"Spatially Lag GDPPC 2012\")\n\n\n\n\nNotice that the plot is split in 4 quadrants. The top right corner belongs to areas that have high GDPPC and are surrounded by other areas that have the average level of GDPPC. This are the high-high locations in the lesson slide.\n\n\n\n\nMoran Scatter plot with standardised variable\n\nhunan$Z.GDPPC <- scale(hunan$GDPPC) %>% \n  as.vector \n\n\nnci2 <- moran.plot(hunan$Z.GDPPC, rswm_q,\n                   labels=as.character(hunan$County),\n                   xlab=\"z-GDPPC 2012\", \n                   ylab=\"Spatially Lag z-GDPPC 2012\")\n\n\n\n\n\n\n\n\nquadrant <- vector(mode=\"numeric\",length=nrow(localMI))\n\n\nhunan$lag_GDPPC <- lag.listw(rswm_q, hunan$GDPPC)\nDV <- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     \n\n\nLM_I <- localMI[,1] - mean(localMI[,1])    \n\nwe will set a statistical significance level for the local Moran.\n\nsignif <- 0.05       \n\n\nquadrant[DV <0 & LM_I>0] <- 1\nquadrant[DV >0 & LM_I<0] <- 2\nquadrant[DV <0 & LM_I<0] <- 3  \nquadrant[DV >0 & LM_I>0] <- 4      \n\nplace non-significant Moran in the category 0\n\nquadrant[localMI[,5]>signif] <- 0\n\n\n\n\n\nhunan.localMI$quadrant <- quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\n\n\n\nCombine the charts side by side\n\ngdppc <- qtm(hunan, \"GDPPC\")\n\nhunan.localMI$quadrant <- quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap <- tm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\ntmap_arrange(gdppc, LISAmap, \n             asp=1, ncol=2)\n\n\n\n\n\nlocalMI.map <- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\", \n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\npvalue.map <- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)\n\n\n\n\n\n\n\nThe Hot Spot Analysis tool calculates the Getis-Ord Gi* statistic (pronounced G-i-star) for each feature in a dataset. The resultant z-scores and p-values tell you where features with either high or low values cluster spatially.\nBeside detecting cluster and outliers, localised spatial statistics can be also used to detect hot spot and/or cold spot areas.\nThe term ‘hot spot’ has been used generically across disciplines to describe a region or value that is higher relative to its surroundings.\nA feature with a high value is interesting but may not be a statistically significant hot spot. To be a statistically significant hot spot, a feature will have a high value and be surrounded by other features with high values as well. The local sum for a feature and its neighbors is compared proportionally to the sum of all features; when the local sum is very different from the expected local sum, and when that difference is too large to be the result of random chance, a statistically significant z-score results.\n\n\nIt looks at neighbours within a defined proximity to identify where either high or low values clutser spatially.\n\n\n\nFirst, we need to define a new set of neighbours.\nThere are two type of distance-based proximity matrix, they are:\n\nfixed distance weight matrix; and\nadaptive distance weight matrix.\n\nWe need the coordinates in a separate data frame for this to work. To do this we will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length.\n\nlongitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\n\nlatitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\n\ncoords <- cbind(longitude, latitude)\n\n\n\n\nDetermine the cut-off distance\nFirstly, we need to determine the upper limit for distance band\n\n#coords <- coordinates(hunan)\nk1 <- knn2nb(knearneigh(coords))\nk1dists <- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\n\n\n\nwm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nnb2listw() is used to convert the nb object into spatial weights object.\n\nwm62_lw <- nb2listw(wm_d62, style = 'B')\nsummary(wm62_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \nLink number distribution:\n\n 1  2  3  4  5  6 \n 6 15 14 26 20  7 \n6 least connected regions:\n6 15 30 32 56 65 with 1 link\n7 most connected regions:\n21 28 35 45 50 52 82 with 6 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1   S2\nB 88 7744 324 648 5440\n\n\n\n\n\n\nIt is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.\n\nknn <- knn2nb(knearneigh(coords, k=8))\nknn\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\n\n\nknn_lw <- nb2listw(knn, style = 'B')\nsummary(knn_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n 8 \n88 \n88 least connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n88 most connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 704 1300 23014\n\n\n\n\n\n\nGi statistic using Fixed distance\n\nfips <- order(hunan$County)\ngi.fixed <- localG(hunan$GDPPC, wm62_lw)\ngi.fixed\n\n [1]  0.436075843 -0.265505650 -0.073033665  0.413017033  0.273070579\n [6] -0.377510776  2.863898821  2.794350420  5.216125401  0.228236603\n[11]  0.951035346 -0.536334231  0.176761556  1.195564020 -0.033020610\n[16]  1.378081093 -0.585756761 -0.419680565  0.258805141  0.012056111\n[21] -0.145716531 -0.027158687 -0.318615290 -0.748946051 -0.961700582\n[26] -0.796851342 -1.033949773 -0.460979158 -0.885240161 -0.266671512\n[31] -0.886168613 -0.855476971 -0.922143185 -1.162328599  0.735582222\n[36] -0.003358489 -0.967459309 -1.259299080 -1.452256513 -1.540671121\n[41] -1.395011407 -1.681505286 -1.314110709 -0.767944457 -0.192889342\n[46]  2.720804542  1.809191360 -1.218469473 -0.511984469 -0.834546363\n[51] -0.908179070 -1.541081516 -1.192199867 -1.075080164 -1.631075961\n[56] -0.743472246  0.418842387  0.832943753 -0.710289083 -0.449718820\n[61] -0.493238743 -1.083386776  0.042979051  0.008596093  0.136337469\n[66]  2.203411744  2.690329952  4.453703219 -0.340842743 -0.129318589\n[71]  0.737806634 -1.246912658  0.666667559  1.088613505 -0.985792573\n[76]  1.233609606 -0.487196415  1.626174042 -1.060416797  0.425361422\n[81] -0.837897118 -0.314565243  0.371456331  4.424392623 -0.109566928\n[86]  1.364597995 -1.029658605 -0.718000620\nattr(,\"cluster\")\n [1] Low  Low  High High High High High High High Low  Low  High Low  Low  Low \n[16] High High High High Low  High High Low  Low  High Low  Low  Low  Low  Low \n[31] Low  Low  Low  High Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low \n[46] High High Low  Low  Low  Low  High Low  Low  Low  Low  Low  High Low  Low \n[61] Low  Low  Low  High High High Low  High Low  Low  High Low  High High Low \n[76] High Low  Low  Low  Low  Low  Low  High High Low  High Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = hunan$GDPPC, listw = wm62_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\nThe Gi statistics is represented as a Z-score. Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters. We will join the Gi values to their corresponding hunan sf data frame.\nFor statistically significant positive z-scores, the larger the z-score is, the more intense the clustering of high values (hot spot). For statistically significant negative z-scores, the smaller the z-score is, the more intense the clustering of low values (cold spot). For more information about determining statistical significance and correcting for multiple testing and spatial dependency.\n\nhunan.gi <- cbind(hunan, as.matrix(gi.fixed)) %>%\n  rename(gstat_fixed = as.matrix.gi.fixed.)\n\nThe code chunk above performs three tasks. First, it convert the output vector (i.e. gi.fixed) into r matrix object by using as.matrix(). Next, cbind() is used to join hunan@data and gi.fixed matrix to produce a new SpatialPolygonDataFrame called hunan.gi. Lastly, the field name of the gi values is renamed to gstat_fixed by using rename().\n\n\n\ngdppc <- qtm(hunan, \"GDPPC\")\n\nGimap <-tm_shape(hunan.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, Gimap, asp=1, ncol=2)\n\n\n\n\n\n\n\n\nfips <- order(hunan$County)\ngi.adaptive <- localG(hunan$GDPPC, knn_lw)\nhunan.gi <- cbind(hunan, as.matrix(gi.adaptive)) %>%\n  rename(gstat_adaptive = as.matrix.gi.adaptive.)\n\n\n\n\n\ngdppc<- qtm(hunan, \"GDPPC\")\n\nGimap <- tm_shape(hunan.gi) + \n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"local Gi\") + \n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, \n             Gimap, \n             asp=1, \n             ncol=2)"
  },
  {
    "objectID": "inclass_ex/inclass_ex07/inclass_ex07.html",
    "href": "inclass_ex/inclass_ex07/inclass_ex07.html",
    "title": "Inclass-On Ex07",
    "section": "",
    "text": "pacman::p_load(tidyverse, sf, tmap, spdep, sfdep, plotly)\n\n\nhunan <- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\yifei-alpaca\\IS415-GAA\\inclass_ex\\inclass_ex07\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")"
  },
  {
    "objectID": "inclass_ex/inclass_ex07/inclass_ex07.html#relational-join",
    "href": "inclass_ex/inclass_ex07/inclass_ex07.html#relational-join",
    "title": "Inclass-On Ex07",
    "section": "Relational Join",
    "text": "Relational Join\n\nhunan_GDPPC <- left_join(hunan,hunan2012) %>%\n  select(1:4, 7, 15)\n\nPlot map\n\ntm_shape(hunan_GDPPC) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")"
  },
  {
    "objectID": "inclass_ex/inclass_ex07/inclass_ex07.html#deriving-contiguity-weights-queens-method",
    "href": "inclass_ex/inclass_ex07/inclass_ex07.html#deriving-contiguity-weights-queens-method",
    "title": "Inclass-On Ex07",
    "section": "Deriving contiguity weights Queen’s method",
    "text": "Deriving contiguity weights Queen’s method\n\nwm_q <- hunan_GDPPC %>%\n  mutate(nb= st_contiguity(geometry),\n         wt = st_weights(nb,\n                         style= \"W\"),\n        .before = 1)"
  },
  {
    "objectID": "inclass_ex/inclass_ex07/inclass_ex07.html#computing-global-moran-i",
    "href": "inclass_ex/inclass_ex07/inclass_ex07.html#computing-global-moran-i",
    "title": "Inclass-On Ex07",
    "section": "Computing Global Moran I",
    "text": "Computing Global Moran I\n\nmoranI <- global_moran(wm_q$GDPPC,\n                       wm_q$nb,\n                       wm_q$wt)"
  },
  {
    "objectID": "inclass_ex/inclass_ex07/inclass_ex07.html#performing-global-moran-i-test",
    "href": "inclass_ex/inclass_ex07/inclass_ex07.html#performing-global-moran-i-test",
    "title": "Inclass-On Ex07",
    "section": "Performing Global Moran I test",
    "text": "Performing Global Moran I test\n\nglobal_moran_test(wm_q$GDPPC,\n                  wm_q$nb,\n                  wm_q$wt\n                  )\n\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351"
  },
  {
    "objectID": "inclass_ex/inclass_ex07/inclass_ex07.html#performing-global-moran-i-permutation-test",
    "href": "inclass_ex/inclass_ex07/inclass_ex07.html#performing-global-moran-i-permutation-test",
    "title": "Inclass-On Ex07",
    "section": "Performing Global Moran I permutation test",
    "text": "Performing Global Moran I permutation test\n\nset.seed(1234)\nglobal_moran_perm(wm_q$GDPPC,\n                  wm_q$nb,\n                  wm_q$wt,\n                  nsim =99)\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.30075, observed rank = 100, p-value < 2.2e-16\nalternative hypothesis: two.sided"
  },
  {
    "objectID": "inclass_ex/inclass_ex07/inclass_ex07.html#computing-local-moran-i",
    "href": "inclass_ex/inclass_ex07/inclass_ex07.html#computing-local-moran-i",
    "title": "Inclass-On Ex07",
    "section": "Computing Local Moran I",
    "text": "Computing Local Moran I\nunnest() is important\nwe will use either mean or pysal\np_ii_sim = after running the simulation test (use after several trial to ensure stability)\n\nlisa <- wm_q %>% \n  mutate(local_moran= local_moran(\n    GDPPC,nb, wt,nsim = 99),\n          .before = 1) %>% \n      unnest(local_moran)\nlisa\n\nSimple feature collection with 88 features and 20 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n# A tibble: 88 × 21\n         ii        eii   var_ii    z_ii    p_ii p_ii_…¹ p_fol…² skewn…³ kurtosis\n      <dbl>      <dbl>    <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>    <dbl>\n 1 -0.00147  0.00177    4.18e-4 -0.158  0.874      0.82    0.41  -0.812  0.652  \n 2  0.0259   0.00641    1.05e-2  0.190  0.849      0.96    0.48  -1.09   1.89   \n 3 -0.0120  -0.0374     1.02e-1  0.0796 0.937      0.76    0.38   0.824  0.0461 \n 4  0.00102 -0.0000349  4.37e-6  0.506  0.613      0.64    0.32   1.04   1.61   \n 5  0.0148  -0.00340    1.65e-3  0.449  0.654      0.5     0.25   1.64   3.96   \n 6 -0.0388  -0.00339    5.45e-3 -0.480  0.631      0.82    0.41   0.614 -0.264  \n 7  3.37    -0.198      1.41e+0  3.00   0.00266    0.08    0.04   1.46   2.74   \n 8  1.56    -0.265      8.04e-1  2.04   0.0417     0.08    0.04   0.459 -0.519  \n 9  4.42     0.0450     1.79e+0  3.27   0.00108    0.02    0.01   0.746 -0.00582\n10 -0.399   -0.0505     8.59e-2 -1.19   0.234      0.28    0.14  -0.685  0.134  \n# … with 78 more rows, 12 more variables: mean <fct>, median <fct>,\n#   pysal <fct>, nb <nb>, wt <list>, NAME_2 <chr>, ID_3 <int>, NAME_3 <chr>,\n#   ENGTYPE_3 <chr>, County <chr>, GDPPC <dbl>, geometry <POLYGON [°]>, and\n#   abbreviated variable names ¹​p_ii_sim, ²​p_folded_sim, ³​skewness"
  },
  {
    "objectID": "inclass_ex/inclass_ex07/inclass_ex07.html#plot-mapping",
    "href": "inclass_ex/inclass_ex07/inclass_ex07.html#plot-mapping",
    "title": "Inclass-On Ex07",
    "section": "Plot mapping",
    "text": "Plot mapping\n\ntmap_mode(\"plot\")\ntm_shape(lisa) +\n  tm_fill(\"ii\") +\n  tm_borders(alpha= 0.5) +\n  tm_view(set.zoom.limits = c(6,8))\n\n\n\n\n\ntmap_mode(\"plot\")\ntm_shape(lisa) +\n  tm_fill(\"p_ii_sim\") +\n  tm_borders(alpha= 0.5)"
  },
  {
    "objectID": "inclass_ex/inclass_ex07/inclass_ex07.html#visualising-local-morans-i",
    "href": "inclass_ex/inclass_ex07/inclass_ex07.html#visualising-local-morans-i",
    "title": "Inclass-On Ex07",
    "section": "Visualising local Moran’s I",
    "text": "Visualising local Moran’s I\n\nlisa_sig <- lisa %>% \n  filter(p_ii <0.05)\ntmap_mode(\"plot\")\ntm_shape(lisa) +\n  tm_polygons() +\n  tm_borders(alpha= 0.5) +\ntm_shape(lisa_sig) +\n  tm_fill(\"mean\") +\n  tm_borders(alpha= 0.4)"
  },
  {
    "objectID": "inclass_ex/inclass_ex07/inclass_ex07.html#hot-and-cold-spot-analysis",
    "href": "inclass_ex/inclass_ex07/inclass_ex07.html#hot-and-cold-spot-analysis",
    "title": "Inclass-On Ex07",
    "section": "Hot and Cold spot analysis",
    "text": "Hot and Cold spot analysis\n\nHCSA <- wm_q %>% \n  mutate(local_Gi = local_gstar_perm(\n    GDPPC, nb, wt, nsim= 99),\n      .before =1) %>% \n  unnest(local_Gi)\nHCSA\n\nSimple feature collection with 88 features and 16 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n# A tibble: 88 × 17\n    gi_star   e_gi     var_gi  p_value p_sim p_fol…¹ skewn…² kurto…³ nb    wt   \n      <dbl>  <dbl>      <dbl>    <dbl> <dbl>   <dbl>   <dbl>   <dbl> <nb>  <lis>\n 1 -0.00567 0.0115 0.00000812  9.95e-1  0.82    0.41   1.03    1.23  <int> <dbl>\n 2 -0.235   0.0110 0.00000581  8.14e-1  1       0.5    0.912   1.05  <int> <dbl>\n 3  0.298   0.0114 0.00000776  7.65e-1  0.7     0.35   0.455  -0.732 <int> <dbl>\n 4  0.145   0.0121 0.0000111   8.84e-1  0.64    0.32   0.900   0.726 <int> <dbl>\n 5  0.356   0.0113 0.0000119   7.21e-1  0.64    0.32   1.08    1.31  <int> <dbl>\n 6 -0.480   0.0116 0.00000706  6.31e-1  0.82    0.41   0.364  -0.676 <int> <dbl>\n 7  3.66    0.0116 0.00000825  2.47e-4  0.02    0.01   0.909   0.664 <int> <dbl>\n 8  2.14    0.0116 0.00000714  3.26e-2  0.16    0.08   1.13    1.48  <int> <dbl>\n 9  4.55    0.0113 0.00000656  5.28e-6  0.02    0.01   1.36    4.14  <int> <dbl>\n10  1.61    0.0109 0.00000341  1.08e-1  0.18    0.09   0.269  -0.396 <int> <dbl>\n# … with 78 more rows, 7 more variables: NAME_2 <chr>, ID_3 <int>,\n#   NAME_3 <chr>, ENGTYPE_3 <chr>, County <chr>, GDPPC <dbl>,\n#   geometry <POLYGON [°]>, and abbreviated variable names ¹​p_folded_sim,\n#   ²​skewness, ³​kurtosis\n\n\nVisualising p-value of HCSA\n\ntmap_mode(\"plot\")\ntm_shape(HCSA) +\n  tm_fill(\"p_sim\") +\n  tm_borders(alpha= 0.5) +\n  tm_view(set.zoom.limits = c(6,8))"
  },
  {
    "objectID": "inclass_ex/inclass_ex07/inclass_ex07.html#emerging-hotspot-analysis",
    "href": "inclass_ex/inclass_ex07/inclass_ex07.html#emerging-hotspot-analysis",
    "title": "Inclass-On Ex07",
    "section": "Emerging hotspot analysis",
    "text": "Emerging hotspot analysis\ncan refer to megan’s work\ncan use plotly for interaction map\n\nGDPPC <- read_csv(\"data/aspatial/Hunan_GDPPC.csv\")\n\nthis code is to create an spatio-temporal cube\n\nGDPPC_st <- spacetime(GDPPC,hunan, \n                      .loc_col = \"County\",\n                      .time_col =\"Year\")\n\n\nGDPPC_nb <- GDPPC_st %>% \n  activate(\"geometry\") %>% \n  mutate(\n    nb = include_self(st_contiguity(geometry)),\n    wt = st_weights(nb)\n  ) %>% \n  set_nbs(\"nb\") %>%\n  set_wts(\"wt\")"
  },
  {
    "objectID": "inclass_ex/inclass_ex07/inclass_ex07.html#computing-gi",
    "href": "inclass_ex/inclass_ex07/inclass_ex07.html#computing-gi",
    "title": "Inclass-On Ex07",
    "section": "Computing Gi",
    "text": "Computing Gi\n\ngi_star <- GDPPC_nb %>% \n  group_by(Year) %>% \n  mutate(gi_star = local_gstar_perm(\n    GDPPC, nb, wt, nsim= 99)) %>% \n  tidyr::unnest(gi_star)\n\nif want to categories, we can combine all the value together and use emerging_hotspot_analysis() function."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "title": "Take Home Ex 2",
    "section": "",
    "text": "“The question is where are the sub-districts with relatively higher number of vaccination rate and how they changed over time.”"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#joining-the-attribute-data-and-geospatial-data",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#joining-the-attribute-data-and-geospatial-data",
    "title": "Take Home Ex 2",
    "section": "Joining the attribute data and geospatial data",
    "text": "Joining the attribute data and geospatial data\nBefore we can perform georelational join, one extra step is required to check which column can be join together. After looking at both dataset, we can join by KODE KELURAHAN in FY21_22Vaccine to CODE_DESA in jakarta dataset.\n\njakarta_vaccine <- left_join(jakarta, FY21_22Vaccine,\n                          by = c(\"KODE_DESA\" = \"KODE KELURAHAN\"))\n\nConvert to sf objects\n\njakarta_vaccine <- st_as_sf(jakarta_vaccine)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#section",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#section",
    "title": "Take Home Ex 2",
    "section": "",
    "text": "Visualizing EHSA\n\njakarta_ehsa <- left_join(jakarta, ehsa, by=\"DESA\")\n\n\nehsa_sig <- jakarta_ehsa  %>%\n  filter(p_value < 0.05)\ntmap_mode(\"plot\")\ntm_shape(jakarta_ehsa) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(ehsa_sig) +\n  tm_fill(\"classification\") + \n  tm_borders(alpha = 0.4)\n\n\n\n\nFrom the graph we can see that no pattern detected has fall in many of the sub district area of the hot/cold spot pattern. Second highest would be persistent cold spot, based on this link it refers to these location has been statistically significant cold spot for 90 percent of the time-step intervals with no discernible trend in the intensity of clustering of counts over time. Third highest would be persistent hot spot, which refers to a location that has been a statistically significant hot spot for 90 percent of the time-step intervals with no discernible trend in the intensity of clustering over time. Fourth would be sporadic hot spot, which means a statistically significant hot spot for the final time-step interval with a history of also being an on-again and off-again hot spot. Less than 90 percent of the time-step intervals have been statistically significant hot spots and none of the time-step intervals have been statistically significant cold spots.\nFor cold spot area, although they are not in the most populated area. However, there are a few strategies can be implemented by the government. Firstly, It is important to educate the public about the importance of getting vaccinated, the benefits of the vaccines, and dispelling any myths or misconceptions. This can be done through various channels such as social media, television, radio, and billboards. Next is setting up mobile vaccination sites in various districts can make it easier for people to get vaccinated, especially for those who have mobility issues or those who live far away from vaccination centers.\nWith that, thank you for this takehome2! :)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#population-choropleth-map",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#population-choropleth-map",
    "title": "Take Home Ex 2",
    "section": "Population choropleth map",
    "text": "Population choropleth map\nMaking the chart interactive so that we can see which sub district has the largest population and we can analyse it further in the below section.\n\ntmap_mode(\"view\")\n\nqtm(jakarta_vaccine, \n    fill = \"JUMLAH_PEN\",\n        text= \"KELURAHAN\",\n    text.size = 0.5)\n\n\n\n\n\ntmap_mode(\"plot\")\n\n\njul21total = data.frame(SubDistrict = jakarta_vaccine$KELURAHAN,\n                            Month =  ymd(\"2021-07-31\"),\n                           TotalDose = jakarta_vaccine$TotalV_jul21,\n                          population = jakarta_vaccine$JUMLAH_PEN,\n                           geometry = jakarta_vaccine$geometry\n                           )\n\naug21total <- data.frame(SubDistrict = jakarta_vaccine$KELURAHAN,\n                            Month = ymd(\"2021-08-31\"),\n                           TotalDose = jakarta_vaccine$TotalV_aug21,\n                         population = jakarta_vaccine$JUMLAH_PEN,\n                         geometry = jakarta_vaccine$geometry)\nsep21total <- data.frame(SubDistrict = jakarta_vaccine$KELURAHAN,\n                            Month = ymd(\"2021-09-30\"),\n                           TotalDose = jakarta_vaccine$TotalV_sep21,\n                         population = jakarta_vaccine$JUMLAH_PEN,\n                         geometry = jakarta_vaccine$geometry)\noct21total <- data.frame(SubDistrict = jakarta_vaccine$KELURAHAN,\n                            Month = ymd(\"2021-10-31\"),\n                           TotalDose = jakarta_vaccine$TotalV_oct21,\n                         population = jakarta_vaccine$JUMLAH_PEN,\n                         geometry = jakarta_vaccine$geometry)\nnov21total <- data.frame(SubDistrict = jakarta_vaccine$KELURAHAN,\n                            Month = ymd(\"2021-11-30\"),\n                           TotalDose = jakarta_vaccine$TotalV_nov21,\n                         population = jakarta_vaccine$JUMLAH_PEN,\n                         geometry = jakarta_vaccine$geometry)\ndec21total <- data.frame(SubDistrict = jakarta_vaccine$KELURAHAN,\n                            Month = ymd(\"2021-12-31\"),\n                           TotalDose = jakarta_vaccine$TotalV_dec21,\n                         population = jakarta_vaccine$JUMLAH_PEN,\n                         geometry = jakarta_vaccine$geometry)\n\njan22total <- data.frame(SubDistrict = jakarta_vaccine$KELURAHAN,\n                            Month = ymd(\"2022-01-31\"),\n                           TotalDose = jakarta_vaccine$TotalV_jan22,\n                         population = jakarta_vaccine$JUMLAH_PEN,\n                         geometry = jakarta_vaccine$geometry)\nfeb22total <- data.frame(SubDistrict = jakarta_vaccine$KELURAHAN,\n                            Month = ymd(\"2022-02-28\"),\n                           TotalDose = jakarta_vaccine$TotalV_feb22,\n                         population = jakarta_vaccine$JUMLAH_PEN,\n                         geometry = jakarta_vaccine$geometry)\nmar22total <- data.frame(SubDistrict = jakarta_vaccine$KELURAHAN,\n                            Month = ymd(\"2022-03-31\"),\n                           TotalDose = jakarta_vaccine$TotalV_mar22,\n                         population = jakarta_vaccine$JUMLAH_PEN,\n                         geometry = jakarta_vaccine$geometry)\napr22total <- data.frame(SubDistrict = jakarta_vaccine$KELURAHAN,\n                            Month = ymd(\"2022-04-30\"),\n                           TotalDose = jakarta_vaccine$TotalV_apr22,\n                         population = jakarta_vaccine$JUMLAH_PEN,\n                         geometry = jakarta_vaccine$geometry)\nmay22total <- data.frame(SubDistrict = jakarta_vaccine$KELURAHAN,\n                            Month = ymd(\"2022-05-31\"),\n                           TotalDose = jakarta_vaccine$TotalV_may22,\n                         population = jakarta_vaccine$JUMLAH_PEN,\n                         geometry = jakarta_vaccine$geometry)\njun22total <- data.frame(SubDistrict = jakarta_vaccine$KELURAHAN,\n                            Month = ymd(\"2022-06-30\"),\n                           TotalDose = jakarta_vaccine$TotalV_jun22,\n                         population = jakarta_vaccine$JUMLAH_PEN,\n                         geometry = jakarta_vaccine$geometry)\n\n\ntotal_vaccine <- rbind(jul21total, aug21total,sep21total,oct21total,nov21total,dec21total,jan22total,feb22total,mar22total,apr22total,may22total,jun22total)\n\nAs we know that there are 200 plus subdistrict,I decided to plot TOP 5 and BOTTOM 5 populated sub district.\n\nagg_tbl <- total_vaccine %>% group_by(SubDistrict) %>% \n  summarise(sum_pop = sum(population),\n            .groups = 'drop')\n\nagg_tbl <- agg_tbl[order(-agg_tbl$sum_pop),]\n\n\nbarplot(agg_tbl$sum_pop[1:5],names.arg=agg_tbl$SubDistrict[1:5], las=2)\n\n\n\n\n\nagg_tbl <- agg_tbl[order(agg_tbl$sum_pop),]\n\nbarplot(agg_tbl$sum_pop[1:5],names.arg=agg_tbl$SubDistrict[1:5], las=2)\n\n\n\n\nAs we can see from the graph above, the west side of Jakarta(Kapuk, Tegal Alur, Cekareng Timur) is more dense as compared to the rest of the region. This shows that there are more population in the west area followed by east area."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#visualizing-dose-1-to-3",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#visualizing-dose-1-to-3",
    "title": "Take Home Ex 2",
    "section": "Visualizing Dose 1 to 3",
    "text": "Visualizing Dose 1 to 3\nLets visualize our combined data in terms of total dose 1,2 and 3. A basic goal of a classification scheme is to group together similar observations and split apart observations that are substantially different.\nBased on the skewness below, we can see that all more positively skewed towards the right which means it is not appropriate to use equal and quartile methods.\n\nDose 1\n\nskewness(jakarta_vaccine$D1_jul21)\n\n[1] 0.9797892\n\nskewness(jakarta_vaccine$D1_aug21)\n\n[1] 1.085893\n\nskewness(jakarta_vaccine$D1_sep21)\n\n[1] 1.072417\n\nskewness(jakarta_vaccine$D1_oct21)\n\n[1] 1.060235\n\nskewness(jakarta_vaccine$D1_nov21)\n\n[1] 1.070041\n\nskewness(jakarta_vaccine$D1_dec21)\n\n[1] 1.08138\n\nskewness(jakarta_vaccine$D1_jan22)\n\n[1] 1.081787\n\nskewness(jakarta_vaccine$D1_feb22)\n\n[1] 1.083661\n\nskewness(jakarta_vaccine$D1_mar22)\n\n[1] 1.08686\n\nskewness(jakarta_vaccine$D1_apr22)\n\n[1] 1.087654\n\nskewness(jakarta_vaccine$D1_may22)\n\n[1] 1.087841\n\nskewness(jakarta_vaccine$D1_jun22)\n\n[1] 1.088754\n\n\n\n\nDose 2\n\nskewness(jakarta_vaccine$D2_jul21)\n\n[1] 0.8387278\n\nskewness(jakarta_vaccine$D2_aug21)\n\n[1] 0.9088209\n\nskewness(jakarta_vaccine$D2_sep21)\n\n[1] 1.015658\n\nskewness(jakarta_vaccine$D2_oct21)\n\n[1] 1.021767\n\nskewness(jakarta_vaccine$D2_nov21)\n\n[1] 1.023198\n\nskewness(jakarta_vaccine$D2_dec21)\n\n[1] 1.018473\n\nskewness(jakarta_vaccine$D2_jan22)\n\n[1] 1.018324\n\nskewness(jakarta_vaccine$D2_feb22)\n\n[1] 1.021613\n\nskewness(jakarta_vaccine$D2_mar22)\n\n[1] 1.019545\n\nskewness(jakarta_vaccine$D2_apr22)\n\n[1] 1.023047\n\nskewness(jakarta_vaccine$D2_may22)\n\n[1] 1.023062\n\nskewness(jakarta_vaccine$D2_jun22)\n\n[1] 1.024074\n\n\nIn the following code chunck, I will be using Natural Breaks (Jenks) method and will be classifying into 6 classes for my analysis. Natural Breaks are good for mapping values that are not evenly distributed on a histogram which is is suitable in our case.\nThe below code is a function to help us iterate multiple times, limiting the amount of large code.\n\njenks_plot <- function(df, varname) {\n  tm_shape(jakarta_vaccine) +\n    tm_polygons() +\n  tm_shape(df) +\n    tm_fill(varname, \n          n= 6,\n          style = \"jenks\", \n          title = \"No of people vaccinated\") +\n    tm_layout(main.title = varname,\n          main.title.position = \"center\",\n          main.title.size = 1.2,\n          legend.height = 0.45, \n          legend.width = 0.35,\n          frame = TRUE) +\n    tm_borders(alpha = 0.2)\n}\n\nLets visualize the data in months:\n\ntmap_mode(\"plot\")\ntmap_arrange(jenks_plot(jakarta_vaccine, \"D1_jul21\"),\n             jenks_plot(jakarta_vaccine, \"D2_jul21\"),\n             jenks_plot(jakarta_vaccine, \"D1_aug21\"),\n             jenks_plot(jakarta_vaccine, \"D2_aug21\"))\n\n\n\n\n\ntmap_arrange(jenks_plot(jakarta_vaccine, \"D1_sep21\"),\n             jenks_plot(jakarta_vaccine, \"D2_sep21\"),\n             jenks_plot(jakarta_vaccine, \"D1_oct21\"),\n             jenks_plot(jakarta_vaccine, \"D2_oct21\"))\n\n\n\n\n\ntmap_arrange(jenks_plot(jakarta_vaccine, \"D1_nov21\"),\n             jenks_plot(jakarta_vaccine, \"D2_nov21\"),\n             jenks_plot(jakarta_vaccine, \"D1_dec21\"),\n             jenks_plot(jakarta_vaccine, \"D2_dec21\"))\n\n\n\n\n\ntmap_arrange(jenks_plot(jakarta_vaccine, \"D1_jan22\"),\n             jenks_plot(jakarta_vaccine, \"D2_jan22\"),\n             jenks_plot(jakarta_vaccine, \"D1_feb22\"),\n             jenks_plot(jakarta_vaccine, \"D2_feb22\"))\n\n\n\n\n\ntmap_arrange(jenks_plot(jakarta_vaccine, \"D1_mar22\"),\n             jenks_plot(jakarta_vaccine, \"D2_mar22\"),\n             jenks_plot(jakarta_vaccine, \"D1_apr22\"),\n             jenks_plot(jakarta_vaccine, \"D2_apr22\"))\n\n\n\n\n\ntmap_arrange(jenks_plot(jakarta_vaccine, \"D1_may22\"),\n             jenks_plot(jakarta_vaccine, \"D2_may22\"),\n             jenks_plot(jakarta_vaccine, \"D1_jun22\"),\n             jenks_plot(jakarta_vaccine, \"D2_jun22\"))\n\n\n\n\nAs compare the charts above, it is a little hard to visualized. We will be using a gif maker tool to compile the images and see the difference. (this idea credits to our senior megan) ezgif\nThe GIF below is for Dose 1 by months. Based on the image, we can see that July 2021 is particularly more dense as compared to other months.\n\n\n\n\n\nThe GIF below shows Dose 2 by months. Based on the image, we can see that July and August 2021 is particularly more dense as compared to other months.\n\n\n\n\n\nThe GIF below shows Dose 3 by months. Based on the image, we can see that April to Jun 2022 are particularly more dense compared to other months.\n\n\n\n\n\nThe COVID-19 vaccination program in Jakarta, Indonesia started on January 13, 2021. The first doses of the vaccine were given to healthcare workers in several hospitals across Jakarta. The vaccination program was rolled out in phases, with priority given to healthcare workers, public service officers, and the elderly population. On 1 April 2021, the Ministry of Health announced the postponement of the vaccination schedule for the general public to June or July because of a vaccine shortage. On 14 July, the daily number of people vaccinated crossed two million mark for the first time. This could probably show that why July 2021 is more dense for Dose 1 and 2. We can see that Jakarta Barat which is the west area has a higher vaccination rate.\nWe can also see the difference in Dose 1 and Dose 2 rate, the threshold are much higher for dose 1 as compared to dose 2. One factor is vaccine hesitancy or a lack of access to the second dose. Some individuals may be hesitant to get the second dose due to concerns about side effects, while others may face barriers in accessing the vaccine, such as limited availability or difficulty scheduling appointments.\nFor Dose 3, we can see an interesting increase dense pattern from April 2022 to Jun 2022. As time goes by, studies have shown that vaccination can increase protection against COVID-19 and its variants, particularly among older adults and those with weakened immune systems. It can help increase the level of antibodies in the body, which can provide added protection against the virus. Thus, this probably drives residents to take booster shots. Another factor could be the government may have expanded the eligibility criteria for booster shots, allowing more people to receive them. Initially, the booster shots were provided to healthcare workers and elderly individuals, but the government may have opened up the booster program to other groups."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#visualizing-overall-vaccination-rate",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#visualizing-overall-vaccination-rate",
    "title": "Take Home Ex 2",
    "section": "Visualizing Overall Vaccination rate",
    "text": "Visualizing Overall Vaccination rate\nSince we have visualized the Dose pattern. Now let’s find out which area has the most number of people who have vaccinated. But before that, we can check the skewness of the data.\nLooks like mostly all are more positively skewed towards the right which means it is not appropriate to use equal methods.\n\nskewness(jakarta_vaccine$TotalV_jul21)\n\n[1] 0.8814528\n\nskewness(jakarta_vaccine$TotalV_aug21)\n\n[1] 1.005361\n\nskewness(jakarta_vaccine$TotalV_sep21)\n\n[1] 1.045357\n\nskewness(jakarta_vaccine$TotalV_oct21)\n\n[1] 1.041591\n\nskewness(jakarta_vaccine$TotalV_nov21)\n\n[1] 1.047173\n\nskewness(jakarta_vaccine$TotalV_dec21)\n\n[1] 1.050825\n\nskewness(jakarta_vaccine$TotalV_jan22)\n\n[1] 1.050915\n\nskewness(jakarta_vaccine$TotalV_feb22)\n\n[1] 1.053374\n\nskewness(jakarta_vaccine$TotalV_mar22)\n\n[1] 1.033162\n\nskewness(jakarta_vaccine$TotalV_apr22)\n\n[1] 1.0492\n\nskewness(jakarta_vaccine$TotalV_may22)\n\n[1] 1.044524\n\nskewness(jakarta_vaccine$TotalV_jun22)\n\n[1] 1.043669\n\n\nSimilar as Dose 1 to 3, we will use Jenks classification methods. Since we have created a function earlier, we can just map it accordingly.\n\ntmap_mode(\"plot\")\ntmap_arrange(jenks_plot(jakarta_vaccine, \"TotalV_jul21\"),\n             jenks_plot(jakarta_vaccine, \"TotalV_aug21\"),\n             jenks_plot(jakarta_vaccine, \"TotalV_sep21\"),\n             jenks_plot(jakarta_vaccine, \"TotalV_oct21\"))\n\n\n\n\n\ntmap_mode(\"plot\")\ntmap_arrange(jenks_plot(jakarta_vaccine, \"TotalV_nov21\"),\n             jenks_plot(jakarta_vaccine, \"TotalV_dec21\"),\n             jenks_plot(jakarta_vaccine, \"TotalV_jan22\"),\n             jenks_plot(jakarta_vaccine, \"TotalV_feb22\"))\n\n\n\n\n\ntmap_mode(\"plot\")\ntmap_arrange(jenks_plot(jakarta_vaccine, \"TotalV_mar22\"),\n             jenks_plot(jakarta_vaccine, \"TotalV_apr22\"),\n             jenks_plot(jakarta_vaccine, \"TotalV_may22\"),\n             jenks_plot(jakarta_vaccine, \"TotalV_jun22\"))\n\n\n\n\nLet us check for the sub-disrticts with the highest cases rate at the early and later stage.\nEarly stage:\n\njakarta_vaccine$KELURAHAN[which.max(jakarta_vaccine$TotalV_jul21)]\n\n[1] \"KAPUK\"\n\n\nLater stage:\n\njakarta_vaccine$KELURAHAN[which.max(jakarta_vaccine$TotalV_jun22)]\n\n[1] \"KAPUK\"\n\n\nBased on the which.max function, it gave us the same results that district KAPUK has the highest vaccination rate consistently.\nFor curiosity sake, lets find out which has the lowest vaccination rate.\n\njakarta_vaccine$KELURAHAN[which.min(jakarta_vaccine$TotalV_jul21)]\n\n[1] \"GAMBIR\"\n\n\n\njakarta_vaccine$KELURAHAN[which.min(jakarta_vaccine$TotalV_jun22)]\n\n[1] \"GAMBIR\"\n\n\nWith the results shown above, we can say that the higher the population, the higher the vaccination rate."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#mapping-local-gi-with-sig-0.5",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#mapping-local-gi-with-sig-0.5",
    "title": "Take Home Ex 2",
    "section": "Mapping Local Gi with sig < 0.5",
    "text": "Mapping Local Gi with sig < 0.5\n\ntmap_mode(\"plot\")\ntm_shape(jv.localGi_jun22) +\n    tm_polygons() +\n    tm_shape(jv.localGi_jun22 %>% filter(p_value < 0.05)) +\n    tm_fill(col= \"p_value\",\n             palette = \"Paired\") +\n    tm_borders(alpha = 0.4) +\n    tm_layout(main.title = paste(\"local Gi p-value <0.05 JUN22\"),\n              main.title.size = 1)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#create-functions-and-maps",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#create-functions-and-maps",
    "title": "Take Home Ex 2",
    "section": "Create functions and Maps",
    "text": "Create functions and Maps\n\nlocalgi_plot <- function(df, varname) {\n  tm_shape(df) +\n    tm_polygons() +\n  tm_shape(df %>% filter(p_value < 0.05)) +\n    tm_fill(varname, \n          palette = \"Paired\") +\n    tm_layout(\n          legend.height = 0.45, \n          legend.width = 0.35,\n          frame = TRUE) +\n    tm_borders(alpha = 0.2)\n}\n\n\ntmap_arrange(localgi_plot(jv.localGi_jul21, \"p_value\"),\n             localgi_plot(jv.localGi_aug21, \"p_value\"),\n             localgi_plot(jv.localGi_sep21, \"p_value\"),\n             localgi_plot(jv.localGi_oct21, \"p_value\")\n             )\n\n\n\n\n\ntmap_arrange(localgi_plot(jv.localGi_nov21, \"p_value\"),\n             localgi_plot(jv.localGi_dec21, \"p_value\"),\n             localgi_plot(jv.localGi_jan22, \"p_value\"),\n             localgi_plot(jv.localGi_feb22, \"p_value\")\n             )\n\n\n\n\n\ntmap_arrange(localgi_plot(jv.localGi_mar22, \"p_value\"),\n             localgi_plot(jv.localGi_apr22, \"p_value\"),\n             localgi_plot(jv.localGi_may22, \"p_value\"),\n             localgi_plot(jv.localGi_jun22, \"p_value\")\n             )\n\n\n\n\nLet’s put them in to a gif for better comparison\n\n\n\n\n\nA tmap above displays the total vaccine parameter by month estimates for vaccination rates in sub district that are statistically significant (p < 0.05); However, based on the tmap above, we can see that Jakarta Barat & Pusat the west & central area has been constantly very significant over a year. As for the grey area, it shows not significant."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#hot-and-cold-spot-for-local-gi",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#hot-and-cold-spot-for-local-gi",
    "title": "Take Home Ex 2",
    "section": "Hot and Cold Spot for Local Gi",
    "text": "Hot and Cold Spot for Local Gi\nIn this section, Hot and Cold spot will be prepared.\nThe term ‘hot spot’ has been used generically across disciplines to describe a region or value that is higher relative to its surroundings.\nIt looks at neighbours within a defined proximity to identify where either high or low values clutser spatially. Here, statistically significant hot-spots are recognised as areas of high values where other areas within a neighbourhood range also share high values too.\nLets re create a function for hot and cold spot.\n\nlocalgi_HCplot <- function(df, varname) {\n  tm_shape(df) +\n    tm_polygons() +\n  tm_shape(df %>% filter(p_value < 0.05)) +\n    tm_fill(varname,\n            palette = \"-RdBu\") +\n    tm_layout(\n          legend.height = 0.45, \n          legend.width = 0.35,\n          frame = TRUE) +\n    tm_borders(alpha = 0.2)\n}\n\n\ntmap_arrange(localgi_HCplot(jv.localGi_jul21, \"gi_star\"),\n             localgi_HCplot(jv.localGi_aug21, \"gi_star\"),\n             localgi_HCplot(jv.localGi_sep21, \"gi_star\"),\n             localgi_HCplot(jv.localGi_oct21, \"gi_star\")\n             )\n\n\n\n\n\ntmap_arrange(localgi_HCplot(jv.localGi_nov21, \"gi_star\"),\n             localgi_HCplot(jv.localGi_dec21, \"gi_star\"),\n             localgi_HCplot(jv.localGi_jan22, \"gi_star\"),\n             localgi_HCplot(jv.localGi_feb22, \"gi_star\")\n             )\n\n\n\n\n\ntmap_arrange(localgi_HCplot(jv.localGi_mar22, \"gi_star\"),\n             localgi_HCplot(jv.localGi_apr22, \"gi_star\"),\n             localgi_HCplot(jv.localGi_may22, \"gi_star\"),\n             localgi_HCplot(jv.localGi_jun22, \"gi_star\")\n             )\n\n\n\n\n\n\n\n\n\nIn general, for hot spot, we can see that its is generally at Jakarta Barat which is the WEST area across the year while the cold spot are usually at Jakarta Pusat which is the CENTER area. This findings also aligns wells with the population analysis and p-value analysis in the previous section. There is a higher hot spot at the west area is probably due to a larger population living there, whereas for a higher cold spot is probably because there is a lower population living there. However, one thing got me curious to find out more is that Jakarta is the capital of Indonesia which I believed is much more urbanized as compared to other region like Medan or Surabaya etc, yet, the the cold spot area is quite high as compared to the hot spot. Does it mean that the resident is very much not convinced in getting vaccinated? or does the government did not educate or promote enough on the benefits of getting vaccinated? or is there a shortage of dose around the area? Does it mean that other regions of Indonesia has a worse results? But, we also notice that at earlier stage, cold spot is more dense as compared to the later stage. This shows that as time goes by, the results has improve probably due to the wide spread of news that the vaccine has proved to be effective giving health benefits to the people."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#k-nearest-neighbours",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#k-nearest-neighbours",
    "title": "Take Home Ex 2",
    "section": "K nearest neighbours",
    "text": "K nearest neighbours\nNext we need to determine the cut-off distance. we need to determine the upper limit for distance band.\n\nfix_d <- dnearneigh(coords, 0, all.linked, longlat = FALSE)\nfix_d\n\nNeighbour list object:\nNumber of regions: 261 \nNumber of nonzero links: 3708 \nPercentage nonzero weights: 5.443255 \nAverage number of links: 14.2069 \n\n\nNext, we need to assign weights to each neighboring polygon. The function adds a weights list with values given by the coding scheme style chosen. B is the basic binary coding, W is row standardised (sums over all links to n), C is globally standardised (sums over all links to n), U is equal to C divided by the number of neighbours (sums over all links to unity), while S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. nb2listw() is used to convert the nb object into spatial weights object.\n\nfix_lw <- nb2listw(fix_d, style = 'W')\nsummary(fix_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 261 \nNumber of nonzero links: 3708 \nPercentage nonzero weights: 5.443255 \nAverage number of links: 14.2069 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 \n 4  4 12 15 14 14 17 12 15 13  8  5  3  7  9  7  7  7  7  3  7  8 11  8  8  4 \n27 28 29 30 31 32 33 \n 7  9  7  2  5  1  1 \n4 least connected regions:\n19 32 149 178 with 1 link\n1 most connected region:\n120 with 33 links\n\nWeights style: W \nWeights constants summary:\n    n    nn  S0       S1       S2\nW 261 68121 261 61.84481 1058.636\n\n\nThe summary report above shows that there are 261 area units in Jakarta. The most connected area unit has 33 neighbours which is in the West area of Jakarta.There are 4 area units with only one neighbours.\nIn the below code chuck, we can plot the area to show the neighbours based on the largest number of contiguities.\n\n#neighbour distance\ncards <- card(fix_d)\nmaxconts <- which(cards == max(cards))\nif(length(maxconts) > 1) maxconts <- maxconts[1]\nfg <- rep(\"grey\", length(cards))\nfg[maxconts] <- \"red\"\nfg[fix_d[[maxconts]]] <- \"green\"\nplot(st_geometry(jakarta), col=fg)\ntitle(main=\"Sub District with largest number of contiguities\")\n\n\n\n\nThe code below list all the neighbouring polygons of the ID we call. So for polygon ID : 2,39,152, 158 and 166 are all its neighbours. We can find out the name of the ID as well, lets check for the most connected region which is ID 120.\n\nfix_d[[120]]\n\n [1]   1   2   6   8  39  42  43  44  53 113 114 119 123 124 125 138 151 152 158\n[20] 159 160 161 163 164 165 166 167 168 169 170 172 180 181\n\n\n\njakarta_vaccine$KELURAHAN[120]\n\n[1] \"DURI PULO\"\n\n\nWe can also check all the list of 261 area neighbours\n\nstr(fix_d)\n\nList of 261\n $ : int [1:29] 2 5 6 7 8 39 44 119 120 121 ...\n $ : int [1:27] 1 6 7 8 35 39 44 119 120 121 ...\n $ : int [1:21] 4 5 9 10 11 12 17 109 110 115 ...\n $ : int [1:19] 3 9 10 11 12 17 109 110 115 116 ...\n $ : int [1:28] 1 3 6 7 8 9 10 14 17 109 ...\n $ : int [1:29] 1 2 5 7 8 9 10 34 35 39 ...\n $ : int [1:23] 1 2 5 6 34 35 36 39 44 117 ...\n $ : int [1:31] 1 2 5 6 39 44 53 119 120 121 ...\n $ : int [1:27] 3 4 5 6 10 13 14 17 109 110 ...\n $ : int [1:28] 3 4 5 6 9 11 12 14 17 109 ...\n $ : int [1:18] 3 4 10 12 17 110 115 116 118 127 ...\n $ : int [1:22] 3 4 10 11 17 89 90 91 111 126 ...\n $ : int [1:25] 9 14 16 59 60 62 63 64 65 90 ...\n $ : int [1:28] 5 9 10 13 16 17 60 63 64 65 ...\n $ : int [1:17] 16 52 53 60 113 124 125 132 134 135 ...\n $ : int [1:23] 13 14 15 53 60 61 62 65 123 124 ...\n $ : int [1:27] 3 4 5 9 10 11 12 14 109 110 ...\n $ : int [1:9] 21 24 26 27 28 31 33 112 150\n $ : int 177\n $ : int [1:3] 142 143 144\n $ : int [1:9] 18 24 26 27 28 31 33 112 150\n $ : int [1:6] 23 24 25 145 146 147\n $ : int [1:10] 22 24 25 27 28 112 145 146 147 154\n $ : int [1:9] 18 21 22 23 25 26 28 112 145\n $ : int [1:7] 22 23 24 28 112 145 147\n $ : int [1:7] 18 21 24 28 31 112 145\n $ : int [1:8] 18 21 23 28 33 112 148 154\n $ : int [1:10] 18 21 23 24 25 26 27 33 112 154\n $ : int [1:4] 31 33 149 150\n $ : int [1:11] 42 43 48 49 114 144 157 160 164 167 ...\n $ : int [1:6] 18 21 26 29 33 150\n $ : int 241\n $ : int [1:8] 18 21 27 28 29 31 148 150\n $ : int [1:14] 6 7 35 36 109 110 115 116 117 121 ...\n $ : int [1:14] 2 6 7 34 36 39 117 121 122 147 ...\n $ : int [1:7] 7 34 35 39 122 159 162\n $ : int [1:5] 153 154 220 226 239\n $ : int [1:3] 41 51 177\n $ : int [1:27] 1 2 6 7 8 35 36 44 119 120 ...\n $ : int [1:4] 41 143 156 157\n $ : int [1:3] 38 40 156\n $ : int [1:19] 30 43 48 49 50 53 113 114 120 124 ...\n $ : int [1:18] 30 42 44 48 49 113 114 120 144 160 ...\n $ : int [1:29] 1 2 6 7 8 39 43 114 119 120 ...\n $ : int [1:9] 46 47 52 57 75 134 174 182 200\n $ : int [1:11] 45 47 57 73 74 75 174 200 205 219 ...\n $ : int [1:7] 45 46 52 57 75 174 200\n $ : int [1:10] 30 42 43 49 50 113 160 161 174 182\n $ : int [1:8] 30 42 43 48 50 55 156 157\n $ : int [1:7] 42 48 49 55 57 174 186\n $ : int [1:3] 38 175 177\n $ : int [1:12] 15 45 47 53 113 134 135 174 179 180 ...\n $ : int [1:19] 8 15 16 42 52 113 120 123 124 125 ...\n $ : int [1:20] 58 59 89 90 91 94 95 96 111 173 ...\n $ : int [1:7] 49 50 56 155 156 157 186\n $ : int [1:5] 55 57 183 185 186\n $ : int [1:9] 45 46 47 50 56 174 183 185 219\n $ : int [1:19] 54 59 84 89 95 96 184 187 188 189 ...\n $ : int [1:25] 13 54 58 60 62 63 64 65 66 89 ...\n $ : int [1:23] 13 14 15 16 59 61 62 63 64 65 ...\n $ : int [1:18] 16 60 62 63 65 66 67 76 134 135 ...\n $ : int [1:19] 13 16 59 60 61 63 64 65 66 67 ...\n $ : int [1:22] 13 14 59 60 61 62 64 65 66 90 ...\n $ : int [1:23] 13 14 59 60 62 63 65 66 90 126 ...\n $ : int [1:24] 13 14 16 59 60 61 62 63 64 66 ...\n $ : int [1:21] 59 60 61 62 63 64 65 67 76 184 ...\n $ : int [1:17] 61 62 66 68 76 83 184 189 194 195 ...\n $ : int [1:11] 67 71 79 80 83 194 195 204 209 210 ...\n $ : int [1:5] 72 193 197 198 202\n $ : int [1:11] 71 83 84 97 99 100 193 197 230 232 ...\n $ : int [1:10] 68 70 83 84 99 193 195 197 211 212\n $ : int [1:8] 69 85 86 193 197 198 217 235\n $ : int [1:12] 46 74 75 80 81 82 201 204 205 206 ...\n $ : int [1:11] 46 73 75 82 200 201 205 206 218 219 ...\n $ : int [1:12] 45 46 47 73 74 134 200 201 205 206 ...\n $ : int [1:18] 60 61 62 66 67 134 135 136 192 194 ...\n $ : int [1:3] 198 202 203\n $ : int [1:8] 79 80 81 199 201 202 206 210\n $ : int [1:7] 68 78 80 81 198 202 210\n $ : int [1:14] 68 73 78 79 81 194 201 204 205 206 ...\n $ : int [1:11] 73 78 79 80 199 201 204 205 206 209 ...\n $ : int [1:5] 73 74 218 219 221\n $ : int [1:13] 67 68 70 71 84 99 193 194 195 211 ...\n $ : int [1:17] 58 70 71 83 99 100 106 184 187 211 ...\n $ : int [1:7] 72 86 101 215 217 235 236\n $ : int [1:4] 72 85 215 216\n $ : int [1:2] 215 216\n $ : int [1:3] 199 201 218\n $ : int [1:24] 12 54 58 59 90 91 94 95 96 111 ...\n $ : int [1:23] 12 13 14 54 59 63 64 65 89 91 ...\n $ : int [1:21] 12 54 59 89 90 96 111 126 127 130 ...\n $ : int [1:8] 93 103 111 173 220 225 238 239\n $ : int [1:8] 92 111 173 220 225 226 238 239\n $ : int [1:11] 54 89 95 96 103 111 173 188 228 229 ...\n $ : int [1:15] 54 58 89 94 96 111 173 187 188 190 ...\n $ : int [1:17] 54 58 89 91 94 95 111 173 188 190 ...\n $ : int [1:10] 70 98 99 105 217 230 231 232 234 254\n $ : int [1:10] 97 105 230 231 232 234 253 254 260 261\n $ : int [1:13] 70 71 83 84 97 100 193 197 217 230 ...\n  [list output truncated]\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:261] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language dnearneigh(x = coords, d1 = 0, d2 = all.linked, longlat = FALSE)\n - attr(*, \"dnn\")= num [1:2] 0 3454\n - attr(*, \"bounds\")= chr [1:2] \"GE\" \"LE\"\n - attr(*, \"nbtype\")= chr \"distance\"\n - attr(*, \"sym\")= logi TRUE"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#computing-local-gi-statistics",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#computing-local-gi-statistics",
    "title": "Take Home Ex 2",
    "section": "Computing Local Gi statistics",
    "text": "Computing Local Gi statistics\nUnlike global measures that summarize the overall spatial autocorrelation of the study area in one single value, local measures of spatial association identify local clusters (observations nearby have similar attribute values) or spatial outliers (observations nearby have different attribute values).\nIn the below section we will then check if we can find the sub district in which the relatively higher number of vaccination rate is significantly higher.\nwe will be using localG() functions to compute the Local Gi statistic.\nLocal Gi stats allows the detection of a local concentration of high and low values in neighboring objects and studies the statistical significance of that dependence.\nThe analysis will be conducted with the previous variable (jv_q) and the neighborhood matrix – Queen, row standardized (according to contiguity)\n\nset.seed(999)\nlocalgi_jul21 <- local_gstar_perm(jakarta_vaccine$TotalV_jul21, fix_d, fix_lw, nsim=39)\nlocalgi_aug21 <- local_gstar_perm(jakarta_vaccine$TotalV_aug21, fix_d, fix_lw, nsim=39)\nlocalgi_sep21 <- local_gstar_perm(jakarta_vaccine$TotalV_sep21, fix_d, fix_lw, nsim=39)\nlocalgi_oct21 <- local_gstar_perm(jakarta_vaccine$TotalV_oct21, fix_d, fix_lw, nsim=39)\nlocalgi_nov21 <- local_gstar_perm(jakarta_vaccine$TotalV_nov21, fix_d, fix_lw, nsim=39)\nlocalgi_dec21 <- local_gstar_perm(jakarta_vaccine$TotalV_dec21, fix_d, fix_lw, nsim=39)\nlocalgi_jan22 <- local_gstar_perm(jakarta_vaccine$TotalV_jan22, fix_d, fix_lw, nsim=39)\nlocalgi_feb22 <- local_gstar_perm(jakarta_vaccine$TotalV_feb22, fix_d, fix_lw, nsim=39)\nlocalgi_mar22 <- local_gstar_perm(jakarta_vaccine$TotalV_mar22, fix_d, fix_lw, nsim=39)\nlocalgi_apr22 <- local_gstar_perm(jakarta_vaccine$TotalV_apr22, fix_d, fix_lw, nsim=39)\nlocalgi_may22 <- local_gstar_perm(jakarta_vaccine$TotalV_may22, fix_d, fix_lw, nsim=39)\nlocalgi_jun22 <- local_gstar_perm(jakarta_vaccine$TotalV_jun22, fix_d, fix_lw, nsim=39)\n\n\njv.localGi_jul21 <- cbind(jakarta_vaccine,localgi_jul21)\njv.localGi_aug21 <- cbind(jakarta_vaccine,localgi_aug21)\njv.localGi_sep21 <- cbind(jakarta_vaccine,localgi_sep21)\njv.localGi_oct21 <- cbind(jakarta_vaccine,localgi_oct21)\njv.localGi_nov21 <- cbind(jakarta_vaccine,localgi_nov21)\njv.localGi_dec21 <- cbind(jakarta_vaccine,localgi_dec21)\njv.localGi_jan22 <- cbind(jakarta_vaccine,localgi_jan22)\njv.localGi_feb22 <- cbind(jakarta_vaccine,localgi_feb22)\njv.localGi_mar22 <- cbind(jakarta_vaccine,localgi_mar22)\njv.localGi_apr22 <- cbind(jakarta_vaccine,localgi_apr22)\njv.localGi_may22 <- cbind(jakarta_vaccine,localgi_may22)\njv.localGi_jun22 <- cbind(jakarta_vaccine,localgi_jun22)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#performing-emerging-hotspot-analysis",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#performing-emerging-hotspot-analysis",
    "title": "Take Home Ex 2",
    "section": "Performing Emerging Hotspot Analysis",
    "text": "Performing Emerging Hotspot Analysis\nLastly, we will be perfoming EHSA analysis by using emerging_hotspot_analysis().\n\nset.seed(999)\nehsa <- emerging_hotspot_analysis(\n  x = vacc_rate_st, \n  .var = \"gi_star\", \n  k = 1, \n  nsim = 99\n)\n\ncolnames(ehsa)[1] <- \"DESA\"\n\n\ng1 <- ggplot(data = ehsa,\n       aes(x = classification)) +\n  geom_bar()\nggplotly(g1)\n\n\n\n\n\nFigure above shows that no pattern detected class has the high numbers of count followed by persistent cold spot.\n\njakarta_ehsa <- left_join(jakarta, ehsa, by=\"DESA\")\n\n\nehsa_sig <- jakarta_ehsa  %>%\n  filter(p_value < 0.05)\ntmap_mode(\"plot\")\ntm_shape(jakarta_ehsa) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(ehsa_sig) +\n  tm_fill(\"classification\") + \n  tm_borders(alpha = 0.4)\n\n\n\n\nFrom the graph we can see that no pattern detected has fall in many of the sub district area of the hot/cold spot pattern. Second highest would be persistent cold spot, based on this link it refers to these location has been statistically significant cold spot for 90 percent of the time-step intervals with no discernible trend in the intensity of clustering of counts over time. Third highest would be persistent hot spot, which refers to a location that has been a statistically significant hot spot for 90 percent of the time-step intervals with no discernible trend in the intensity of clustering over time. Fourth would be sporadic hot spot, which means a statistically significant hot spot for the final time-step interval with a history of also being an on-again and off-again hot spot. Less than 90 percent of the time-step intervals have been statistically significant hot spots and none of the time-step intervals have been statistically significant cold spots.\nFor cold spot area, although they are not in the most populated area but there are in the mid populated range. With that, there are a few strategies can be implemented by the government. Firstly, It is important to educate the public about the importance of getting vaccinated, the benefits of the vaccines, and dispelling any myths or misconceptions. This can be done through various channels such as social media, television, radio, and billboards. Next is setting up mobile vaccination sites in various districts can make it easier for people to get vaccinated, especially for those who have mobility issues or those who live far away from vaccination centers.\nFor cold spot area, although they are not in the most populated area. However, there are a few strategies can be implemented by the government. Firstly, It is important to educate the public about the importance of getting vaccinated, the benefits of the vaccines, and dispelling any myths or misconceptions. This can be done through various channels such as social media, television, radio, and billboards. Next is setting up mobile vaccination sites in various districts can make it easier for people to get vaccinated, especially for those who have mobility issues or those who live far away from vaccination centers.\nWith that, thank you for this takehome2! :)"
  },
  {
    "objectID": "handson_ex/handson_ex09/handson_ex09.html",
    "href": "handson_ex/handson_ex09/handson_ex09.html",
    "title": "Handson Ex09 - GWR Method",
    "section": "",
    "text": "pacman::p_load(olsrr, corrplot, ggpubr, sf, spdep, GWmodel, tmap, tidyverse, gtsummary,readr,dplyr, ggplot2,patchwork, glue)"
  },
  {
    "objectID": "handson_ex/handson_ex09/handson_ex09.html#importing-geospatial-data",
    "href": "handson_ex/handson_ex09/handson_ex09.html#importing-geospatial-data",
    "title": "Handson Ex09 - GWR Method",
    "section": "Importing geospatial data",
    "text": "Importing geospatial data\n\nmpsz = st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\yifei-alpaca\\IS415-GAA\\handson_ex\\handson_ex09\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nUpdate CRS information\n\nmpsz_svy21 <- st_transform(mpsz, 3414)\n\ncheck the newly transformed data frame\n\nst_crs(mpsz_svy21)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nst_box() of sf package.\n\nIt obtains ranges of space and time coordinates.\nstbox returns a data.frame, with three columns representing x-, y- and time-coordinates, and two rows containing min and max values. bbox gives a matrix with coordinate min/max values, compatible to bbox\n\n\nst_bbox(mpsz_svy21) #view extent\n\n     xmin      ymin      xmax      ymax \n 2667.538 15748.721 56396.440 50256.334"
  },
  {
    "objectID": "handson_ex/handson_ex09/handson_ex09.html#importing-aspatial-data",
    "href": "handson_ex/handson_ex09/handson_ex09.html#importing-aspatial-data",
    "title": "Handson Ex09 - GWR Method",
    "section": "Importing aspatial data",
    "text": "Importing aspatial data\n\ncondo_resale = read_csv(\"data/aspatial/Condo_resale_2015.csv\")\n\nLets use glimpse() to display the data structure\n\nglimpse(condo_resale)\n\nRows: 1,436\nColumns: 23\n$ LATITUDE             <dbl> 1.287145, 1.328698, 1.313727, 1.308563, 1.321437,…\n$ LONGITUDE            <dbl> 103.7802, 103.8123, 103.7971, 103.8247, 103.9505,…\n$ POSTCODE             <dbl> 118635, 288420, 267833, 258380, 467169, 466472, 3…\n$ SELLING_PRICE        <dbl> 3000000, 3880000, 3325000, 4250000, 1400000, 1320…\n$ AREA_SQM             <dbl> 309, 290, 248, 127, 145, 139, 218, 141, 165, 168,…\n$ AGE                  <dbl> 30, 32, 33, 7, 28, 22, 24, 24, 27, 31, 17, 22, 6,…\n$ PROX_CBD             <dbl> 7.941259, 6.609797, 6.898000, 4.038861, 11.783402…\n$ PROX_CHILDCARE       <dbl> 0.16597932, 0.28027246, 0.42922669, 0.39473543, 0…\n$ PROX_ELDERLYCARE     <dbl> 2.5198118, 1.9333338, 0.5021395, 1.9910316, 1.121…\n$ PROX_URA_GROWTH_AREA <dbl> 6.618741, 7.505109, 6.463887, 4.906512, 6.410632,…\n$ PROX_HAWKER_MARKET   <dbl> 1.76542207, 0.54507614, 0.37789301, 1.68259969, 0…\n$ PROX_KINDERGARTEN    <dbl> 0.05835552, 0.61592412, 0.14120309, 0.38200076, 0…\n$ PROX_MRT             <dbl> 0.5607188, 0.6584461, 0.3053433, 0.6910183, 0.528…\n$ PROX_PARK            <dbl> 1.1710446, 0.1992269, 0.2779886, 0.9832843, 0.116…\n$ PROX_PRIMARY_SCH     <dbl> 1.6340256, 0.9747834, 1.4715016, 1.4546324, 0.709…\n$ PROX_TOP_PRIMARY_SCH <dbl> 3.3273195, 0.9747834, 1.4715016, 2.3006394, 0.709…\n$ PROX_SHOPPING_MALL   <dbl> 2.2102717, 2.9374279, 1.2256850, 0.3525671, 1.307…\n$ PROX_SUPERMARKET     <dbl> 0.9103958, 0.5900617, 0.4135583, 0.4162219, 0.581…\n$ PROX_BUS_STOP        <dbl> 0.10336166, 0.28673408, 0.28504777, 0.29872340, 0…\n$ NO_Of_UNITS          <dbl> 18, 20, 27, 30, 30, 31, 32, 32, 32, 32, 34, 34, 3…\n$ FAMILY_FRIENDLY      <dbl> 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0…\n$ FREEHOLD             <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1…\n$ LEASEHOLD_99YR       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n\n\nLets see the top few X and Y coordinates\n\nhead(condo_resale$LONGITUDE) #see the data in XCOORD column\n\n[1] 103.7802 103.8123 103.7971 103.8247 103.9505 103.9386\n\n\n\nhead(condo_resale$LATITUDE) #see the data in YCOORD column\n\n[1] 1.287145 1.328698 1.313727 1.308563 1.321437 1.314198\n\n\n\nsummary(condo_resale)\n\n    LATITUDE       LONGITUDE        POSTCODE      SELLING_PRICE     \n Min.   :1.240   Min.   :103.7   Min.   : 18965   Min.   :  540000  \n 1st Qu.:1.309   1st Qu.:103.8   1st Qu.:259849   1st Qu.: 1100000  \n Median :1.328   Median :103.8   Median :469298   Median : 1383222  \n Mean   :1.334   Mean   :103.8   Mean   :440439   Mean   : 1751211  \n 3rd Qu.:1.357   3rd Qu.:103.9   3rd Qu.:589486   3rd Qu.: 1950000  \n Max.   :1.454   Max.   :104.0   Max.   :828833   Max.   :18000000  \n    AREA_SQM          AGE           PROX_CBD       PROX_CHILDCARE    \n Min.   : 34.0   Min.   : 0.00   Min.   : 0.3869   Min.   :0.004927  \n 1st Qu.:103.0   1st Qu.: 5.00   1st Qu.: 5.5574   1st Qu.:0.174481  \n Median :121.0   Median :11.00   Median : 9.3567   Median :0.258135  \n Mean   :136.5   Mean   :12.14   Mean   : 9.3254   Mean   :0.326313  \n 3rd Qu.:156.0   3rd Qu.:18.00   3rd Qu.:12.6661   3rd Qu.:0.368293  \n Max.   :619.0   Max.   :37.00   Max.   :19.1804   Max.   :3.465726  \n PROX_ELDERLYCARE  PROX_URA_GROWTH_AREA PROX_HAWKER_MARKET PROX_KINDERGARTEN \n Min.   :0.05451   Min.   :0.2145       Min.   :0.05182    Min.   :0.004927  \n 1st Qu.:0.61254   1st Qu.:3.1643       1st Qu.:0.55245    1st Qu.:0.276345  \n Median :0.94179   Median :4.6186       Median :0.90842    Median :0.413385  \n Mean   :1.05351   Mean   :4.5981       Mean   :1.27987    Mean   :0.458903  \n 3rd Qu.:1.35122   3rd Qu.:5.7550       3rd Qu.:1.68578    3rd Qu.:0.578474  \n Max.   :3.94916   Max.   :9.1554       Max.   :5.37435    Max.   :2.229045  \n    PROX_MRT         PROX_PARK       PROX_PRIMARY_SCH  PROX_TOP_PRIMARY_SCH\n Min.   :0.05278   Min.   :0.02906   Min.   :0.07711   Min.   :0.07711     \n 1st Qu.:0.34646   1st Qu.:0.26211   1st Qu.:0.44024   1st Qu.:1.34451     \n Median :0.57430   Median :0.39926   Median :0.63505   Median :1.88213     \n Mean   :0.67316   Mean   :0.49802   Mean   :0.75471   Mean   :2.27347     \n 3rd Qu.:0.84844   3rd Qu.:0.65592   3rd Qu.:0.95104   3rd Qu.:2.90954     \n Max.   :3.48037   Max.   :2.16105   Max.   :3.92899   Max.   :6.74819     \n PROX_SHOPPING_MALL PROX_SUPERMARKET PROX_BUS_STOP       NO_Of_UNITS    \n Min.   :0.0000     Min.   :0.0000   Min.   :0.001595   Min.   :  18.0  \n 1st Qu.:0.5258     1st Qu.:0.3695   1st Qu.:0.098356   1st Qu.: 188.8  \n Median :0.9357     Median :0.5687   Median :0.151710   Median : 360.0  \n Mean   :1.0455     Mean   :0.6141   Mean   :0.193974   Mean   : 409.2  \n 3rd Qu.:1.3994     3rd Qu.:0.7862   3rd Qu.:0.220466   3rd Qu.: 590.0  \n Max.   :3.4774     Max.   :2.2441   Max.   :2.476639   Max.   :1703.0  \n FAMILY_FRIENDLY     FREEHOLD      LEASEHOLD_99YR  \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:0.0000  \n Median :0.0000   Median :0.0000   Median :0.0000  \n Mean   :0.4868   Mean   :0.4227   Mean   :0.4882  \n 3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:1.0000  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n\n\nNotice that Family_friendly, freehold and leasehold are in binary format, 1 means yes and 0 means no."
  },
  {
    "objectID": "handson_ex/handson_ex09/handson_ex09.html#converting-aspatial-data-frame-into-a-sf-object-point",
    "href": "handson_ex/handson_ex09/handson_ex09.html#converting-aspatial-data-frame-into-a-sf-object-point",
    "title": "Handson Ex09 - GWR Method",
    "section": "Converting aspatial data frame into a sf object (point)",
    "text": "Converting aspatial data frame into a sf object (point)\n\ncondo_resale.sf <- st_as_sf(condo_resale,\n                            coords = c(\"LONGITUDE\", \"LATITUDE\"),\n                            crs=4326) %>%\n  st_transform(crs=3414)\n\n\nhead(condo_resale.sf)\n\nSimple feature collection with 6 features and 21 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 22085.12 ymin: 29951.54 xmax: 41042.56 ymax: 34546.2\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 6 × 22\n  POSTCODE SELLI…¹ AREA_…²   AGE PROX_…³ PROX_…⁴ PROX_…⁵ PROX_…⁶ PROX_…⁷ PROX_…⁸\n     <dbl>   <dbl>   <dbl> <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n1   118635 3000000     309    30    7.94   0.166   2.52     6.62   1.77   0.0584\n2   288420 3880000     290    32    6.61   0.280   1.93     7.51   0.545  0.616 \n3   267833 3325000     248    33    6.90   0.429   0.502    6.46   0.378  0.141 \n4   258380 4250000     127     7    4.04   0.395   1.99     4.91   1.68   0.382 \n5   467169 1400000     145    28   11.8    0.119   1.12     6.41   0.565  0.461 \n6   466472 1320000     139    22   10.3    0.125   0.789    5.09   0.781  0.0994\n# … with 12 more variables: PROX_MRT <dbl>, PROX_PARK <dbl>,\n#   PROX_PRIMARY_SCH <dbl>, PROX_TOP_PRIMARY_SCH <dbl>,\n#   PROX_SHOPPING_MALL <dbl>, PROX_SUPERMARKET <dbl>, PROX_BUS_STOP <dbl>,\n#   NO_Of_UNITS <dbl>, FAMILY_FRIENDLY <dbl>, FREEHOLD <dbl>,\n#   LEASEHOLD_99YR <dbl>, geometry <POINT [m]>, and abbreviated variable names\n#   ¹​SELLING_PRICE, ²​AREA_SQM, ³​PROX_CBD, ⁴​PROX_CHILDCARE, ⁵​PROX_ELDERLYCARE,\n#   ⁶​PROX_URA_GROWTH_AREA, ⁷​PROX_HAWKER_MARKET, ⁸​PROX_KINDERGARTEN"
  },
  {
    "objectID": "handson_ex/handson_ex09/handson_ex09.html#section",
    "href": "handson_ex/handson_ex09/handson_ex09.html#section",
    "title": "Handson Ex09 - GWR Method",
    "section": "",
    "text": "EDA using statistical graphics\nnotice in the handson, the values of x axis is in scientific format. It is hard to interprest hence, by adding\noptions(scipen = 999)\nit would display the whole numerical value as shown below.\n\noptions(scipen = 999)\nggplot(data=condo_resale.sf, aes(x=`SELLING_PRICE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light green\") +\n   labs(title = \"Distribution of Resale Prices\",\n         x = \"Selling Prices\",\n         y = 'Frequency') \n\n\n\n\nBased on the chart above, we can infer that it reveals a right skewed distribution. This means that more condominium units were transacted at relative lower prices.\nStatistically, the skewed dsitribution can be normalised by using log transformation. The code chunk below is used to derive a new variable called LOG_SELLING_PRICE by using a log transformation on the variable SELLING_PRICE. It is performed using mutate() of dplyr package. By using log, it can help to standardize the data.\n\ncondo_resale.sf <- condo_resale.sf %>%\n  mutate(`LOG_SELLING_PRICE` = log(SELLING_PRICE))\n\n\noptions(scipen = 999)\nggplot(data=condo_resale.sf, aes(x=`LOG_SELLING_PRICE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")"
  },
  {
    "objectID": "handson_ex/handson_ex09/handson_ex09.html#multiple-histogram-plots-distribution-of-variables",
    "href": "handson_ex/handson_ex09/handson_ex09.html#multiple-histogram-plots-distribution-of-variables",
    "title": "Handson Ex09 - GWR Method",
    "section": "Multiple Histogram Plots distribution of variables",
    "text": "Multiple Histogram Plots distribution of variables\n\nAREA_SQM <- ggplot(data=condo_resale.sf, aes(x= `AREA_SQM`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nAGE <- ggplot(data=condo_resale.sf, aes(x= `AGE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CBD <- ggplot(data=condo_resale.sf, aes(x= `PROX_CBD`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CHILDCARE <- ggplot(data=condo_resale.sf, aes(x= `PROX_CHILDCARE`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_ELDERLYCARE <- ggplot(data=condo_resale.sf, aes(x= `PROX_ELDERLYCARE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_URA_GROWTH_AREA <- ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_URA_GROWTH_AREA`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_HAWKER_MARKET <- ggplot(data=condo_resale.sf, aes(x= `PROX_HAWKER_MARKET`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_KINDERGARTEN <- ggplot(data=condo_resale.sf, aes(x= `PROX_KINDERGARTEN`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_MRT <- ggplot(data=condo_resale.sf, aes(x= `PROX_MRT`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PARK <- ggplot(data=condo_resale.sf, aes(x= `PROX_PARK`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PRIMARY_SCH <- ggplot(data=condo_resale.sf, aes(x= `PROX_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_TOP_PRIMARY_SCH <- ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_TOP_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nDue to my laptop system, I am unable to run ggarrange, hence i’m using alternative method called “patchwork” to help with the graph arrangement.\n\nAREA_SQM + AGE + PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE+ \n          PROX_URA_GROWTH_AREA+ PROX_HAWKER_MARKET+ PROX_KINDERGARTEN+ PROX_MRT+\n          PROX_PARK+ PROX_PRIMARY_SCH+ PROX_TOP_PRIMARY_SCH+ plot_layout(ncol = 3)"
  },
  {
    "objectID": "handson_ex/handson_ex09/handson_ex09.html#drawing-statistical-point-map",
    "href": "handson_ex/handson_ex09/handson_ex09.html#drawing-statistical-point-map",
    "title": "Handson Ex09 - GWR Method",
    "section": "Drawing statistical point map",
    "text": "Drawing statistical point map\nwe want to reveal the geospatial distribution condominium resale prices in Singapore. The map will be prepared by using tmap package.\n\ntmap_mode(\"view\")\n\n\ntm_shape(mpsz_svy21)+\n  tm_polygons() +\ntm_shape(condo_resale.sf) +  \n  tm_dots(col = \"SELLING_PRICE\",\n          alpha = 0.6,\n          style=\"quantile\") + \n  tmap_options(check.and.fix = TRUE) +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\n\n\ntmap_mode(\"plot\")"
  },
  {
    "objectID": "handson_ex/handson_ex09/handson_ex09.html#simple-linear-regression-method",
    "href": "handson_ex/handson_ex09/handson_ex09.html#simple-linear-regression-method",
    "title": "Handson Ex09 - GWR Method",
    "section": "Simple Linear Regression Method",
    "text": "Simple Linear Regression Method\n\ncondo.slr <- lm(formula=SELLING_PRICE ~ AREA_SQM, data = condo_resale.sf)\n\nlm() would return an object class “lm” or for multiple responses of class c(“mlm”,“lm”)\nThe functions summary() and anova() can be used to obtain and print a summary and analysis of variance table of the results.\n\nsummary(condo.slr)\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM, data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3695815  -391764   -87517   258900 13503875 \n\nCoefficients:\n             Estimate Std. Error t value             Pr(>|t|)    \n(Intercept) -258121.1    63517.2  -4.064            0.0000509 ***\nAREA_SQM      14719.0      428.1  34.381 < 0.0000000000000002 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 942700 on 1434 degrees of freedom\nMultiple R-squared:  0.4518,    Adjusted R-squared:  0.4515 \nF-statistic:  1182 on 1 and 1434 DF,  p-value: < 0.00000000000000022\n\n\nThe R-squared of 0.4518 reveals that the simple regression model built is able to explain about 45% of the resale prices.\nSince p-value is much smaller than 0.0001, we will reject the null hypothesis that mean is a good estimator of SELLING_PRICE. This will allow us to infer that simple linear regression model above is a good estimator of SELLING_PRICE.\n\nanova(condo.slr)\n\nAnalysis of Variance Table\n\nResponse: SELLING_PRICE\n            Df           Sum Sq          Mean Sq F value                Pr(>F)\nAREA_SQM     1 1050376876745474 1050376876745474    1182 < 0.00000000000000022\nResiduals 1434 1274269843399565     888612164156                              \n             \nAREA_SQM  ***\nResiduals    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nThe Coefficients: section of the report reveals that the p-values of both the estimates of the Intercept and ARA_SQM are smaller than 0.001. In view of this, the null hypothesis of the B0 and B1 are equal to 0 will be rejected. As a results, we will be able to infer that the B0 and B1 are good parameter estimates.\nTo visualise the best fit curve on a scatterplot, we can incorporate lm() as a method function in ggplot’s geometry as shown in the code chunk below.\n\nggplot(data=condo_resale.sf,  \n       aes(x=`AREA_SQM`, y=`SELLING_PRICE`)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\n\n\n\nFigure above reveals that there are a few statistical outliers with relatively high selling prices."
  },
  {
    "objectID": "handson_ex/handson_ex09/handson_ex09.html#multiple-linear-regression-method",
    "href": "handson_ex/handson_ex09/handson_ex09.html#multiple-linear-regression-method",
    "title": "Handson Ex09 - GWR Method",
    "section": "Multiple Linear Regression Method",
    "text": "Multiple Linear Regression Method\nIn this section, we will be visualizing the relationship of the independent variables.\nBelow code chunk is a correlation matrix that is commonly used\n\ncorrplot(cor(condo_resale[, 5:23]), diag = FALSE, order = \"AOE\",\n         tl.pos = \"td\", tl.cex = 0.4, method = \"number\", type = \"upper\", number.cex=0.50)\n\n\n\n\nThere are four methods in corrplot (parameter order), named “AOE”, “FPC”, “hclust”, “alphabet”. In the code chunk above, AOE order is used. It orders the variables by using the angular order of the eigenvectors method suggested by Michael Friendly.\nFrom the scatterplot matrix, it is clear that Freehold is highly correlated to LEASE_99YEAR. In view of this, it is wiser to only include either one of them in the subsequent model building. As a result, LEASE_99YEAR is excluded in the subsequent model building."
  },
  {
    "objectID": "handson_ex/handson_ex09/handson_ex09.html#building-a-hedonic-pricing-model-using-multiple-linear-regression-method",
    "href": "handson_ex/handson_ex09/handson_ex09.html#building-a-hedonic-pricing-model-using-multiple-linear-regression-method",
    "title": "Handson Ex09 - GWR Method",
    "section": "Building a hedonic pricing model using multiple linear regression method",
    "text": "Building a hedonic pricing model using multiple linear regression method\nThe code below is using lm()\n\ncondo.mlr <- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE    + \n                  PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                  PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + PROX_KINDERGARTEN + \n                  PROX_MRT  + PROX_PARK + PROX_PRIMARY_SCH + \n                  PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n                  PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                data=condo_resale.sf)\nsummary(condo.mlr)\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + PROX_CHILDCARE + \n    PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + \n    PROX_KINDERGARTEN + PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + \n    PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3475964  -293923   -23069   241043 12260381 \n\nCoefficients:\n                       Estimate Std. Error t value             Pr(>|t|)    \n(Intercept)           481728.40  121441.01   3.967    0.000076494714281 ***\nAREA_SQM               12708.32     369.59  34.385 < 0.0000000000000002 ***\nAGE                   -24440.82    2763.16  -8.845 < 0.0000000000000002 ***\nPROX_CBD              -78669.78    6768.97 -11.622 < 0.0000000000000002 ***\nPROX_CHILDCARE       -351617.91  109467.25  -3.212              0.00135 ** \nPROX_ELDERLYCARE      171029.42   42110.51   4.061    0.000051440615323 ***\nPROX_URA_GROWTH_AREA   38474.53   12523.57   3.072              0.00217 ** \nPROX_HAWKER_MARKET     23746.10   29299.76   0.810              0.41782    \nPROX_KINDERGARTEN     147468.99   82668.87   1.784              0.07466 .  \nPROX_MRT             -314599.68   57947.44  -5.429    0.000000066573105 ***\nPROX_PARK             563280.50   66551.68   8.464 < 0.0000000000000002 ***\nPROX_PRIMARY_SCH      180186.08   65237.95   2.762              0.00582 ** \nPROX_TOP_PRIMARY_SCH    2280.04   20410.43   0.112              0.91107    \nPROX_SHOPPING_MALL   -206604.06   42840.60  -4.823    0.000001569612974 ***\nPROX_SUPERMARKET      -44991.80   77082.64  -0.584              0.55953    \nPROX_BUS_STOP         683121.35  138353.28   4.938    0.000000885077155 ***\nNO_Of_UNITS             -231.18      89.03  -2.597              0.00951 ** \nFAMILY_FRIENDLY       140340.77   47020.55   2.985              0.00289 ** \nFREEHOLD              359913.01   49220.22   7.312    0.000000000000438 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 755800 on 1417 degrees of freedom\nMultiple R-squared:  0.6518,    Adjusted R-squared:  0.6474 \nF-statistic: 147.4 on 18 and 1417 DF,  p-value: < 0.00000000000000022\n\n\nAfter we remove the LEASE_99YEAR we can see an improvement in the r-square from 45% to 65%. This shows that the multiple linear regression model built is able to explain about 65% of the resale prices."
  },
  {
    "objectID": "handson_ex/handson_ex09/handson_ex09.html#preparing-publication-quality-table-olsrr-method",
    "href": "handson_ex/handson_ex09/handson_ex09.html#preparing-publication-quality-table-olsrr-method",
    "title": "Handson Ex09 - GWR Method",
    "section": "Preparing Publication Quality Table: olsrr method",
    "text": "Preparing Publication Quality Table: olsrr method\nWe will revised the model by removing those variables which are not statistically significant.\n\ncondo.mlr1 <- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE + \n                   PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                   PROX_URA_GROWTH_AREA + PROX_MRT  + PROX_PARK + \n                   PROX_PRIMARY_SCH + PROX_SHOPPING_MALL    + PROX_BUS_STOP + \n                   NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD,\n                 data=condo_resale.sf)\nols_regress(condo.mlr1)\n\n                             Model Summary                               \n------------------------------------------------------------------------\nR                       0.807       RMSE                     755957.289 \nR-Squared               0.651       Coef. Var                    43.168 \nAdj. R-Squared          0.647       MSE                571471422208.591 \nPred R-Squared          0.638       MAE                      414819.628 \n------------------------------------------------------------------------\n RMSE: Root Mean Square Error \n MSE: Mean Square Error \n MAE: Mean Absolute Error \n\n                                           ANOVA                                            \n-------------------------------------------------------------------------------------------\n                            Sum of                                                         \n                           Squares          DF            Mean Square       F         Sig. \n-------------------------------------------------------------------------------------------\nRegression    1512585829186630.500          14    108041844941902.172    189.059    0.0000 \nResidual       812060890958408.500        1421       571471422208.591                      \nTotal         2324646720145039.000        1435                                             \n-------------------------------------------------------------------------------------------\n\n                                               Parameter Estimates                                                \n-----------------------------------------------------------------------------------------------------------------\n               model           Beta    Std. Error    Std. Beta       t        Sig           lower          upper \n-----------------------------------------------------------------------------------------------------------------\n         (Intercept)     527633.222    108183.223                   4.877    0.000     315417.244     739849.200 \n            AREA_SQM      12777.523       367.479        0.584     34.771    0.000      12056.663      13498.382 \n                 AGE     -24687.739      2754.845       -0.167     -8.962    0.000     -30091.739     -19283.740 \n            PROX_CBD     -77131.323      5763.125       -0.263    -13.384    0.000     -88436.469     -65826.176 \n      PROX_CHILDCARE    -318472.751    107959.512       -0.084     -2.950    0.003    -530249.889    -106695.613 \n    PROX_ELDERLYCARE     185575.623     39901.864        0.090      4.651    0.000     107302.737     263848.510 \nPROX_URA_GROWTH_AREA      39163.254     11754.829        0.060      3.332    0.001      16104.571      62221.936 \n            PROX_MRT    -294745.107     56916.367       -0.112     -5.179    0.000    -406394.234    -183095.980 \n           PROX_PARK     570504.807     65507.029        0.150      8.709    0.000     442003.938     699005.677 \n    PROX_PRIMARY_SCH     159856.136     60234.599        0.062      2.654    0.008      41697.849     278014.424 \n  PROX_SHOPPING_MALL    -220947.251     36561.832       -0.115     -6.043    0.000    -292668.213    -149226.288 \n       PROX_BUS_STOP     682482.221    134513.243        0.134      5.074    0.000     418616.359     946348.082 \n         NO_Of_UNITS       -245.480        87.947       -0.053     -2.791    0.005       -418.000        -72.961 \n     FAMILY_FRIENDLY     146307.576     46893.021        0.057      3.120    0.002      54320.593     238294.560 \n            FREEHOLD     350599.812     48506.485        0.136      7.228    0.000     255447.802     445751.821 \n-----------------------------------------------------------------------------------------------------------------\n\n\nR2 is the coefficient of determination that tells us that how much percentage variation independent variable can be explained by independent variable. Here, 80.7% variation in Y can be explained by X."
  },
  {
    "objectID": "handson_ex/handson_ex09/handson_ex09.html#preparing-publication-quality-table-gtsummary-method",
    "href": "handson_ex/handson_ex09/handson_ex09.html#preparing-publication-quality-table-gtsummary-method",
    "title": "Handson Ex09 - GWR Method",
    "section": "Preparing Publication Quality Table: gtsummary method",
    "text": "Preparing Publication Quality Table: gtsummary method\n\ntbl_regression(condo.mlr1, intercept = TRUE)\n\n\n\n\n\n  \n  \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n527,633\n315,417, 739,849\n<0.001\n    AREA_SQM\n12,778\n12,057, 13,498\n<0.001\n    AGE\n-24,688\n-30,092, -19,284\n<0.001\n    PROX_CBD\n-77,131\n-88,436, -65,826\n<0.001\n    PROX_CHILDCARE\n-318,473\n-530,250, -106,696\n0.003\n    PROX_ELDERLYCARE\n185,576\n107,303, 263,849\n<0.001\n    PROX_URA_GROWTH_AREA\n39,163\n16,105, 62,222\n<0.001\n    PROX_MRT\n-294,745\n-406,394, -183,096\n<0.001\n    PROX_PARK\n570,505\n442,004, 699,006\n<0.001\n    PROX_PRIMARY_SCH\n159,856\n41,698, 278,014\n0.008\n    PROX_SHOPPING_MALL\n-220,947\n-292,668, -149,226\n<0.001\n    PROX_BUS_STOP\n682,482\n418,616, 946,348\n<0.001\n    NO_Of_UNITS\n-245\n-418, -73\n0.005\n    FAMILY_FRIENDLY\n146,308\n54,321, 238,295\n0.002\n    FREEHOLD\n350,600\n255,448, 445,752\n<0.001\n  \n  \n  \n    \n      1 CI = Confidence Interval"
  },
  {
    "objectID": "handson_ex/handson_ex09/handson_ex09.html#checking-for-multicolinearity",
    "href": "handson_ex/handson_ex09/handson_ex09.html#checking-for-multicolinearity",
    "title": "Handson Ex09 - GWR Method",
    "section": "Checking for multicolinearity",
    "text": "Checking for multicolinearity\n\nols_vif_tol(condo.mlr1)\n\n              Variables Tolerance      VIF\n1              AREA_SQM 0.8728554 1.145665\n2                   AGE 0.7071275 1.414172\n3              PROX_CBD 0.6356147 1.573280\n4        PROX_CHILDCARE 0.3066019 3.261559\n5      PROX_ELDERLYCARE 0.6598479 1.515501\n6  PROX_URA_GROWTH_AREA 0.7510311 1.331503\n7              PROX_MRT 0.5236090 1.909822\n8             PROX_PARK 0.8279261 1.207837\n9      PROX_PRIMARY_SCH 0.4524628 2.210126\n10   PROX_SHOPPING_MALL 0.6738795 1.483945\n11        PROX_BUS_STOP 0.3514118 2.845664\n12          NO_Of_UNITS 0.6901036 1.449058\n13      FAMILY_FRIENDLY 0.7244157 1.380423\n14             FREEHOLD 0.6931163 1.442759\n\n\nVIF less than than 10, we can conclude that there are no sign of multicollinearity among the independent variables."
  },
  {
    "objectID": "handson_ex/handson_ex09/handson_ex09.html#test-for-non-linearity",
    "href": "handson_ex/handson_ex09/handson_ex09.html#test-for-non-linearity",
    "title": "Handson Ex09 - GWR Method",
    "section": "Test for Non-Linearity",
    "text": "Test for Non-Linearity\n\nols_plot_resid_fit(condo.mlr1)\n\n\n\n\nThe figure above shows that data point are scattered arounf the 0 line, we can conclude that the relationship between the dependent variable and independent variable are linear."
  },
  {
    "objectID": "handson_ex/handson_ex09/handson_ex09.html#test-for-normality-assumption",
    "href": "handson_ex/handson_ex09/handson_ex09.html#test-for-normality-assumption",
    "title": "Handson Ex09 - GWR Method",
    "section": "Test for Normality Assumption",
    "text": "Test for Normality Assumption\n\nols_plot_resid_hist(condo.mlr1)\n\n\n\n\nIt shows normal distribution.\n\nols_test_normality(condo.mlr1)\n\n-----------------------------------------------\n       Test             Statistic       pvalue  \n-----------------------------------------------\nShapiro-Wilk              0.6856         0.0000 \nKolmogorov-Smirnov        0.1366         0.0000 \nCramer-von Mises         121.0768        0.0000 \nAnderson-Darling         67.9551         0.0000 \n-----------------------------------------------\n\n\nThe p-value are way smaller than alpha value of 0.05. Thus, we reject the null hypothesis and infer that there is statistical evidence that the residual are not normally distributed."
  },
  {
    "objectID": "handson_ex/handson_ex09/handson_ex09.html#testing-for-spatial-autocorrelation",
    "href": "handson_ex/handson_ex09/handson_ex09.html#testing-for-spatial-autocorrelation",
    "title": "Handson Ex09 - GWR Method",
    "section": "Testing for Spatial Autocorrelation",
    "text": "Testing for Spatial Autocorrelation\nConverting sf data frame into a Spatial Point Data Frame.\n\nmlr.output <- as.data.frame(condo.mlr1$residuals)\n\n\ncondo_resale.res.sf <- cbind(condo_resale.sf, \n                        condo.mlr1$residuals) %>%\nrename(`MLR_RES` = `condo.mlr1.residuals`)\n\n\ncondo_resale.sp <- as_Spatial(condo_resale.res.sf)\ncondo_resale.sp\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1436 \nextent      : 14940.85, 43352.45, 24765.67, 48382.81  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 23\nnames       : POSTCODE, SELLING_PRICE, AREA_SQM, AGE,    PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN,    PROX_MRT,   PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH, PROX_SHOPPING_MALL, ... \nmin values  :    18965,        540000,       34,   0, 0.386916393,    0.004927023,      0.054508623,          0.214539508,        0.051817113,       0.004927023, 0.052779424, 0.029064164,      0.077106132,          0.077106132,                  0, ... \nmax values  :   828833,      18000000,      619,  37, 19.18042832,     3.46572633,      3.949157205,           9.15540001,        5.374348075,       2.229045366,  3.48037319,  2.16104919,      3.928989144,          6.748192062,        3.477433767, ... \n\n\n\ntmap_mode(\"view\")\n\n\ntm_shape(mpsz_svy21)+\n  tmap_options(check.and.fix = TRUE) +\n  tm_polygons(alpha = 0.4) +\ntm_shape(condo_resale.res.sf) +  \n  tm_dots(col = \"MLR_RES\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\n\n\ntmap_mode(\"plot\")"
  },
  {
    "objectID": "handson_ex/handson_ex09/handson_ex09.html#spatial-autocorrelation",
    "href": "handson_ex/handson_ex09/handson_ex09.html#spatial-autocorrelation",
    "title": "Handson Ex09 - GWR Method",
    "section": "Spatial Autocorrelation",
    "text": "Spatial Autocorrelation\n\nnb <- dnearneigh(coordinates(condo_resale.sp), 0, 1500, longlat = FALSE)\nsummary(nb)\n\nNeighbour list object:\nNumber of regions: 1436 \nNumber of nonzero links: 66266 \nPercentage nonzero weights: 3.213526 \nAverage number of links: 46.14624 \nLink number distribution:\n\n  1   3   5   7   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24 \n  3   3   9   4   3  15  10  19  17  45  19   5  14  29  19   6  35  45  18  47 \n 25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44 \n 16  43  22  26  21  11   9  23  22  13  16  25  21  37  16  18   8  21   4  12 \n 45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64 \n  8  36  18  14  14  43  11  12   8  13  12  13   4   5   6  12  11  20  29  33 \n 65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84 \n 15  20  10  14  15  15  11  16  12  10   8  19  12  14   9   8   4  13  11   6 \n 85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 \n  4   9   4   4   4   6   2  16   9   4   5   9   3   9   4   2   1   2   1   1 \n105 106 107 108 109 110 112 116 125 \n  1   5   9   2   1   3   1   1   1 \n3 least connected regions:\n193 194 277 with 1 link\n1 most connected region:\n285 with 125 links\n\n\ncomputing spatial weights\n\nnb_lw <- nb2listw(nb, style = 'W')\nsummary(nb_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 1436 \nNumber of nonzero links: 66266 \nPercentage nonzero weights: 3.213526 \nAverage number of links: 46.14624 \nLink number distribution:\n\n  1   3   5   7   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24 \n  3   3   9   4   3  15  10  19  17  45  19   5  14  29  19   6  35  45  18  47 \n 25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44 \n 16  43  22  26  21  11   9  23  22  13  16  25  21  37  16  18   8  21   4  12 \n 45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64 \n  8  36  18  14  14  43  11  12   8  13  12  13   4   5   6  12  11  20  29  33 \n 65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84 \n 15  20  10  14  15  15  11  16  12  10   8  19  12  14   9   8   4  13  11   6 \n 85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 \n  4   9   4   4   4   6   2  16   9   4   5   9   3   9   4   2   1   2   1   1 \n105 106 107 108 109 110 112 116 125 \n  1   5   9   2   1   3   1   1   1 \n3 least connected regions:\n193 194 277 with 1 link\n1 most connected region:\n285 with 125 links\n\nWeights style: W \nWeights constants summary:\n     n      nn   S0       S1       S2\nW 1436 2062096 1436 94.81916 5798.341\n\n\nresidual spatial autocorrelation\n\nlm.morantest(condo.mlr1, nb_lw)\n\n\n    Global Moran I for regression residuals\n\ndata:  \nmodel: lm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD +\nPROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_MRT +\nPROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP +\nNO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, data = condo_resale.sf)\nweights: nb_lw\n\nMoran I statistic standard deviate = 24.366, p-value <\n0.00000000000000022\nalternative hypothesis: greater\nsample estimates:\nObserved Moran I      Expectation         Variance \n   0.14388758039   -0.00548759352    0.00003758259"
  },
  {
    "objectID": "handson_ex/handson_ex09/handson_ex09.html#building-hedonic-pricing-models-using-gwmodel",
    "href": "handson_ex/handson_ex09/handson_ex09.html#building-hedonic-pricing-models-using-gwmodel",
    "title": "Handson Ex09 - GWR Method",
    "section": "Building Hedonic Pricing Models using GWmodel",
    "text": "Building Hedonic Pricing Models using GWmodel\n\nBuilding Fixed Bandwidth\nWhen the argument adaptive is set to FALSE indicates that we are interested to compute the fixed bandwidth.\n2 approaches: CV cross-validation approach and AIC corrected (AICc) approach\n\nbw.fixed <- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n                     PROX_CHILDCARE + PROX_ELDERLYCARE  + PROX_URA_GROWTH_AREA + \n                     PROX_MRT   + PROX_PARK + PROX_PRIMARY_SCH + \n                     PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS + \n                     FAMILY_FRIENDLY + FREEHOLD, \n                   data=condo_resale.sp, \n                   approach=\"CV\", \n                   kernel=\"gaussian\", \n                   adaptive=FALSE, \n                   longlat=FALSE)\n\nFixed bandwidth: 17660.96 CV score: 825911822102784 \nFixed bandwidth: 10917.26 CV score: 797045428603044 \nFixed bandwidth: 6749.419 CV score: 727327288217123 \nFixed bandwidth: 4173.553 CV score: 630000557301613 \nFixed bandwidth: 2581.58 CV score: 540495781061281 \nFixed bandwidth: 1597.687 CV score: 485751468826412 \nFixed bandwidth: 989.6077 CV score: 472243119301435 \nFixed bandwidth: 613.7939 CV score: 13782937640587258 \nFixed bandwidth: 1221.873 CV score: 477871653167387 \nFixed bandwidth: 846.0596 CV score: 479162862134549 \nFixed bandwidth: 1078.325 CV score: 475140559147296 \nFixed bandwidth: 934.7772 CV score: 472517998221988 \nFixed bandwidth: 1023.495 CV score: 473030451602862 \nFixed bandwidth: 968.6643 CV score: 472131662464349 \nFixed bandwidth: 955.7206 CV score: 472207171142149 \nFixed bandwidth: 976.6639 CV score: 472138689617517 \nFixed bandwidth: 963.7202 CV score: 472148360843731 \nFixed bandwidth: 971.7199 CV score: 472129280399246 \nFixed bandwidth: 973.6083 CV score: 472130919502945 \nFixed bandwidth: 970.5527 CV score: 472129460396064 \nFixed bandwidth: 972.4412 CV score: 472129623282981 \nFixed bandwidth: 971.2741 CV score: 472129241640866 \nFixed bandwidth: 970.9985 CV score: 472129284813527 \nFixed bandwidth: 971.4443 CV score: 472129240228113 \nFixed bandwidth: 971.5496 CV score: 472129250323808 \nFixed bandwidth: 971.3793 CV score: 472129239194007 \nFixed bandwidth: 971.3391 CV score: 472129239110127 \nFixed bandwidth: 971.3143 CV score: 472129239714645 \nFixed bandwidth: 971.3545 CV score: 472129239206061 \nFixed bandwidth: 971.3296 CV score: 472129239931915 \nFixed bandwidth: 971.345 CV score: 472129239140163 \nFixed bandwidth: 971.3355 CV score: 472129239682463 \nFixed bandwidth: 971.3413 CV score: 472129239743000 \nFixed bandwidth: 971.3377 CV score: 472129239211951 \nFixed bandwidth: 971.34 CV score: 472129238819463 \nFixed bandwidth: 971.3405 CV score: 472129238593600 \nFixed bandwidth: 971.3408 CV score: 472129238647549 \nFixed bandwidth: 971.3403 CV score: 472129239624159 \nFixed bandwidth: 971.3406 CV score: 472129239431032 \nFixed bandwidth: 971.3404 CV score: 472129239241864 \nFixed bandwidth: 971.3405 CV score: 472129239130278 \nFixed bandwidth: 971.3405 CV score: 472129238832217 \n\n\nthe recommended bandwidth is 971.3405 meters. Because CRS is in unit meters.\n\ngwr.fixed <- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n                         PROX_CHILDCARE + PROX_ELDERLYCARE  + PROX_URA_GROWTH_AREA + \n                         PROX_MRT   + PROX_PARK + PROX_PRIMARY_SCH + \n                         PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS + \n                         FAMILY_FRIENDLY + FREEHOLD, \n                       data=condo_resale.sp, \n                       bw=bw.fixed, \n                       kernel = 'gaussian', \n                       longlat = FALSE)\n\n\ngwr.fixed\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2023-03-08 20:49:42 \n   Call:\n   gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n    PROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + \n    PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sp, bw = bw.fixed, kernel = \"gaussian\", \n    longlat = FALSE)\n\n   Dependent (y) variable:  SELLING_PRICE\n   Independent variables:  AREA_SQM AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE PROX_URA_GROWTH_AREA PROX_MRT PROX_PARK PROX_PRIMARY_SCH PROX_SHOPPING_MALL PROX_BUS_STOP NO_Of_UNITS FAMILY_FRIENDLY FREEHOLD\n   Number of data points: 1436\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n     Min       1Q   Median       3Q      Max \n-3470778  -298119   -23481   248917 12234210 \n\n   Coefficients:\n                          Estimate Std. Error t value             Pr(>|t|)    \n   (Intercept)           527633.22  108183.22   4.877    0.000001196976743 ***\n   AREA_SQM               12777.52     367.48  34.771 < 0.0000000000000002 ***\n   AGE                   -24687.74    2754.84  -8.962 < 0.0000000000000002 ***\n   PROX_CBD              -77131.32    5763.12 -13.384 < 0.0000000000000002 ***\n   PROX_CHILDCARE       -318472.75  107959.51  -2.950             0.003231 ** \n   PROX_ELDERLYCARE      185575.62   39901.86   4.651    0.000003613932545 ***\n   PROX_URA_GROWTH_AREA   39163.25   11754.83   3.332             0.000885 ***\n   PROX_MRT             -294745.11   56916.37  -5.179    0.000000255705220 ***\n   PROX_PARK             570504.81   65507.03   8.709 < 0.0000000000000002 ***\n   PROX_PRIMARY_SCH      159856.14   60234.60   2.654             0.008046 ** \n   PROX_SHOPPING_MALL   -220947.25   36561.83  -6.043    0.000000001927962 ***\n   PROX_BUS_STOP         682482.22  134513.24   5.074    0.000000441637621 ***\n   NO_Of_UNITS             -245.48      87.95  -2.791             0.005321 ** \n   FAMILY_FRIENDLY       146307.58   46893.02   3.120             0.001845 ** \n   FREEHOLD              350599.81   48506.48   7.228    0.000000000000798 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 756000 on 1421 degrees of freedom\n   Multiple R-squared: 0.6507\n   Adjusted R-squared: 0.6472 \n   F-statistic: 189.1 on 14 and 1421 DF,  p-value: < 0.00000000000000022 \n   ***Extra Diagnostic information\n   Residual sum of squares: 812060890958409\n   Sigma(hat): 752522.9\n   AIC:  42966.76\n   AICc:  42967.14\n   BIC:  41731.39\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Fixed bandwidth: 971.3405 \n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                                 Min.       1st Qu.        Median       3rd Qu.\n   Intercept            -35988365.488   -519979.772    767797.337   1741234.306\n   AREA_SQM                  1000.279      5275.779      7474.018     12300.971\n   AGE                    -134749.495    -20813.274     -8626.003     -3778.370\n   PROX_CBD             -77047270.137   -236081.916    -83599.576     34645.575\n   PROX_CHILDCARE        -6009730.044   -336665.767    -97425.465    290074.489\n   PROX_ELDERLYCARE      -3500042.494   -159702.666     31970.528    195774.638\n   PROX_URA_GROWTH_AREA  -3016996.080    -82013.243     70749.084    226119.338\n   PROX_MRT              -3528172.076   -658357.468   -188328.987     36922.070\n   PROX_PARK             -1206240.925   -217315.894     35383.116    413347.109\n   PROX_PRIMARY_SCH     -22695027.094   -170660.239     48471.907    515551.477\n   PROX_SHOPPING_MALL    -7258466.404   -166844.608    -10516.913    159227.798\n   PROX_BUS_STOP         -1467612.709    -45206.664    376007.005   1166445.776\n   NO_Of_UNITS              -1317.036      -248.223       -30.846       254.959\n   FAMILY_FRIENDLY       -2274938.102   -111395.125      7621.363    161067.297\n   FREEHOLD              -9206722.091     38073.481    151694.047    375277.911\n                             Max.\n   Intercept            112793548\n   AREA_SQM                 21575\n   AGE                     434201\n   PROX_CBD               2704596\n   PROX_CHILDCARE         1654087\n   PROX_ELDERLYCARE      38867814\n   PROX_URA_GROWTH_AREA  78515730\n   PROX_MRT               3124316\n   PROX_PARK             18122425\n   PROX_PRIMARY_SCH       4637503\n   PROX_SHOPPING_MALL     1529952\n   PROX_BUS_STOP         11342182\n   NO_Of_UNITS              12907\n   FAMILY_FRIENDLY        1720744\n   FREEHOLD               6073636\n   ************************Diagnostic information*************************\n   Number of data points: 1436 \n   Effective number of parameters (2trace(S) - trace(S'S)): 438.3804 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 997.6196 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 42263.61 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 41632.36 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 42515.71 \n   Residual sum of squares: 253407016000767 \n   R-square value:  0.8909912 \n   Adjusted R-square value:  0.8430417 \n\n   ***********************************************************************\n   Program stops at: 2023-03-08 20:49:43 \n\n\nAICc: This is a measure of model performance and is helpful for comparing different regression models. Taking into account model complexity, the model with the lower AICc value provides a better fit to the observed data. AICc is not an absolute measure of goodness of fit but is useful for comparing models with different explanatory variables as long as they apply to the same dependent variable. If the AICc values for two models differ by more than 3, the model with the lower AICc is held to be better. Comparing the GWR AICc value to the OLS AICc value is one way to assess the benefits of moving from a global model (OLS) to a local regression model (GWR).\nSource from: https://desktop.arcgis.com/en/arcmap/latest/tools/spatial-statistics-toolbox/interpreting-gwr-results.htm\n\n\nBuilding Adaptive Bandwidth GWR Model\nadaptive argument has changed to TRUE.\n\nbw.adaptive <- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE  + \n                        PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE    + \n                        PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + \n                        PROX_PRIMARY_SCH + PROX_SHOPPING_MALL   + PROX_BUS_STOP + \n                        NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                      data=condo_resale.sp, \n                      approach=\"CV\", \n                      kernel=\"gaussian\", \n                      adaptive=TRUE, \n                      longlat=FALSE)\n\nAdaptive bandwidth: 895 CV score: 795240067952916 \nAdaptive bandwidth: 561 CV score: 766736415369131 \nAdaptive bandwidth: 354 CV score: 695345377846985 \nAdaptive bandwidth: 226 CV score: 615223032444228 \nAdaptive bandwidth: 147 CV score: 567437338972766 \nAdaptive bandwidth: 98 CV score: 542674453374480 \nAdaptive bandwidth: 68 CV score: 516811696101366 \nAdaptive bandwidth: 49 CV score: 485963124854344 \nAdaptive bandwidth: 37 CV score: 464651804391022 \nAdaptive bandwidth: 30 CV score: 442208792500332 \nAdaptive bandwidth: 25 CV score: 443081571798103 \nAdaptive bandwidth: 32 CV score: 450560182354864 \nAdaptive bandwidth: 27 CV score: 446217190611572 \nAdaptive bandwidth: 30 CV score: 442208792500332 \n\n\n30 is the recommended data point to be used.\n\ngwr.adaptive <- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + \n                            PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE + \n                            PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + \n                            PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP + \n                            NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                          data=condo_resale.sp, bw=bw.adaptive, \n                          kernel = 'gaussian', \n                          adaptive=TRUE, \n                          longlat = FALSE)\n\n\ngwr.adaptive\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2023-03-08 20:49:52 \n   Call:\n   gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + \n    PROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + \n    PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sp, bw = bw.adaptive, kernel = \"gaussian\", \n    adaptive = TRUE, longlat = FALSE)\n\n   Dependent (y) variable:  SELLING_PRICE\n   Independent variables:  AREA_SQM AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE PROX_URA_GROWTH_AREA PROX_MRT PROX_PARK PROX_PRIMARY_SCH PROX_SHOPPING_MALL PROX_BUS_STOP NO_Of_UNITS FAMILY_FRIENDLY FREEHOLD\n   Number of data points: 1436\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n     Min       1Q   Median       3Q      Max \n-3470778  -298119   -23481   248917 12234210 \n\n   Coefficients:\n                          Estimate Std. Error t value             Pr(>|t|)    \n   (Intercept)           527633.22  108183.22   4.877    0.000001196976743 ***\n   AREA_SQM               12777.52     367.48  34.771 < 0.0000000000000002 ***\n   AGE                   -24687.74    2754.84  -8.962 < 0.0000000000000002 ***\n   PROX_CBD              -77131.32    5763.12 -13.384 < 0.0000000000000002 ***\n   PROX_CHILDCARE       -318472.75  107959.51  -2.950             0.003231 ** \n   PROX_ELDERLYCARE      185575.62   39901.86   4.651    0.000003613932545 ***\n   PROX_URA_GROWTH_AREA   39163.25   11754.83   3.332             0.000885 ***\n   PROX_MRT             -294745.11   56916.37  -5.179    0.000000255705220 ***\n   PROX_PARK             570504.81   65507.03   8.709 < 0.0000000000000002 ***\n   PROX_PRIMARY_SCH      159856.14   60234.60   2.654             0.008046 ** \n   PROX_SHOPPING_MALL   -220947.25   36561.83  -6.043    0.000000001927962 ***\n   PROX_BUS_STOP         682482.22  134513.24   5.074    0.000000441637621 ***\n   NO_Of_UNITS             -245.48      87.95  -2.791             0.005321 ** \n   FAMILY_FRIENDLY       146307.58   46893.02   3.120             0.001845 ** \n   FREEHOLD              350599.81   48506.48   7.228    0.000000000000798 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 756000 on 1421 degrees of freedom\n   Multiple R-squared: 0.6507\n   Adjusted R-squared: 0.6472 \n   F-statistic: 189.1 on 14 and 1421 DF,  p-value: < 0.00000000000000022 \n   ***Extra Diagnostic information\n   Residual sum of squares: 812060890958409\n   Sigma(hat): 752522.9\n   AIC:  42966.76\n   AICc:  42967.14\n   BIC:  41731.39\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Adaptive bandwidth: 30 (number of nearest neighbours)\n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                                  Min.        1st Qu.         Median\n   Intercept            -134874192.014    -246693.174     779280.345\n   AREA_SQM                   3318.817       5628.499       7782.486\n   AGE                      -96746.436     -29287.820     -14042.717\n   PROX_CBD               -2533033.423    -162556.006     -77241.667\n   PROX_CHILDCARE         -1279036.792    -201752.740       8715.804\n   PROX_ELDERLYCARE       -1621217.923     -92049.948      61029.215\n   PROX_URA_GROWTH_AREA   -7268553.018     -30350.048      45868.678\n   PROX_MRT              -43780537.042    -672818.354    -221150.271\n   PROX_PARK              -2902027.105    -167820.665     116014.299\n   PROX_PRIMARY_SCH        -864176.067    -166266.939      -7785.325\n   PROX_SHOPPING_MALL     -1827150.999    -131754.889     -14049.330\n   PROX_BUS_STOP          -2057895.720     -71460.777     411041.226\n   NO_Of_UNITS               -2199.274       -236.853        -34.699\n   FAMILY_FRIENDLY         -598786.697     -50926.596      26172.549\n   FREEHOLD                -163402.522      40765.437     190227.133\n                               3rd Qu.     Max.\n   Intercept               1619360.306 18758355\n   AREA_SQM                  12737.761    23064\n   AGE                       -5611.856    13303\n   PROX_CBD                   2662.370 11346650\n   PROX_CHILDCARE           377776.875  2892127\n   PROX_ELDERLYCARE         281843.735  2465671\n   PROX_URA_GROWTH_AREA     246125.428  7384059\n   PROX_MRT                 -74593.417  1186242\n   PROX_PARK                465717.595  2588497\n   PROX_PRIMARY_SCH         432218.459  3381462\n   PROX_SHOPPING_MALL       137986.314 38038564\n   PROX_BUS_STOP           1207119.672 12081592\n   NO_Of_UNITS                 116.573     1010\n   FAMILY_FRIENDLY          224806.072  2072414\n   FREEHOLD                 379604.132  1813995\n   ************************Diagnostic information*************************\n   Number of data points: 1436 \n   Effective number of parameters (2trace(S) - trace(S'S)): 350.3088 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 1085.691 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 41982.22 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 41546.74 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 41914.08 \n   Residual sum of squares: 252822722477010 \n   R-square value:  0.8912425 \n   Adjusted R-square value:  0.8561185 \n\n   ***********************************************************************\n   Program stops at: 2023-03-08 20:49:54"
  },
  {
    "objectID": "handson_ex/handson_ex09/handson_ex09.html#converting-sdf-into-sf-data.frame",
    "href": "handson_ex/handson_ex09/handson_ex09.html#converting-sdf-into-sf-data.frame",
    "title": "Handson Ex09 - GWR Method",
    "section": "Converting SDF into sf data.frame",
    "text": "Converting SDF into sf data.frame\n\ncondo_resale.sf.adaptive <- st_as_sf(gwr.adaptive$SDF) %>%\n  st_transform(crs=3414)\n\n\ncondo_resale.sf.adaptive.svy21 <- st_transform(condo_resale.sf.adaptive, 3414)\ncondo_resale.sf.adaptive.svy21  \n\nSimple feature collection with 1436 features and 51 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 14940.85 ymin: 24765.67 xmax: 43352.45 ymax: 48382.81\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n    Intercept  AREA_SQM        AGE  PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE\n1   2050011.7  9561.892  -9514.634 -120681.9      319266.92       -393417.79\n2   1633128.2 16576.853 -58185.479 -149434.2      441102.18        325188.74\n3   3433608.2 13091.861 -26707.386 -259397.8     -120116.82        535855.81\n4    234358.9 20730.601 -93308.988 2426853.7      480825.28        314783.72\n5   2285804.9  6722.836 -17608.018 -316835.5       90764.78       -137384.61\n6  -3568877.4  6039.581 -26535.592  327306.1     -152531.19       -700392.85\n7  -2874842.4 16843.575 -59166.727 -983577.2     -177810.50       -122384.02\n8   2038086.0  6905.135 -17681.897 -285076.6       70259.40        -96012.78\n9   1718478.4  9580.703 -14401.128  105803.4     -657698.02       -123276.00\n10  3457054.0 14072.011 -31579.884 -234895.4       79961.45        548581.04\n   PROX_URA_GROWTH_AREA    PROX_MRT  PROX_PARK PROX_PRIMARY_SCH\n1            -159980.20  -299742.96 -172104.47        242668.03\n2            -142290.39 -2510522.23  523379.72       1106830.66\n3            -253621.21  -936853.28  209099.85        571462.33\n4           -2679297.89 -2039479.50 -759153.26       3127477.21\n5             303714.81   -44567.05  -10284.62         30413.56\n6             -28051.25   733566.47 1511488.92        320878.23\n7            1397676.38 -2745430.34  710114.74       1786570.95\n8             269368.71   -14552.99   73533.34         53359.73\n9            -361974.72  -476785.32 -132067.59        -40128.92\n10           -150024.38 -1503835.53  574155.47        108996.67\n   PROX_SHOPPING_MALL PROX_BUS_STOP  NO_Of_UNITS FAMILY_FRIENDLY  FREEHOLD\n1          300881.390     1210615.4  104.8290640       -9075.370  303955.6\n2          -87693.378     1843587.2 -288.3441183      310074.664  396221.3\n3         -126732.712     1411924.9   -9.5532945        5949.746  168821.7\n4          -29593.342     7225577.5 -161.3551620     1556178.531 1212515.6\n5           -7490.586      677577.0   42.2659674       58986.951  328175.2\n6          258583.881     1086012.6 -214.3671271      201992.641  471873.1\n7         -384251.210     5094060.5   -0.9212521      359659.512  408871.9\n8          -39634.902      735767.1   30.1741069       55602.506  347075.0\n9          276718.757     2815772.4  675.1615559      -30453.297  503872.8\n10        -454726.822     2123557.0  -21.3044311     -100935.586  213324.6\n         y    yhat    residual CV_Score Stud_residual Intercept_SE AREA_SQM_SE\n1  3000000 2886532   113468.16        0    0.38207013     516105.5    823.2860\n2  3880000 3466801   413198.52        0    1.01433140     488083.5    825.2380\n3  3325000 3616527  -291527.20        0   -0.83780678     963711.4    988.2240\n4  4250000 5435482 -1185481.63        0   -2.84614670     444185.5    617.4007\n5  1400000 1388166    11834.26        0    0.03404453    2119620.6   1376.2778\n6  1320000 1516702  -196701.94        0   -0.72065800   28572883.7   2348.0091\n7  3410000 3266881   143118.77        0    0.41291992     679546.6    893.5893\n8  1420000 1431955   -11955.27        0   -0.03033109    2217773.1   1415.2604\n9  2025000 1832799   192200.83        0    0.52018109     814281.8    943.8434\n10 2550000 2223364   326635.53        0    1.10559735    2410252.0   1271.4073\n      AGE_SE PROX_CBD_SE PROX_CHILDCARE_SE PROX_ELDERLYCARE_SE\n1   5889.782    37411.22          319111.1           120633.34\n2   6226.916    23615.06          299705.3            84546.69\n3   6510.236    56103.77          349128.5           129687.07\n4   6010.511   469337.41          304965.2           127150.69\n5   8180.361   410644.47          698720.6           327371.55\n6  14601.909  5272846.47         1141599.8          1653002.19\n7   8970.629   346164.20          530101.1           148598.71\n8   8661.309   438035.69          742532.8           399221.05\n9  11791.208    89148.35          704630.7           329683.30\n10  9941.980   173532.77          500976.2           281876.74\n   PROX_URA_GROWTH_AREA_SE PROX_MRT_SE PROX_PARK_SE PROX_PRIMARY_SCH_SE\n1                 56207.39    185181.3     205499.6            152400.7\n2                 76956.50    281133.9     229358.7            165150.7\n3                 95774.60    275483.7     314124.3            196662.6\n4                470762.12    279877.1     227249.4            240878.9\n5                474339.56    363830.0     364580.9            249087.7\n6               5496627.21    730453.2    1741712.0            683265.5\n7                371692.97    375511.9     297400.9            344602.8\n8                517977.91    423155.4     440984.4            261251.2\n9                153436.22    285325.4     304998.4            278258.5\n10               239182.57    571355.7     599131.8            331284.8\n   PROX_SHOPPING_MALL_SE PROX_BUS_STOP_SE NO_Of_UNITS_SE FAMILY_FRIENDLY_SE\n1               109268.8         600668.6       218.1258           131474.7\n2                98906.8         410222.1       208.9410           114989.1\n3               119913.3         464156.7       210.9828           146607.2\n4               177104.1         562810.8       361.7767           108726.6\n5               301032.9         740922.4       299.5034           160663.7\n6              2931208.6        1418333.3       602.5571           331727.0\n7               249969.5         821236.4       532.1978           129241.2\n8               351634.0         775038.4       338.6777           171895.1\n9               289872.7         850095.5       439.9037           220223.4\n10              265529.7         631399.2       259.0169           189125.5\n   FREEHOLD_SE Intercept_TV AREA_SQM_TV     AGE_TV PROX_CBD_TV\n1     115954.0    3.9720784   11.614302  -1.615447 -3.22582173\n2     130110.0    3.3460017   20.087361  -9.344188 -6.32792021\n3     141031.5    3.5629010   13.247868  -4.102368 -4.62353528\n4     138239.1    0.5276150   33.577223 -15.524302  5.17080808\n5     210641.1    1.0784029    4.884795  -2.152474 -0.77155660\n6     374347.3   -0.1249043    2.572214  -1.817269  0.06207388\n7     182216.9   -4.2305303   18.849348  -6.595605 -2.84136028\n8     216649.4    0.9189786    4.879056  -2.041481 -0.65080678\n9     220473.7    2.1104224   10.150733  -1.221345  1.18682383\n10    206346.2    1.4343123   11.068059  -3.176418 -1.35360852\n   PROX_CHILDCARE_TV PROX_ELDERLYCARE_TV PROX_URA_GROWTH_AREA_TV PROX_MRT_TV\n1         1.00048819          -3.2612693            -2.846248368 -1.61864578\n2         1.47178634           3.8462625            -1.848971738 -8.92998600\n3        -0.34404755           4.1319138            -2.648105057 -3.40075727\n4         1.57665606           2.4756745            -5.691404992 -7.28705261\n5         0.12990138          -0.4196596             0.640289855 -0.12249416\n6        -0.13361179          -0.4237096            -0.005103357  1.00426206\n7        -0.33542751          -0.8235874             3.760298131 -7.31116712\n8         0.09462126          -0.2405003             0.520038994 -0.03439159\n9        -0.93339393          -0.3739225            -2.359121712 -1.67102293\n10        0.15961128           1.9461735            -0.627237944 -2.63204802\n   PROX_PARK_TV PROX_PRIMARY_SCH_TV PROX_SHOPPING_MALL_TV PROX_BUS_STOP_TV\n1   -0.83749312           1.5923022            2.75358842        2.0154464\n2    2.28192684           6.7019454           -0.88662640        4.4941192\n3    0.66565951           2.9058009           -1.05686949        3.0419145\n4   -3.34061770          12.9836105           -0.16709578       12.8383775\n5   -0.02820944           0.1220998           -0.02488294        0.9145046\n6    0.86781794           0.4696245            0.08821750        0.7656963\n7    2.38773567           5.1844351           -1.53719231        6.2029165\n8    0.16674816           0.2042469           -0.11271635        0.9493299\n9   -0.43301073          -0.1442145            0.95462153        3.3123012\n10   0.95831249           0.3290120           -1.71252687        3.3632555\n   NO_Of_UNITS_TV FAMILY_FRIENDLY_TV FREEHOLD_TV  Local_R2\n1     0.480589953        -0.06902748    2.621347 0.8846744\n2    -1.380026395         2.69655779    3.045280 0.8899773\n3    -0.045279967         0.04058290    1.197050 0.8947007\n4    -0.446007570        14.31276425    8.771149 0.9073605\n5     0.141120178         0.36714544    1.557983 0.9510057\n6    -0.355762335         0.60891234    1.260522 0.9247586\n7    -0.001731033         2.78285441    2.243875 0.8310458\n8     0.089093858         0.32346758    1.602012 0.9463936\n9     1.534793921        -0.13828365    2.285410 0.8380365\n10   -0.082251138        -0.53369623    1.033819 0.9080753\n                    geometry\n1  POINT (22085.12 29951.54)\n2   POINT (25656.84 34546.2)\n3   POINT (23963.99 32890.8)\n4  POINT (27044.28 32319.77)\n5  POINT (41042.56 33743.64)\n6   POINT (39717.04 32943.1)\n7   POINT (28419.1 33513.37)\n8  POINT (40763.57 33879.61)\n9  POINT (23595.63 28884.78)\n10 POINT (24586.56 33194.31)\n\n\n\ngwr.adaptive.output <- as.data.frame(gwr.adaptive$SDF)\ncondo_resale.sf.adaptive <- cbind(condo_resale.res.sf, as.matrix(gwr.adaptive.output))\n\n\nglimpse(condo_resale.sf.adaptive)\n\nRows: 1,436\nColumns: 77\n$ POSTCODE                <dbl> 118635, 288420, 267833, 258380, 467169, 466472…\n$ SELLING_PRICE           <dbl> 3000000, 3880000, 3325000, 4250000, 1400000, 1…\n$ AREA_SQM                <dbl> 309, 290, 248, 127, 145, 139, 218, 141, 165, 1…\n$ AGE                     <dbl> 30, 32, 33, 7, 28, 22, 24, 24, 27, 31, 17, 22,…\n$ PROX_CBD                <dbl> 7.941259, 6.609797, 6.898000, 4.038861, 11.783…\n$ PROX_CHILDCARE          <dbl> 0.16597932, 0.28027246, 0.42922669, 0.39473543…\n$ PROX_ELDERLYCARE        <dbl> 2.5198118, 1.9333338, 0.5021395, 1.9910316, 1.…\n$ PROX_URA_GROWTH_AREA    <dbl> 6.618741, 7.505109, 6.463887, 4.906512, 6.4106…\n$ PROX_HAWKER_MARKET      <dbl> 1.76542207, 0.54507614, 0.37789301, 1.68259969…\n$ PROX_KINDERGARTEN       <dbl> 0.05835552, 0.61592412, 0.14120309, 0.38200076…\n$ PROX_MRT                <dbl> 0.5607188, 0.6584461, 0.3053433, 0.6910183, 0.…\n$ PROX_PARK               <dbl> 1.1710446, 0.1992269, 0.2779886, 0.9832843, 0.…\n$ PROX_PRIMARY_SCH        <dbl> 1.6340256, 0.9747834, 1.4715016, 1.4546324, 0.…\n$ PROX_TOP_PRIMARY_SCH    <dbl> 3.3273195, 0.9747834, 1.4715016, 2.3006394, 0.…\n$ PROX_SHOPPING_MALL      <dbl> 2.2102717, 2.9374279, 1.2256850, 0.3525671, 1.…\n$ PROX_SUPERMARKET        <dbl> 0.9103958, 0.5900617, 0.4135583, 0.4162219, 0.…\n$ PROX_BUS_STOP           <dbl> 0.10336166, 0.28673408, 0.28504777, 0.29872340…\n$ NO_Of_UNITS             <dbl> 18, 20, 27, 30, 30, 31, 32, 32, 32, 32, 34, 34…\n$ FAMILY_FRIENDLY         <dbl> 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0…\n$ FREEHOLD                <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1…\n$ LEASEHOLD_99YR          <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ LOG_SELLING_PRICE       <dbl> 14.91412, 15.17135, 15.01698, 15.26243, 14.151…\n$ MLR_RES                 <dbl> -1489099.55, 415494.57, 194129.69, 1088992.71,…\n$ Intercept               <dbl> 2050011.67, 1633128.24, 3433608.17, 234358.91,…\n$ AREA_SQM.1              <dbl> 9561.892, 16576.853, 13091.861, 20730.601, 672…\n$ AGE.1                   <dbl> -9514.634, -58185.479, -26707.386, -93308.988,…\n$ PROX_CBD.1              <dbl> -120681.94, -149434.22, -259397.77, 2426853.66…\n$ PROX_CHILDCARE.1        <dbl> 319266.925, 441102.177, -120116.816, 480825.28…\n$ PROX_ELDERLYCARE.1      <dbl> -393417.795, 325188.741, 535855.806, 314783.72…\n$ PROX_URA_GROWTH_AREA.1  <dbl> -159980.203, -142290.389, -253621.206, -267929…\n$ PROX_MRT.1              <dbl> -299742.96, -2510522.23, -936853.28, -2039479.…\n$ PROX_PARK.1             <dbl> -172104.47, 523379.72, 209099.85, -759153.26, …\n$ PROX_PRIMARY_SCH.1      <dbl> 242668.03, 1106830.66, 571462.33, 3127477.21, …\n$ PROX_SHOPPING_MALL.1    <dbl> 300881.390, -87693.378, -126732.712, -29593.34…\n$ PROX_BUS_STOP.1         <dbl> 1210615.44, 1843587.22, 1411924.90, 7225577.51…\n$ NO_Of_UNITS.1           <dbl> 104.8290640, -288.3441183, -9.5532945, -161.35…\n$ FAMILY_FRIENDLY.1       <dbl> -9075.370, 310074.664, 5949.746, 1556178.531, …\n$ FREEHOLD.1              <dbl> 303955.61, 396221.27, 168821.75, 1212515.58, 3…\n$ y                       <dbl> 3000000, 3880000, 3325000, 4250000, 1400000, 1…\n$ yhat                    <dbl> 2886531.8, 3466801.5, 3616527.2, 5435481.6, 13…\n$ residual                <dbl> 113468.16, 413198.52, -291527.20, -1185481.63,…\n$ CV_Score                <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ Stud_residual           <dbl> 0.38207013, 1.01433140, -0.83780678, -2.846146…\n$ Intercept_SE            <dbl> 516105.5, 488083.5, 963711.4, 444185.5, 211962…\n$ AREA_SQM_SE             <dbl> 823.2860, 825.2380, 988.2240, 617.4007, 1376.2…\n$ AGE_SE                  <dbl> 5889.782, 6226.916, 6510.236, 6010.511, 8180.3…\n$ PROX_CBD_SE             <dbl> 37411.22, 23615.06, 56103.77, 469337.41, 41064…\n$ PROX_CHILDCARE_SE       <dbl> 319111.1, 299705.3, 349128.5, 304965.2, 698720…\n$ PROX_ELDERLYCARE_SE     <dbl> 120633.34, 84546.69, 129687.07, 127150.69, 327…\n$ PROX_URA_GROWTH_AREA_SE <dbl> 56207.39, 76956.50, 95774.60, 470762.12, 47433…\n$ PROX_MRT_SE             <dbl> 185181.3, 281133.9, 275483.7, 279877.1, 363830…\n$ PROX_PARK_SE            <dbl> 205499.6, 229358.7, 314124.3, 227249.4, 364580…\n$ PROX_PRIMARY_SCH_SE     <dbl> 152400.7, 165150.7, 196662.6, 240878.9, 249087…\n$ PROX_SHOPPING_MALL_SE   <dbl> 109268.8, 98906.8, 119913.3, 177104.1, 301032.…\n$ PROX_BUS_STOP_SE        <dbl> 600668.6, 410222.1, 464156.7, 562810.8, 740922…\n$ NO_Of_UNITS_SE          <dbl> 218.1258, 208.9410, 210.9828, 361.7767, 299.50…\n$ FAMILY_FRIENDLY_SE      <dbl> 131474.73, 114989.07, 146607.22, 108726.62, 16…\n$ FREEHOLD_SE             <dbl> 115954.0, 130110.0, 141031.5, 138239.1, 210641…\n$ Intercept_TV            <dbl> 3.9720784, 3.3460017, 3.5629010, 0.5276150, 1.…\n$ AREA_SQM_TV             <dbl> 11.614302, 20.087361, 13.247868, 33.577223, 4.…\n$ AGE_TV                  <dbl> -1.6154474, -9.3441881, -4.1023685, -15.524301…\n$ PROX_CBD_TV             <dbl> -3.22582173, -6.32792021, -4.62353528, 5.17080…\n$ PROX_CHILDCARE_TV       <dbl> 1.000488185, 1.471786337, -0.344047555, 1.5766…\n$ PROX_ELDERLYCARE_TV     <dbl> -3.26126929, 3.84626245, 4.13191383, 2.4756745…\n$ PROX_URA_GROWTH_AREA_TV <dbl> -2.846248368, -1.848971738, -2.648105057, -5.6…\n$ PROX_MRT_TV             <dbl> -1.61864578, -8.92998600, -3.40075727, -7.2870…\n$ PROX_PARK_TV            <dbl> -0.83749312, 2.28192684, 0.66565951, -3.340617…\n$ PROX_PRIMARY_SCH_TV     <dbl> 1.59230221, 6.70194543, 2.90580089, 12.9836104…\n$ PROX_SHOPPING_MALL_TV   <dbl> 2.753588422, -0.886626400, -1.056869486, -0.16…\n$ PROX_BUS_STOP_TV        <dbl> 2.0154464, 4.4941192, 3.0419145, 12.8383775, 0…\n$ NO_Of_UNITS_TV          <dbl> 0.480589953, -1.380026395, -0.045279967, -0.44…\n$ FAMILY_FRIENDLY_TV      <dbl> -0.06902748, 2.69655779, 0.04058290, 14.312764…\n$ FREEHOLD_TV             <dbl> 2.6213469, 3.0452799, 1.1970499, 8.7711485, 1.…\n$ Local_R2                <dbl> 0.8846744, 0.8899773, 0.8947007, 0.9073605, 0.…\n$ coords.x1               <dbl> 22085.12, 25656.84, 23963.99, 27044.28, 41042.…\n$ coords.x2               <dbl> 29951.54, 34546.20, 32890.80, 32319.77, 33743.…\n$ geometry                <POINT [m]> POINT (22085.12 29951.54), POINT (25656.…"
  },
  {
    "objectID": "handson_ex/handson_ex09/handson_ex09.html#visualizing-localr2",
    "href": "handson_ex/handson_ex09/handson_ex09.html#visualizing-localr2",
    "title": "Handson Ex09 - GWR Method",
    "section": "Visualizing localR2",
    "text": "Visualizing localR2\n\ntmap_mode(\"view\")\ntm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"Local_R2\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\nVisualising Coefficient estimates\n\ntmap_mode(\"view\")\nAREA_SQM_SE <- tm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"AREA_SQM_SE\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\nAREA_SQM_TV <- tm_shape(mpsz_svy21)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(condo_resale.sf.adaptive) +  \n  tm_dots(col = \"AREA_SQM_TV\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\ntmap_arrange(AREA_SQM_SE, AREA_SQM_TV, \n             asp=1, ncol=2,\n             sync = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\n\nBy URA Planning Region\n\ntm_shape(mpsz_svy21[mpsz_svy21$REGION_N==\"CENTRAL REGION\", ])+\n  tm_polygons()+\ntm_shape(condo_resale.sf.adaptive) + \n  tm_bubbles(col = \"Local_R2\",\n           size = 0.15,\n           border.col = \"gray60\",\n           border.lwd = 1)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#mann-kendall-test",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#mann-kendall-test",
    "title": "Take Home Ex 2",
    "section": "Mann-Kendall Test",
    "text": "Mann-Kendall Test\nIn the below section, I have decided to select 2 highest populated area and 1 least populated area for Mann-Kendall Test.\n\nTOP 1: Kapuk\nTOP 2: Penggilingan\nBOTTOM 1: Gambir\n\n\ncbg1 <- vacc_rate_st %>%\n  ungroup() %>%\n  filter(DESA == \"KAPUK\")|> \n  select(DESA, Month, gi_star)\n\n\ncbg2 <- vacc_rate_st %>%\n  ungroup() %>%\n  filter(DESA == \"PENGGILINGAN\")|> \n  select(DESA, Month, gi_star)\n\n\n cbg3 <- vacc_rate_st %>%\n  ungroup() %>%\n  filter(DESA == \"GAMBIR\")|> \n  select(DESA, Month, gi_star)\n\n\np1<- ggplot(data = cbg1, \n       aes(x = Month, \n           y = gi_star)) +\n  geom_line() +\n  theme_light()\nggplotly(p1)\n\n\n\n\n\n\np2<- ggplot(data = cbg2, \n       aes(x = Month, \n           y = gi_star)) +\n  geom_line() +\n  theme_light()\nggplotly(p2)\n\n\n\n\n\n\np3<- ggplot(data = cbg3, \n       aes(x = Month, \n           y = gi_star)) +\n  geom_line() +\n  theme_light()\nggplotly(p3)\n\n\n\n\n\n\ncbg1 %>%\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) %>% \n  tidyr::unnest_wider(mk)\n\n# A tibble: 1 × 5\n    tau      sl     S     D  varS\n  <dbl>   <dbl> <dbl> <dbl> <dbl>\n1 0.697 0.00203    46  66.0  213.\n\n\nsl which is refers tot he p-value. It tell us that it is a slight upward but insignificant trend.\n\ncbg2 %>%\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) %>% \n  tidyr::unnest_wider(mk)\n\n# A tibble: 1 × 5\n    tau    sl     S     D  varS\n  <dbl> <dbl> <dbl> <dbl> <dbl>\n1 0.273 0.244    18  66.0  213.\n\n\nsl tell us that it is a insignificant trend.\n\ncbg3 %>%\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) %>% \n  tidyr::unnest_wider(mk)\n\n# A tibble: 1 × 5\n     tau    sl     S     D  varS\n   <dbl> <dbl> <dbl> <dbl> <dbl>\n1 -0.364 0.115   -24  66.0  213.\n\n\nsl tell us that it is a significant trend.\n\nehsa <- vacc_rate %>%\n  group_by(DESA) %>%\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) %>%\n  tidyr::unnest_wider(mk)\n\nLets arrange to show significant emerging hot/cold spots. Below we will be slicing 5\n\nemerging <- ehsa %>% \n  arrange(sl, abs(tau))%>% \n  slice(1:5)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_ex2_rebuild.html",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_ex2_rebuild.html",
    "title": "Take Home Ex 2",
    "section": "",
    "text": "pacman::p_load(dplyr, sf, spdep, tmap, tidyverse, readxl, ggplot2,moments,plotly, sfdep,Kendall, spacetime, lubridate,anytime)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_ex2_rebuild.html#computing-local-gi-statistics",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_ex2_rebuild.html#computing-local-gi-statistics",
    "title": "Take Home Ex 2",
    "section": "Computing Local Gi statistics",
    "text": "Computing Local Gi statistics\nUnlike global measures that summarize the overall spatial autocorrelation of the study area in one single value, local measures of spatial association identify local clusters (observations nearby have similar attribute values) or spatial outliers (observations nearby have different attribute values).\nIn the below section we will then check if we can find the sub district in which the **relatively higher number of vaccination** rate is significantly higher.\nwe will be using local_gstar_perm() functions to compute the Local Gi statistic.\nLocal Gi stats allows the detection of a local concentration of high and low values in neighboring objects and studies the statistical significance of that dependence.\n\nlongitude <- map_dbl(jakarta$geometry, ~st_centroid(.x)[[1]])\nlatitude <- map_dbl(jakarta$geometry, ~st_centroid(.x)[[2]])\ncoords <- cbind(longitude, latitude)\n\n\n#coords <- coordinates(hunan)\nk1 <- knn2nb(knearneigh(coords))\nk1dists <- unlist(nbdists(k1, coords, longlat = TRUE))\nall.linked <- max(unlist(nbdists(k1, coords, longlat = TRUE)))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   1430    7313   10177   10677   14112   19842 \n\n\n\nfix_d <- dnearneigh(coords, 0, all.linked, longlat = TRUE)\nfix_d\n\nNeighbour list object:\nNumber of regions: 261 \nNumber of nonzero links: 67840 \nPercentage nonzero weights: 99.5875 \nAverage number of links: 259.9234 \n\n\n\nfix_lw <- nb2listw(fix_d, style = 'W')\nsummary(fix_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 261 \nNumber of nonzero links: 67840 \nPercentage nonzero weights: 99.5875 \nAverage number of links: 259.9234 \nLink number distribution:\n\n257 258 259 260 \n  1   1  15 244 \n1 least connected region:\n231 with 257 links\n244 most connected regions:\nwith 260 links\n\nWeights style: W \nWeights constants summary:\n    n    nn  S0       S1   S2\nW 261 68121 261 2.008286 1044\n\n\n\nset.seed(999)\nlocalgi_jul21 <- local_gstar_perm(jakarta_vaccine$TotalV_jul21, fix_d, fix_lw, nsim=39)\nlocalgi_aug21 <- local_gstar_perm(jakarta_vaccine$TotalV_jul21, fix_d, fix_lw, nsim=39)\nlocalgi_sep21 <- local_gstar_perm(jakarta_vaccine$TotalV_jul21, fix_d, fix_lw, nsim=39)\nlocalgi_oct21 <- local_gstar_perm(jakarta_vaccine$TotalV_jul21, fix_d, fix_lw, nsim=39)\nlocalgi_nov21 <- local_gstar_perm(jakarta_vaccine$TotalV_jul21, fix_d, fix_lw, nsim=39)\nlocalgi_dec21 <- local_gstar_perm(jakarta_vaccine$TotalV_jul21, fix_d, fix_lw, nsim=39)\nlocalgi_jan22 <- local_gstar_perm(jakarta_vaccine$TotalV_jul21, fix_d, fix_lw, nsim=39)\nlocalgi_feb22 <- local_gstar_perm(jakarta_vaccine$TotalV_jul21, fix_d, fix_lw, nsim=39)\nlocalgi_mar22 <- local_gstar_perm(jakarta_vaccine$TotalV_jul21, fix_d, fix_lw, nsim=39)\nlocalgi_apr22 <- local_gstar_perm(jakarta_vaccine$TotalV_jul21, fix_d, fix_lw, nsim=39)\nlocalgi_may22 <- local_gstar_perm(jakarta_vaccine$TotalV_jul21, fix_d, fix_lw, nsim=39)\nlocalgi_jun22 <- local_gstar_perm(jakarta_vaccine$TotalV_jul21, fix_d, fix_lw, nsim=39)\n\n\njv.localGi_jul21 <- cbind(jakarta_vaccine,localgi_jul21)\njv.localGi_aug21 <- cbind(jakarta_vaccine,localgi_aug21)\njv.localGi_sep21 <- cbind(jakarta_vaccine,localgi_sep21)\njv.localGi_oct21 <- cbind(jakarta_vaccine,localgi_oct21)\njv.localGi_nov21 <- cbind(jakarta_vaccine,localgi_nov21)\njv.localGi_dec21 <- cbind(jakarta_vaccine,localgi_dec21)\njv.localGi_jan22 <- cbind(jakarta_vaccine,localgi_jan22)\njv.localGi_feb22 <- cbind(jakarta_vaccine,localgi_feb22)\njv.localGi_mar22 <- cbind(jakarta_vaccine,localgi_mar22)\njv.localGi_apr22 <- cbind(jakarta_vaccine,localgi_apr22)\njv.localGi_may22 <- cbind(jakarta_vaccine,localgi_may22)\njv.localGi_jun22 <- cbind(jakarta_vaccine,localgi_jun22)\n\n\ntmap_mode(\"plot\")\ntm_shape(jv.localGi_jun22) +\n    tm_polygons() +\n    tm_shape(jv.localGi_jun22 %>% filter(p_value < 0.05)) +\n    tm_fill(col= \"p_sim\",\n             palette = \"Paired\") +\n    tm_borders(alpha = 0.4) +\n    tm_layout(main.title = paste(\"local Gi p-value <0.05 JUN22\"),\n              main.title.size = 1)\n\n\n\n\n\nlocalgi_HCplot <- function(df, varname) {\n  tm_shape(df) +\n    tm_polygons() +\n  tm_shape(df %>% filter(p_value < 0.05)) +\n    tm_fill(varname,\n            palette = \"-RdBu\") +\n    tm_layout(\n          legend.height = 0.45, \n          legend.width = 0.35,\n          frame = TRUE) +\n    tm_borders(alpha = 0.2)\n}\n\n\ntmap_arrange(localgi_HCplot(jv.localGi_jul21, \"gi_star\"),\n             localgi_HCplot(jv.localGi_aug21, \"gi_star\"),\n             localgi_HCplot(jv.localGi_sep21, \"gi_star\"),\n             localgi_HCplot(jv.localGi_oct21, \"gi_star\")\n             )\n\n\n\n\n\njun2022testing <- jv.localGi_jun22 %>% filter(p_value < 0.05)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Takehome_Ex03.html",
    "href": "Take-home_Ex/Take-home_Ex03/Takehome_Ex03.html",
    "title": "Take Home Ex 3",
    "section": "",
    "text": "In this take-home exercise, you are tasked to predict HDB resale prices at the sub-market level (i.e.HDB 3-room, HDB 4-room and HDB 5-room) for the month of January and February 2023 in Singapore. The predictive models must be built by using by using conventional OLS method and GWR methods. You are also required to compare the performance of the conventional OLS method versus the geographical weighted methods.\nThe study should focus on either three-room, four-room or five-room flat and transaction period should be from 1st January 2021 to 31st December 2022. The test data should be January and February 2023 resale prices.\n\n\nData sets will be used in this model building exercise, they are:\n\nMP 2014 Subzone Boundary\nSingapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020\nHDB Resale Price\n\n\n\n\n\npacman::p_load(olsrr, corrplot, ggpubr, sf, spdep, GWmodel, tmap, tidyverse, gtsummary,mapview,leaflet,RColorBrewer,tidygeocoder,jsonlite,httr,onemapsgapi,reporter,magrittr,readxl,gdata, units,matrixStats, SpatialML,rsample, Metrics)\n\n\n\n\nAfter I imported the subzone layer and analysed below, I’ve found out that there are some subzone area which can be removed because the area are mostly industrial/campsite and would not have any residents living there.\n\nmpsz19 <- st_read(dsn = \"data/geospatial\", layer = \"MPSZ-2019\") %>% \n  st_transform(3414) %>% filter(SUBZONE_N != \"NORTH-EASTERN ISLANDS\" & SUBZONE_N != \"SOUTHERN GROUP\"& SUBZONE_N != \"SEMAKAU\"& SUBZONE_N != \"SUDONG\")\n\nReading layer `MPSZ-2019' from data source \n  `C:\\yifei-alpaca\\IS415-GAA\\Take-home_Ex\\Take-home_Ex03\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\n\nst_crs(mpsz19)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\nst_bbox(mpsz19)\n\n     xmin      ymin      xmax      ymax \n 2667.538 21448.473 55941.942 50256.334 \n\n\nAfter plotting a map, we can see that there is an island called NORTH-EASTERN ISLAND, SOUTHERN GROUP, SEMAKAU and SUDONG which is out of analysis area. we should remove them for the purpose of this takehome exercise. We can re-import the data with out this names by doing a filter(). Re run the map and look! its clean now. We can move on to our analysis."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Takehome_Ex03.html#importing-aspatial-data-population",
    "href": "Take-home_Ex/Take-home_Ex03/Takehome_Ex03.html#importing-aspatial-data-population",
    "title": "Take Home Ex 3",
    "section": "Importing Aspatial Data Population",
    "text": "Importing Aspatial Data Population\nIn this section, I will be importing Singapore population data. In our Hands-on Ex03 we have use a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary. Let’s further analyse this data and code further for our analysis.\n\npopdata <- read_csv(\"data/aspatial/population_2011to2020.csv\")\n\n\npopdata2020 <- popdata %>%\n  filter(Time == 2020) %>%\n  group_by(PA, SZ, AG) %>%\n  summarise(`POP` = sum(`Pop`)) %>%\n  ungroup()%>%\n  pivot_wider(names_from=AG, \n              values_from=POP) %>%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %>%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%>%\nmutate(`AGED`=rowSums(.[16:21])) %>%\nmutate(`TOTAL`=rowSums(.[3:21])) %>%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %>%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\nAs we look at the raw data, we can create a new data frame to combine the number of population and group by PA and SZ."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Takehome_Ex03.html#joining-the-attribute-data-and-geospatial-data",
    "href": "Take-home_Ex/Take-home_Ex03/Takehome_Ex03.html#joining-the-attribute-data-and-geospatial-data",
    "title": "Take Home Ex 3",
    "section": "Joining the attribute data and geospatial data",
    "text": "Joining the attribute data and geospatial data\nFor master plan and Pop data frame, there are 2 common variable which we can join them together. PLN_AREA_N = PA & SUBZONE_N = SZ but we have to convert them to upper case first\n\npopdata2020 <- popdata2020 %>%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = funs(toupper)) %>%\n  filter(`ECONOMY ACTIVE` > 0)\n\nleft join both master plan and population data by their sub zone level.\n\nmpsz_pop2020 <- left_join(mpsz19, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Takehome_Ex03.html#exploratory-data-analysis-eda",
    "href": "Take-home_Ex/Take-home_Ex03/Takehome_Ex03.html#exploratory-data-analysis-eda",
    "title": "Take Home Ex 3",
    "section": "Exploratory Data Analysis (EDA)",
    "text": "Exploratory Data Analysis (EDA)\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Greens\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\ntmap_options(check.and.fix = TRUE)\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"TOTAL\",\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nBased on the chart above, we can see that in general, the east area is more dense as compared to the other region. In our handson 3, we compare the young and age, but for analyzing the resale price, it would be more useful to compare economic active and aged group instead young and aged group. Because these 2 age group is more appropriate to get housing as compared to the young.\nLets compare between the Active and Aged groups\n\ntmap_mode(\"view\")\n\n\ntmap_options(check.and.fix = TRUE)\nyoungmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\",\n              )+ \n  tm_view(set.zoom.limits = c(9,14))\n\ntmap_options(check.and.fix = TRUE)\nactivemap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"ECONOMY ACTIVE\", \n              style = \"quantile\", \n              palette = \"Blues\",\n              )+ \n  tm_view(set.zoom.limits = c(9,14))\n\nagedmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Oranges\") +\n  tm_view(set.zoom.limits = c(9,14))\n\ntmap_arrange(youngmap,activemap, agedmap, asp=1, ncol=3, sync = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\nBased on the interactive graph above, we can say that the east area has a more dense aged group as compared to the economy active group. In general, I can also say that; the east area has a higher aging population as compared to other areas. Furthermore, we can also conclude that there are more resident staying in the east side than other region."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Takehome_Ex03.html#joining-the-attribute-data-and-geospatial-data-1",
    "href": "Take-home_Ex/Take-home_Ex03/Takehome_Ex03.html#joining-the-attribute-data-and-geospatial-data-1",
    "title": "Take Home Ex 3",
    "section": "Joining the attribute data and geospatial data",
    "text": "Joining the attribute data and geospatial data\n\ndwelling2020 <- dwelling2020 %>%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = funs(toupper)) %>%\n  filter(`POP` > 0)\n\n\nmpsz_dwelling2020 <- left_join(mpsz19, dwelling2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Takehome_Ex03.html#exploratory-data-analysis-eda-1",
    "href": "Take-home_Ex/Take-home_Ex03/Takehome_Ex03.html#exploratory-data-analysis-eda-1",
    "title": "Take Home Ex 3",
    "section": "Exploratory Data Analysis (EDA)",
    "text": "Exploratory Data Analysis (EDA)\n\n tmap_mode(\"view\")\nHDB3room <- tm_shape(mpsz_dwelling2020 %>% filter( TOD == \"HDB 3-Room Flats\"))+\n  tm_fill(\"POP\",\n          style = \"quantile\",\n          palette = \"Greens\") +\n  tm_view(set.zoom.limits = c(10,14))\n\nHDB4room <- tm_shape(mpsz_dwelling2020 %>% filter( TOD == \"HDB 4-Room Flats\"))+ \n  tm_polygons(\"POP\", \n              style = \"quantile\", \n              palette = \"Blues\",\n              )+ \n  tm_view(set.zoom.limits = c(10,14))\n\nHDB5room <- tm_shape(mpsz_dwelling2020 %>% filter( TOD == \"HDB 5-Room and Executive Flats\"))+ \n  tm_polygons(\"POP\", \n              style = \"quantile\", \n              palette = \"Reds\") +\n  tm_view(set.zoom.limits = c(10,14))\n\ntmap_arrange(HDB3room, HDB4room, HDB5room, asp=1, ncol=3, sync = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMentioned above that the study should focus on either three-room, four-room or five-room flat. Based on the chart above, we can see that 4-room flat has a higher results as compared to 3-room and 5-room due to its scale of 536,920 for 4-room, next highest is 495,380 for 5-room and 30,880 for 3-room. With this dwelling analysis, I will be focusing on 4-Room flat cause of its popularity in Singapore."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Takehome_Ex03.html#importing-aspatial-data-hdb-resale-price",
    "href": "Take-home_Ex/Take-home_Ex03/Takehome_Ex03.html#importing-aspatial-data-hdb-resale-price",
    "title": "Take Home Ex 3",
    "section": "Importing Aspatial Data HDB resale price",
    "text": "Importing Aspatial Data HDB resale price\nWe will import the HDB resale prices and also filter the data to 4-room flat from 1st January 2021 to 31st December 2022.\n\nhdb_resale = read_csv(\"data/aspatial/resale_flat_price_full.csv\")  %>% \n  filter(flat_type == \"4 ROOM\") %>%\n  filter(month >= \"2021-01\" & month <= \"2022-12\")\n\n\nglimpse(hdb_resale)\n\nRows: 23,656\nColumns: 11\n$ month               <chr> \"2021-01\", \"2021-01\", \"2021-01\", \"2021-01\", \"2021-…\n$ town                <chr> \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO …\n$ flat_type           <chr> \"4 ROOM\", \"4 ROOM\", \"4 ROOM\", \"4 ROOM\", \"4 ROOM\", …\n$ block               <chr> \"547\", \"414\", \"509\", \"467\", \"571\", \"134\", \"204\", \"…\n$ street_name         <chr> \"ANG MO KIO AVE 10\", \"ANG MO KIO AVE 10\", \"ANG MO …\n$ storey_range        <chr> \"04 TO 06\", \"01 TO 03\", \"01 TO 03\", \"07 TO 09\", \"0…\n$ floor_area_sqm      <dbl> 92, 92, 91, 92, 92, 98, 92, 92, 92, 92, 92, 109, 9…\n$ flat_model          <chr> \"New Generation\", \"New Generation\", \"New Generatio…\n$ lease_commence_date <dbl> 1981, 1979, 1980, 1979, 1979, 1978, 1977, 1978, 19…\n$ remaining_lease     <chr> \"59 years\", \"57 years 09 months\", \"58 years 06 mon…\n$ resale_price        <dbl> 370000, 375000, 380000, 385000, 410000, 410000, 41…\n\n\nSince there is no Long and Lat in the data, we need to create one. But before that we can combine the block with the street name, create category column representing story range and create Lat Long column.\n\nCombine block and street name\n\n\nhdb_resale$address <-  paste(hdb_resale$block, hdb_resale$street_name, sep=\" \")\n\n\nLooking at megan’s Takehome, she created duplicate values representing the story range. I was thinking of something different, so I decided we can categories in 4 category Low, Mid, High, very High instead.\n\n\nLow: 01-06\nMiddle: 07-12\nHigh: 13-24\nVery High: >= 25\n\n\nunique(hdb_resale$storey_range)\n\n [1] \"04 TO 06\" \"01 TO 03\" \"07 TO 09\" \"10 TO 12\" \"13 TO 15\" \"16 TO 18\"\n [7] \"19 TO 21\" \"22 TO 24\" \"28 TO 30\" \"25 TO 27\" \"31 TO 33\" \"43 TO 45\"\n[13] \"34 TO 36\" \"37 TO 39\" \"40 TO 42\" \"46 TO 48\" \"49 TO 51\"\n\n\nLow\n\nhdb_resale$story_level_low <- ifelse(hdb_resale$storey_range==\"01 TO 03\"|hdb_resale$storey_range==\"04 TO 06\", 1, 0)\n\nMiddle\n\nhdb_resale$story_level_mid <- ifelse(hdb_resale$storey_range==\"07 TO 09\"|hdb_resale$storey_range==\"10 TO 12\", 1, 0)\n\nHigh\n\nhdb_resale$story_level_high <- ifelse(hdb_resale$storey_range==\"13 TO 15\"|hdb_resale$storey_range==\"16 TO 18\"|hdb_resale$storey_range==\"19 TO 21\"|hdb_resale$storey_range==\"22 TO 24\", 1, 0)\n\nVery High\n\nhdb_resale$story_level_veryhigh <- ifelse(hdb_resale$storey_range>=\"25 TO 27\", 1, 0)\n\n\nCreate Lat Long column\n\nThe below code, i have copied the from our senior Megan website. The below code extracts the Latitude and Longitude of the address through OneMap API. I have commented after I ran the code once, the process took me about 1 hour to finish extracting the longlat.\n\n#library(httr)\n#geocode <- function(block, streetname) {\n#  base_url <- \"https://developers.onemap.sg/commonapi/search\"\n#  address <- paste(block, streetname, sep = \" \")\n#  query <- list(\"searchVal\" = address, \n#                \"returnGeom\" = \"Y\",\n#                \"getAddrDetails\" = \"N\",\n#                \"pageNum\" = \"1\")\n#  \n#  res <- GET(base_url, query = query)\n#  restext<-content(res, as=\"text\")\n#  \n#  output <- fromJSON(restext)  %>% \n#    as.data.frame %>%\n#    select(results.LATITUDE, results.LONGITUDE)\n#\n#  return(output)\n#}\n\nI will be exporting it into XLSX file and read in the file.\n#hdb_resale$LATITUDE <- 0\n#hdb_resale$LONGITUDE <- 0\n#\n#for (i in 1:nrow(hdb_resale)){\n#  temp_output <- geocode(hdb_resale[i, 4], hdb_resale[i, 5])\n#  \n#  hdb_resale$LATITUDE[i] <- temp_output$results.LATITUDE\n#  hdb_resale$LONGITUDE[i] <- temp_output$results.LONGITUDE\n#}\n\n#write.csv(hdb_resale,\"data/hdb_resale_latlong.csv\")\n\nRead in the hdb resale price with latlong column.\n\nhdb_resale <- read_csv(\"data/exported/hdb_resale_latlong.csv\")"
  },
  {
    "objectID": "inclass_ex/inclass_ex9b/inclass_ex09b.html",
    "href": "inclass_ex/inclass_ex9b/inclass_ex09b.html",
    "title": "Inclass Ex09 - GWR Method",
    "section": "",
    "text": "pacman::p_load(spdep, tmap, sf,\n               ggpubr, tidyverse, GWmodel, SpatialML, olsrr, devtools,tidymodels)\n\nToday: how to calibrate SpatialML\nReading the input data sets.\n\nmdata <- read_rds(\"data/aspatial/mdata.rds\")\n\n\n\n\nset.seed(1234)\nresale_split <- initial_split(mdata,\n                              prop=6.5/10,\n                              )\ntrain_data <- training(resale_split)\ntest_data <- testing(resale_split)\n\n\nwrite_rds(train_data, \"data/model/train_data.rds\")\nwrite_rds(test_data, \"data/model/test_data.rds\")\n\n\nsummary(train_data)\n\n  resale_price     floor_area_sqm    storey_order    remaining_lease_mths\n Min.   : 218000   Min.   : 74.00   Min.   : 1.000   Min.   : 555.0      \n 1st Qu.: 353000   1st Qu.: 91.00   1st Qu.: 2.000   1st Qu.: 798.0      \n Median : 405000   Median : 93.00   Median : 3.000   Median : 935.0      \n Mean   : 434362   Mean   : 95.12   Mean   : 3.262   Mean   : 940.2      \n 3rd Qu.: 470000   3rd Qu.:102.00   3rd Qu.: 4.000   3rd Qu.:1111.0      \n Max.   :1186888   Max.   :133.00   Max.   :17.000   Max.   :1164.0      \n    PROX_CBD       PROX_ELDERLYCARE  PROX_HAWKER         PROX_MRT      \n Min.   : 0.9994   Min.   :0.0000   Min.   :0.03334   Min.   :0.02204  \n 1st Qu.:10.1516   1st Qu.:0.2994   1st Qu.:0.38016   1st Qu.:0.30115  \n Median :13.4006   Median :0.6248   Median :0.65621   Median :0.53331  \n Mean   :12.5028   Mean   :0.8068   Mean   :0.76461   Mean   :0.60827  \n 3rd Qu.:15.3988   3rd Qu.:1.1446   3rd Qu.:0.97880   3rd Qu.:0.82375  \n Max.   :19.6501   Max.   :3.3016   Max.   :2.86763   Max.   :2.13061  \n   PROX_PARK       PROX_GOOD_PRISCH     PROX_MALL        PROX_CHAS     \n Min.   :0.04416   Min.   : 0.06525   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.51146   1st Qu.: 2.27719   1st Qu.:0.3725   1st Qu.:0.1149  \n Median :0.72996   Median : 3.99853   Median :0.5690   Median :0.1771  \n Mean   :0.82665   Mean   : 4.17364   Mean   :0.6365   Mean   :0.1918  \n 3rd Qu.:1.03458   3rd Qu.: 5.75485   3rd Qu.:0.8309   3rd Qu.:0.2493  \n Max.   :2.41314   Max.   :10.62237   Max.   :2.2710   Max.   :0.8083  \n PROX_SUPERMARKET    WITHIN_350M_KINDERGARTEN WITHIN_350M_CHILDCARE\n Min.   :0.0000001   Min.   :0.000            Min.   : 0.000       \n 1st Qu.:0.1731267   1st Qu.:0.000            1st Qu.: 3.000       \n Median :0.2590770   Median :1.000            Median : 4.000       \n Mean   :0.2826749   Mean   :1.018            Mean   : 3.888       \n 3rd Qu.:0.3655440   3rd Qu.:1.000            3rd Qu.: 5.000       \n Max.   :1.5713170   Max.   :7.000            Max.   :20.000       \n WITHIN_350M_BUS  WITHIN_1KM_PRISCH          geometry    \n Min.   : 0.000   Min.   :0.00      POINT        :10335  \n 1st Qu.: 6.000   1st Qu.:2.00      epsg:3414    :    0  \n Median : 8.000   Median :3.00      +proj=tmer...:    0  \n Mean   : 7.995   Mean   :3.29                           \n 3rd Qu.:10.000   3rd Qu.:4.00                           \n Max.   :18.000   Max.   :9.00                           \n\n\nLeast Square model\n\nprice_MLR<- lm(resale_price ~ floor_area_sqm + \n                 storey_order + remaining_lease_mths +\n                 PROX_CBD +\n                 PROX_ELDERLYCARE + \n                 PROX_HAWKER +\n                 PROX_MRT +\n                 PROX_PARK+\n                 PROX_GOOD_PRISCH+\n                 PROX_MALL+\n                 PROX_CHAS+\n                 PROX_SUPERMARKET + \n                 WITHIN_350M_KINDERGARTEN +\n                 WITHIN_350M_CHILDCARE +\n                 WITHIN_1KM_PRISCH, data=train_data\n                 \n                 )\nsummary(price_MLR)\n\n\nCall:\nlm(formula = resale_price ~ floor_area_sqm + storey_order + remaining_lease_mths + \n    PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + PROX_MRT + PROX_PARK + \n    PROX_GOOD_PRISCH + PROX_MALL + PROX_CHAS + PROX_SUPERMARKET + \n    WITHIN_350M_KINDERGARTEN + WITHIN_350M_CHILDCARE + WITHIN_1KM_PRISCH, \n    data = train_data)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-219245  -38971   -2267   36062  455160 \n\nCoefficients:\n                           Estimate Std. Error t value Pr(>|t|)    \n(Intercept)              110234.290  10474.885  10.524  < 2e-16 ***\nfloor_area_sqm             2858.469     91.025  31.403  < 2e-16 ***\nstorey_order              14186.600    338.903  41.860  < 2e-16 ***\nremaining_lease_mths        341.761      4.599  74.317  < 2e-16 ***\nPROX_CBD                 -17727.851    230.993 -76.746  < 2e-16 ***\nPROX_ELDERLYCARE         -14947.999    999.024 -14.963  < 2e-16 ***\nPROX_HAWKER              -18865.892   1290.067 -14.624  < 2e-16 ***\nPROX_MRT                 -31843.412   1745.138 -18.247  < 2e-16 ***\nPROX_PARK                 -7799.877   1512.972  -5.155 2.58e-07 ***\nPROX_GOOD_PRISCH           2600.312    339.871   7.651 2.17e-14 ***\nPROX_MALL                -14345.932   1990.117  -7.209 6.05e-13 ***\nPROX_CHAS                -10493.329   6414.324  -1.636    0.102    \nPROX_SUPERMARKET         -27127.584   4499.225  -6.029 1.70e-09 ***\nWITHIN_350M_KINDERGARTEN   8645.043    630.215  13.718  < 2e-16 ***\nWITHIN_350M_CHILDCARE     -4228.986    350.605 -12.062  < 2e-16 ***\nWITHIN_1KM_PRISCH         -7846.524    491.021 -15.980  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 61510 on 10319 degrees of freedom\nMultiple R-squared:  0.7385,    Adjusted R-squared:  0.7381 \nF-statistic:  1943 on 15 and 10319 DF,  p-value: < 2.2e-16\n\n\n\nwrite_rds(price_MLR, \"data/model/price_mlr.rds\")\n\n\n\n\nsf is a list object\nranger dont understand simple feature\n\ntrain_data_sp <-as_Spatial(train_data)\ntrain_data_sp\n\nclass       : SpatialPointsDataFrame \nfeatures    : 10335 \nextent      : 11597.31, 42623.63, 28217.39, 48741.06  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 17\nnames       : resale_price, floor_area_sqm, storey_order, remaining_lease_mths,          PROX_CBD,     PROX_ELDERLYCARE,        PROX_HAWKER,           PROX_MRT,          PROX_PARK,   PROX_GOOD_PRISCH,        PROX_MALL,            PROX_CHAS,     PROX_SUPERMARKET, WITHIN_350M_KINDERGARTEN, WITHIN_350M_CHILDCARE, ... \nmin values  :       218000,             74,            1,                  555, 0.999393538715878, 1.98943787433087e-08, 0.0333358643817954, 0.0220407324774434, 0.0441643212802781, 0.0652540365486641,                0, 6.20621206270077e-09, 1.21715176356525e-07,                        0,                     0, ... \nmax values  :      1186888,            133,           17,                 1164,  19.6500691667807,     3.30163731686804,   2.86763031236184,   2.13060636038504,   2.41313695915468,   10.6223726149914, 2.27100643784442,    0.808332738794272,     1.57131703651196,                        7,                    20, ... \n\n\n\n\n\n\ncoords <- st_coordinates(mdata)\ncoords_train <- st_coordinates(train_data)\ncoords_test <- st_coordinates(test_data)\n\nexport\n\nwrite_rds(coords_train, \"data/model/coords_train.rds\")\nwrite_rds(coords_test, \"data/model/coords_test.rds\")\n\ndrop the geometry\n\ntrain_data <- train_data %>% \n  st_drop_geometry()\n\nmodel\n\nprice_rf<- ranger(resale_price ~ floor_area_sqm + \n                 storey_order + remaining_lease_mths +\n                 PROX_CBD +\n                 PROX_ELDERLYCARE + \n                 PROX_HAWKER +\n                 PROX_MRT +\n                 PROX_PARK+\n                 PROX_GOOD_PRISCH+\n                 PROX_MALL+\n                 PROX_CHAS+\n                 PROX_SUPERMARKET + \n                 WITHIN_350M_KINDERGARTEN +\n                 WITHIN_350M_CHILDCARE +\n                 WITHIN_1KM_PRISCH, data=train_data\n                 \n                 )\nprint(price_rf)\n\nRanger result\n\nCall:\n ranger(resale_price ~ floor_area_sqm + storey_order + remaining_lease_mths +      PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + PROX_MRT + PROX_PARK +      PROX_GOOD_PRISCH + PROX_MALL + PROX_CHAS + PROX_SUPERMARKET +      WITHIN_350M_KINDERGARTEN + WITHIN_350M_CHILDCARE + WITHIN_1KM_PRISCH,      data = train_data) \n\nType:                             Regression \nNumber of trees:                  500 \nSample size:                      10335 \nNumber of independent variables:  15 \nMtry:                             3 \nTarget node size:                 5 \nVariable importance mode:         none \nSplitrule:                        variance \nOOB prediction error (MSE):       717626812 \nR squared (OOB):                  0.9503324 \n\n\nFor better comparision, we should look at the MSE\nthe code chunk below is to calibriate a geographic random forest model by using grf()\n\nset.seed(1234)\ngwRF <- grf(formula = resale_price ~ floor_area_sqm + \n                 storey_order + remaining_lease_mths +\n                 PROX_CBD +\n                 PROX_ELDERLYCARE + \n                 PROX_HAWKER +\n                 PROX_MRT +\n                 PROX_PARK+\n                 PROX_GOOD_PRISCH+\n                 PROX_MALL+\n                 PROX_CHAS+\n                 PROX_SUPERMARKET + \n                 WITHIN_350M_KINDERGARTEN +\n                 WITHIN_350M_CHILDCARE +\n                 WITHIN_1KM_PRISCH, dframe=train_data,\n            bw=55, # need to calculate by ourself\n            kernel = \"adaptive\",\n            coords = coords_train)\n\nRanger result\n\nCall:\n ranger(resale_price ~ floor_area_sqm + storey_order + remaining_lease_mths +      PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + PROX_MRT + PROX_PARK +      PROX_GOOD_PRISCH + PROX_MALL + PROX_CHAS + PROX_SUPERMARKET +      WITHIN_350M_KINDERGARTEN + WITHIN_350M_CHILDCARE + WITHIN_1KM_PRISCH,      data = train_data, num.trees = 500, mtry = 5, importance = \"impurity\",      num.threads = NULL) \n\nType:                             Regression \nNumber of trees:                  500 \nSample size:                      10335 \nNumber of independent variables:  15 \nMtry:                             5 \nTarget node size:                 5 \nVariable importance mode:         impurity \nSplitrule:                        variance \nOOB prediction error (MSE):       658980191 \nR squared (OOB):                  0.9543914 \n          floor_area_sqm             storey_order     remaining_lease_mths \n            6.556904e+12             1.318161e+13             3.131699e+13 \n                PROX_CBD         PROX_ELDERLYCARE              PROX_HAWKER \n            5.116133e+13             5.061929e+12             4.223677e+12 \n                PROX_MRT                PROX_PARK         PROX_GOOD_PRISCH \n            5.837746e+12             3.613496e+12             1.346975e+13 \n               PROX_MALL                PROX_CHAS         PROX_SUPERMARKET \n            3.366486e+12             1.205397e+12             1.899672e+12 \nWITHIN_350M_KINDERGARTEN    WITHIN_350M_CHILDCARE        WITHIN_1KM_PRISCH \n            6.150282e+11             1.150095e+12             5.503917e+12 \n     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. \n-251496.7  -12951.1     349.5     754.7   14999.9  317500.0 \n     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. \n-76845.82  -3150.39     40.43     42.07   3492.12  78767.02 \n                               Min          Max        Mean         StD\nfloor_area_sqm                   0 437249351201 18152539307 43342331389\nstorey_order             292515764 270218242191 16704202864 23955594317\nremaining_lease_mths     560601547 557672690386 35835828777 76053328776\nPROX_CBD                  46360552 397107257375 10633564793 28457854471\nPROX_ELDERLYCARE          41600101 316697712372  9210553346 22724653416\nPROX_HAWKER               44860060 365932899594  9122563636 21994719920\nPROX_MRT                  45464484 294071582930  8318278088 18905814256\nPROX_PARK                 45600643 274601736084  8158079408 18975453439\nPROX_GOOD_PRISCH          33822890 296167885165  9489326577 21372268982\nPROX_MALL                 47119225 448978483169  9849607710 26944595486\nPROX_CHAS                 39895296 303874994634  5935973932 13575504260\nPROX_SUPERMARKET          39466033 372572090806  9479790126 25191325255\nWITHIN_350M_KINDERGARTEN         0 186107002291  2402078603 12357813084\nWITHIN_350M_CHILDCARE            0 245431165553  4687634633 16814147573\nWITHIN_1KM_PRISCH                0 181156126989  1352868378  6151303431\n\n\n\nwrite_rds(gwRF, \"data/model/gwRF.rds\")\n\nPreparing the test data\n\ntest_data <- cbind(test_data, coords_test) %>%\n  st_drop_geometry()\n\n\ngwRF_pred <- predict.grf(gwRF, test_data, x.var.name = \"X\", \n                         y.var.name = \"Y\",\n                         local.w = 1,\n                         global.w = 0)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Takehome_Ex03.html#change-dataframe-to-sf-format",
    "href": "Take-home_Ex/Take-home_Ex03/Takehome_Ex03.html#change-dataframe-to-sf-format",
    "title": "Take Home Ex 3",
    "section": "Change dataframe to sf format",
    "text": "Change dataframe to sf format\n\nbusstop.sf <- st_transform(busstops, crs=3414)\neldercare.sf <- st_transform(eldercare, crs=3414)\nfoodarea.sf <- st_transform(foodarea, crs=3414)\nsupermarkets.sf <- st_transform(supermarkets, crs=3414)\nchildcare.sf <- st_transform(childcare, crs=3414)\nhospital.sf <- st_as_sf(hospital,\n                            coords = c(\"Long\", \"Lat\"),\n                            crs=4326) %>%\n  st_transform(crs=3414)\ntrainstation.sf <- st_as_sf(trainstation,\n                            coords = c(\"lng\", \"lat\"),\n                            crs=4326) %>%\n  st_transform(crs=3414)\n\nWe note that there are no Lat and Long in the primary school data frame. we need to tidy the data for both primary and good primary schools. To prevent it from rendering the website for too long, I will be exporting and importing the tidied files.\n\n# primaryschool[c('block', 'street')] <- str_split_fixed(primaryschool$address, ' ', # 2)\n# primaryschool$street<- trim(primaryschool$street)\n# primaryschool$street<- toupper(primaryschool$street)\n\n\n# good_prischool[c('block', 'street')] <- str_split_fixed(good_prischool$address, ' '# , 2)\n# good_prischool$street<- trim(good_prischool$street)\n# good_prischool$street<- toupper(good_prischool$street)\n\n\n#library(httr)\n#geocode <- function(block, streetname) {\n#  base_url <- \"https://developers.onemap.sg/commonapi/search\"\n#  address <- paste(block, streetname, sep = \" \")\n#  query <- list(\"searchVal\" = address, \n#                \"returnGeom\" = \"Y\",\n#                \"getAddrDetails\" = \"N\",\n#                \"pageNum\" = \"1\")\n#  \n#  res <- GET(base_url, query = query)\n#  restext<-content(res, as=\"text\")\n#  \n#  output <- fromJSON(restext)  %>% \n#    as.data.frame %>%\n#    select(results.LATITUDE, results.LONGITUDE)\n#\n#  return(output)\n#}\n\n\n#good_prischool$LATITUDE <- 0\n#good_prischool$LONGITUDE <- 0\n#\n#for (i in 1:nrow(good_prischool)){\n#  temp_output <- geocode(good_prischool[i, 32], good_prischool[i, 33])\n#  \n#  good_prischool$LATITUDE[i] <- temp_output$results.LATITUDE\n#  good_prischool$LONGITUDE[i] <- temp_output$results.LONGITUDE\n#}\n\n\n# primaryschool$LATITUDE <- 0\n# primaryschool$LONGITUDE <- 0\n# \n# for (i in 1:nrow(primaryschool)){\n#   temp_output <- geocode(primaryschool[i, 32], primaryschool[i, 33])\n#   \n#   primaryschool$LATITUDE[i] <- temp_output$results.LATITUDE\n#   primaryschool$LONGITUDE[i] <- temp_output$results.LONGITUDE\n# }"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Takehome_Ex03.html#export-tidy-data",
    "href": "Take-home_Ex/Take-home_Ex03/Takehome_Ex03.html#export-tidy-data",
    "title": "Take Home Ex 3",
    "section": "Export tidy data",
    "text": "Export tidy data\n\n#write.csv(primaryschool,\"data/exported/primaryschool.csv\")\n#write.csv(good_prischool,\"data/exported/good_prischool.csv\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Takehome_Ex03.html#import-tidy-data",
    "href": "Take-home_Ex/Take-home_Ex03/Takehome_Ex03.html#import-tidy-data",
    "title": "Take Home Ex 3",
    "section": "Import tidy data",
    "text": "Import tidy data\n\nprimaryschool <- read_csv(\"data/exported/primaryschool.csv\")\ngood_prischool <- read_csv(\"data/exported/good_prischool.csv\")\n\nAfter we have done, we can proceed to convert the df to sf.\n\nshoppingmalls.sf <- st_as_sf(shoppingmalls,\n                            coords = c(\"LONGITUDE\", \"LATITUDE\"),\n                            crs=4326) %>%\n  st_transform(crs=3414)\n\ngood_prischool.sf <- st_as_sf(good_prischool,\n                            coords = c(\"LONGITUDE\", \"LATITUDE\"),\n                            crs=4326) %>%\n  st_transform(crs=3414)\n\nprimaryschool.sf <- st_as_sf(primaryschool,\n                            coords = c(\"LONGITUDE\", \"LATITUDE\"),\n                            crs=4326) %>%\n  st_transform(crs=3414)\n\nNext, we will be preparing data for the HDB resale price."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Takehome_Ex03.html#converting-aspatial-data-dataframe-into-a-sf-object.",
    "href": "Take-home_Ex/Take-home_Ex03/Takehome_Ex03.html#converting-aspatial-data-dataframe-into-a-sf-object.",
    "title": "Take Home Ex 3",
    "section": "Converting aspatial data dataframe into a sf object.",
    "text": "Converting aspatial data dataframe into a sf object.\nCurrently, the hdb_resale tibble data frame is aspatial. We will convert it to a sf object and the output will be in point feature form. The code chunk below converts hdb_resale data frame into a simple feature data frame by using st_as_sf() of sf packages.\n\nhdb_resale.sf <- st_as_sf(hdb_resale,\n                            coords = c(\"LONGITUDE\", \"LATITUDE\"),\n                            crs=4326) %>%\n  st_transform(crs=3414)\n\nhdb_resale_test.sf <- st_as_sf(hdb_resale_test,\n                            coords = c(\"LONGITUDE\", \"LATITUDE\"),\n                            crs=4326) %>%\n  st_transform(crs=3414)\n\n\nhead(hdb_resale.sf)\n\nSimple feature collection with 6 features and 17 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 28960.32 ymin: 38439.17 xmax: 30770.07 ymax: 39578.64\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 6 × 18\n   ...1 month   town       flat_…¹ block stree…² store…³ floor…⁴ flat_…⁵ lease…⁶\n  <dbl> <chr>   <chr>      <chr>   <chr> <chr>   <chr>     <dbl> <chr>     <dbl>\n1     1 2021-01 ANG MO KIO 4 ROOM  547   ANG MO… 04 TO …      92 New Ge…    1981\n2     2 2021-01 ANG MO KIO 4 ROOM  414   ANG MO… 01 TO …      92 New Ge…    1979\n3     3 2021-01 ANG MO KIO 4 ROOM  509   ANG MO… 01 TO …      91 New Ge…    1980\n4     4 2021-01 ANG MO KIO 4 ROOM  467   ANG MO… 07 TO …      92 New Ge…    1979\n5     5 2021-01 ANG MO KIO 4 ROOM  571   ANG MO… 07 TO …      92 New Ge…    1979\n6     6 2021-01 ANG MO KIO 4 ROOM  134   ANG MO… 07 TO …      98 New Ge…    1978\n# … with 8 more variables: remaining_lease <chr>, resale_price <dbl>,\n#   address <chr>, story_level_low <dbl>, story_level_mid <dbl>,\n#   story_level_high <dbl>, story_level_veryhigh <dbl>, geometry <POINT [m]>,\n#   and abbreviated variable names ¹​flat_type, ²​street_name, ³​storey_range,\n#   ⁴​floor_area_sqm, ⁵​flat_model, ⁶​lease_commence_date\n\n\nLet’s visualize the 4-room price in a map view.\n\ntmap_mode(\"view\")\ntmap_options(check.and.fix = TRUE)\ntm_shape(hdb_resale.sf) +  \n  tm_dots(col = \"resale_price\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\n\nBy looking at the map, it becomes apparent that the central & east region of Singapore has a higher concentration of flats that command greater resale values.\nLet’s find out the top 10 area that has the highest price.\n\ntown_mean <- aggregate(hdb_resale.sf[,\"resale_price\"], list(hdb_resale.sf$town), mean)\ntop10_town = top_n(town_mean, 10, `resale_price`) %>%\n  arrange(desc(`resale_price`))\ntop10_town\n\nSimple feature collection with 10 features and 2 fields\nGeometry type: MULTIPOINT\nDimension:     XY\nBounding box:  xmin: 19536.43 ymin: 28217.39 xmax: 35958.92 ymax: 41493.47\nProjected CRS: SVY21 / Singapore TM\n           Group.1 resale_price                       geometry\n1     CENTRAL AREA     856354.6 MULTIPOINT ((28640.73 29932...\n2       QUEENSTOWN     780134.9 MULTIPOINT ((22133.07 32910...\n3      BUKIT MERAH     711179.0 MULTIPOINT ((25024.14 28462...\n4  KALLANG/WHAMPOA     702049.1 MULTIPOINT ((19536.43 41493...\n5        TOA PAYOH     651544.0 MULTIPOINT ((29021.66 34720...\n6         CLEMENTI     647851.6 MULTIPOINT ((19863.73 32474...\n7      BUKIT TIMAH     634049.4 MULTIPOINT ((21224.71 35657...\n8           BISHAN     605247.6 MULTIPOINT ((27638.13 37842...\n9          GEYLANG     592893.1 MULTIPOINT ((32749.43 33252...\n10      ANG MO KIO     546980.0 MULTIPOINT ((28070.74 38987...\n\n\nComparing to megan’s previous analysis the HDB resale flat from 2019-01 to 2020-10 with the current 2021-01 to 2022-12. We can see the increase in price just over 3 years. From my code chunk above, we can see that BUKIT TIMAH’S resale price has decrease from 4th position to 7th position. MARINE PARADE is not seen in the 10th position and it’s over taken by ANG MO KIO.\nMegan’s 2019-01 to 2020-10\n\n\n\n\n\nWe can find out more insights by picking variety of factors that deem fit."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Takehome_Ex03.html#proximity-distance-calculation",
    "href": "Take-home_Ex/Take-home_Ex03/Takehome_Ex03.html#proximity-distance-calculation",
    "title": "Take Home Ex 3",
    "section": "Proximity Distance Calculation",
    "text": "Proximity Distance Calculation\nIn this section, we need to find the proximity to particular facilities - which we can compute with st_distance(), and find the closest facility (shortest distance) with the rowMins() function of our matrixStats package. The values will be appended to the data frame as a new column. (the below code will be credited to our senior Megan)\n\n#library(units)\n#library(matrixStats)\n#proximity <- function(df1, df2, varname) {\n#  dist_matrix <- st_distance(df1, df2) %>%\n#    drop_units()\n#  df1[,varname] <- rowMins(dist_matrix)\n#  return(df1)\n#}\n\n\n#hdb_resale_train.sf <- \n#  # the columns will be truncated later on when viewing \n#  # so we're limiting ourselves to two-character columns for ease of #viewing #etween\n#  proximity(hdb_resale.sf, busstop.sf, \"PROX_BS\") %>%\n#  proximity(.,childcare.sf, \"PROX_CHILDCARE\") %>%\n#  proximity(., eldercare.sf, \"PROX_ELDERCARE\") %>%\n#  proximity(., foodarea.sf, \"PROX_FOOD\") %>%\n#  proximity(., trainstation.sf, \"PROX_MRT\") %>%\n#  proximity(., good_prischool.sf, \"PROX_TOPPRISCH\") %>%\n#  proximity(., shoppingmalls.sf, \"PROX_MALL\") %>%\n#  proximity(., supermarkets.sf, \"PROX_SPRMKT\") %>%\n#  proximity(., hospital.sf, \"PROX_HOST\") \n\n#hdb_resale_test <- \n#  # the columns will be truncated later on when viewing \n#  # so we're limiting ourselves to two-character columns for ease of #viewing #etween\n#  proximity(hdb_resale_test.sf, busstop.sf, \"PROX_BS\") %>%\n#  proximity(.,childcare.sf, \"PROX_CHILDCARE\") %>%\n#  proximity(., eldercare.sf, \"PROX_ELDERCARE\") %>%\n#  proximity(., foodarea.sf, \"PROX_FOOD\") %>%\n#  proximity(., trainstation.sf, \"PROX_MRT\") %>%\n#  proximity(., good_prischool.sf, \"PROX_TOPPRISCH\") %>%\n#  proximity(., shoppingmalls.sf, \"PROX_MALL\") %>%\n#  proximity(., supermarkets.sf, \"PROX_SPRMKT\") %>%\n#  proximity(., hospital.sf, \"PROX_HOST\") \n\nAfter we ran the proximity distance, lets run the number of radius as well.\n\n#num_radius <- function(df1, df2, varname, radius) {\n#  dist_matrix <- st_distance(df1, df2) %>%\n#    drop_units() %>%\n#    as.data.frame()\n#  df1[,varname] <- rowSums(dist_matrix <= radius)\n#  return(df1)\n#}\n\n\n#hdb_resale_train_final <- \n#  num_radius(hdb_resale_train.sf, foodarea.sf, \"NUM_FOOD\", 350) %>%\n#  num_radius(., childcare.sf, \"NUM_CHILDCARE\", 350) %>%\n#  num_radius(., busstop.sf, \"NUM_BUS_STOP\", 350) %>%\n#  num_radius(., supermarkets.sf, \"NUM_SPMKT\", 350) %>%\n#  num_radius(., primaryschool.sf, \"NUM_SCHOOL\", 1000)\n\n#hdb_resale_test_final <- \n#  num_radius(hdb_resale_test, foodarea.sf, \"NUM_FOOD\", 350) %>%\n#  num_radius(., childcare.sf, \"NUM_CHILDCARE\", 350) %>%\n#  num_radius(., busstop.sf, \"NUM_BUS_STOP\", 350) %>%\n#  num_radius(., supermarkets.sf, \"NUM_SPMKT\", 350) %>%\n#  num_radius(., primaryschool.sf, \"NUM_SCHOOL\", 1000)\n\n\n#st_write(hdb_resale_train_final, \"data/exported/hdb_resale_train_final.shp\")\n#st_write(hdb_resale_test_final, \"data/exported/hdb_resale_test_final.shp\")\n\n\n#write.csv(hdb_resale_train_final, \"data/exported/hdb_resale_train.csv\")\n#write.csv(hdb_resale_test_final, \"data/exported/hdb_resale_test.csv\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Takehome_Ex03.html#exploratory-data-analysis-eda-2",
    "href": "Take-home_Ex/Take-home_Ex03/Takehome_Ex03.html#exploratory-data-analysis-eda-2",
    "title": "Take Home Ex 3",
    "section": "Exploratory Data Analysis (EDA)",
    "text": "Exploratory Data Analysis (EDA)\n\ntmap_mode(\"plot\")\n\nPLOT_BUS <- tm_shape(mpsz19) +\n  tm_borders(alpha = 0.5) +\n  tmap_options(check.and.fix = TRUE) +\ntm_shape(busstop.sf) +\n  tm_dots(col=\"red\", size=0.05) +\n  tm_layout(main.title = \"Bus Stops\",\n          main.title.position = \"center\",\n          main.title.size = 1.2,\n          frame = TRUE)+\n  tm_view(set.zoom.limits = c(10,14))\n\n\nPLOT_TRAIN <- tm_shape(mpsz19) +\n  tm_borders(alpha = 0.5) +\n  tmap_options(check.and.fix = TRUE) +\ntm_shape(trainstation.sf) +\n  tm_dots(col=\"blue\", size=0.05) +\n  tm_layout(main.title = \"Train Station\",\n          main.title.position = \"center\",\n          main.title.size = 1.2,\n          frame = TRUE)+\n  tm_view(set.zoom.limits = c(10,14))\n\ntmap_arrange(PLOT_BUS, PLOT_TRAIN, \n             asp=1, ncol=2,\n             sync = FALSE)\n\n\n\n\nNotice for bus stop, there are a few points that is out of Singapore, lets remove those points namely “LARKIN TER”, “KOTARAYA II TER”, “JOHOR BAHRU CHECKPT”, “JB SENTRAL”. After that, we can re-run the map above.\n\nbusstop.sf <- busstop.sf  %>%\n  filter(LOC_DESC != \"JOHOR BAHRU CHECKPT\" & LOC_DESC != \"LARKIN TER\"& LOC_DESC != \"KOTARAYA II TER\"& LOC_DESC != \"JB SENTRAL\")\n\nLets looks at other data.\n\ntmap_mode(\"plot\")\n\nPLOT_CHILD <- tm_shape(mpsz19) +\n  tm_borders(alpha = 0.5) +\n  tmap_options(check.and.fix = TRUE) +\ntm_shape(childcare.sf) +\n  tm_dots(col=\"orange\", size=0.05) +\n  tm_layout(main.title = \"Child Care\",\n          main.title.position = \"center\",\n          main.title.size = 1.2,\n          frame = TRUE)+\n  tm_view(set.zoom.limits = c(10,14))\n\n\nPLOT_ELDER <- tm_shape(mpsz19) +\n  tm_borders(alpha = 0.5) +\n  tmap_options(check.and.fix = TRUE) +\ntm_shape(eldercare.sf) +\n  tm_dots(col=\"green\", size=0.05) +\n  tm_layout(main.title = \"Elder Care\",\n          main.title.position = \"center\",\n          main.title.size = 1.2,\n          frame = TRUE)+\n  tm_view(set.zoom.limits = c(10,14))\n\ntmap_arrange(PLOT_CHILD, PLOT_ELDER, \n             asp=1, ncol=2,\n             sync = FALSE)\n\n\n\n\n\ntmap_mode(\"plot\")\n\nPLOT_PRISCHOOL <- tm_shape(mpsz19) +\n  tm_borders(alpha = 0.5) +\n  tmap_options(check.and.fix = TRUE) +\ntm_shape(primaryschool.sf) +\n  tm_dots(col=\"#009999\", size=0.05) +\n  tm_layout(main.title = \"Primary school\",\n          main.title.position = \"center\",\n          main.title.size = 1.2,\n          frame = TRUE)+\n  tm_view(set.zoom.limits = c(10,14))\n\n\nPLOT_GOODPRISCHOOL <- tm_shape(mpsz19) +\n  tm_borders(alpha = 0.5) +\n  tmap_options(check.and.fix = TRUE) +\ntm_shape(good_prischool.sf) +\n  tm_dots(col=\"red\", size=0.05) +\n  tm_layout(main.title = \"Good Primary School\",\n          main.title.position = \"center\",\n          main.title.size = 1.2,\n          frame = TRUE)+\n  tm_view(set.zoom.limits = c(10,14))\n\ntmap_arrange(PLOT_PRISCHOOL, PLOT_GOODPRISCHOOL, \n             asp=1, ncol=2,\n             sync = FALSE)\n\n\n\n\n\ntmap_mode(\"plot\")\nPLOT_FOOD <- tm_shape(mpsz19) +\n  tm_borders(alpha = 0.5) +\n  tmap_options(check.and.fix = TRUE) +\ntm_shape(foodarea.sf) +\n  tm_dots(col=\"#009999\", size=0.05) +\n  tm_layout(main.title = \"Food Area\",\n          main.title.position = \"center\",\n          main.title.size = 1.2,\n          frame = TRUE)+\n  tm_view(set.zoom.limits = c(10,14))\n\n\nPLOT_SUPERMART <- tm_shape(mpsz19) +\n  tm_borders(alpha = 0.5) +\n  tmap_options(check.and.fix = TRUE) +\ntm_shape(supermarkets.sf) +\n  tm_dots(col=\"#0000FF\", size=0.05) +\n  tm_layout(main.title = \"Supermarket\",\n          main.title.position = \"center\",\n          main.title.size = 1.2,\n          frame = TRUE)+\n  tm_view(set.zoom.limits = c(10,14))\n\ntmap_arrange(PLOT_FOOD, PLOT_SUPERMART, \n             asp=1, ncol=2,\n             sync = FALSE)\n\n\n\n\nAfter plotting, we saw a point which is not within SG, let’s remove them and re run the map.\n\nfoodarea.sf <- foodarea.sf  %>%\n  filter(osm_id  != \"4493618264\")\n\n\ntmap_mode(\"plot\")\n\nPLOT_HOST <- tm_shape(mpsz19) +\n  tm_borders(alpha = 0.5) +\n  tmap_options(check.and.fix = TRUE) +\ntm_shape(hospital.sf) +\n  tm_dots(col=\"red\", size=0.05) +\n  tm_layout(main.title = \"Hospital\",\n          main.title.position = \"center\",\n          main.title.size = 1.2,\n          frame = TRUE)+\n  tm_view(set.zoom.limits = c(10,14))\n\n\nPLOT_MALL <- tm_shape(mpsz19) +\n  tm_borders(alpha = 0.5) +\n  tmap_options(check.and.fix = TRUE) +\ntm_shape(shoppingmalls.sf) +\n  tm_dots(col=\"orange\", size=0.05) +\n  tm_layout(main.title = \"Shopping mall\",\n          main.title.position = \"center\",\n          main.title.size = 1.2,\n          frame = TRUE)+\n  tm_view(set.zoom.limits = c(10,14))\n\ntmap_arrange(PLOT_HOST, PLOT_MALL, \n             asp=1, ncol=2,\n             sync = FALSE)\n\n\n\n\nLooks like all data points are within Singapore! Next, we will be preparing data for the HDB resale price."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/data/aspatial/ChildcareServices.html",
    "href": "Take-home_Ex/Take-home_Ex03/data/aspatial/ChildcareServices.html",
    "title": "IS415 Journey",
    "section": "",
    "text": "<!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’>     dataset\n\n\n                 0 0     false"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/data/aspatial/offices/Offices.html",
    "href": "Take-home_Ex/Take-home_Ex03/data/aspatial/offices/Offices.html",
    "title": "IS415 Journey",
    "section": "",
    "text": "<!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’>     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/data/aspatial/poi_singapore/Singapore_POIS.html",
    "href": "Take-home_Ex/Take-home_Ex03/data/aspatial/poi_singapore/Singapore_POIS.html",
    "title": "IS415 Journey",
    "section": "",
    "text": "<!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’>     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/data/geospatial/MPSZ-2019.html",
    "href": "Take-home_Ex/Take-home_Ex03/data/geospatial/MPSZ-2019.html",
    "title": "IS415 Journey",
    "section": "",
    "text": "<!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’>     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Takehome_Ex03.html#export-tidy-data-for-schools",
    "href": "Take-home_Ex/Take-home_Ex03/Takehome_Ex03.html#export-tidy-data-for-schools",
    "title": "Take Home Ex 3",
    "section": "Export tidy data for schools",
    "text": "Export tidy data for schools\n\n#write.csv(primaryschool,\"data/exported/primaryschool.csv\")\n#write.csv(good_prischool,\"data/exported/good_prischool.csv\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Takehome_Ex03.html#import-tidy-data-for-schools",
    "href": "Take-home_Ex/Take-home_Ex03/Takehome_Ex03.html#import-tidy-data-for-schools",
    "title": "Take Home Ex 3",
    "section": "Import tidy data for schools",
    "text": "Import tidy data for schools\n\nprimaryschool <- read_csv(\"data/exported/primaryschool.csv\")\ngood_prischool <- read_csv(\"data/exported/good_prischool.csv\")\n\nAfter we have done, we can proceed to convert the df to sf.\n\nshoppingmalls.sf <- st_as_sf(shoppingmalls,\n                            coords = c(\"LONGITUDE\", \"LATITUDE\"),\n                            crs=4326) %>%\n  st_transform(crs=3414)\n\ngood_prischool.sf <- st_as_sf(good_prischool,\n                            coords = c(\"LONGITUDE\", \"LATITUDE\"),\n                            crs=4326) %>%\n  st_transform(crs=3414)\n\nprimaryschool.sf <- st_as_sf(primaryschool,\n                            coords = c(\"LONGITUDE\", \"LATITUDE\"),\n                            crs=4326) %>%\n  st_transform(crs=3414)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Takehome_Ex03.html#data-preparation",
    "href": "Take-home_Ex/Take-home_Ex03/Takehome_Ex03.html#data-preparation",
    "title": "Take Home Ex 3",
    "section": "Data Preparation",
    "text": "Data Preparation\nSince there is no Long and Lat in the data, we need to create one. But before that we can combine the block with the street name, create category column representing story range, create Lat Long column and reformat remaining lease.\n\nCombine block and street name\n\n\nhdb_resale$address <-  paste(hdb_resale$block, hdb_resale$street_name, sep=\" \")\n\n\nhdb_resale_test$address <-  paste(hdb_resale_test$block, hdb_resale_test$street_name, sep=\" \")\n\n\nLooking at megan’s Takehome, she created duplicate values representing the story range. I was thinking of something different, so I decided we can categories in 4 category Low, Mid, High, very High instead.\n\n\nLow: 01-06\nMiddle: 07-12\nHigh: 13-24\nVery High: >= 25\n\n\nunique(hdb_resale$storey_range)\n\n [1] \"04 TO 06\" \"01 TO 03\" \"07 TO 09\" \"10 TO 12\" \"13 TO 15\" \"16 TO 18\"\n [7] \"19 TO 21\" \"22 TO 24\" \"28 TO 30\" \"25 TO 27\" \"31 TO 33\" \"43 TO 45\"\n[13] \"34 TO 36\" \"37 TO 39\" \"40 TO 42\" \"46 TO 48\" \"49 TO 51\"\n\n\nLow\n\nhdb_resale$story_level_low <- ifelse(hdb_resale$storey_range==\"01 TO 03\"|hdb_resale$storey_range==\"04 TO 06\", 1, 0)\n\n\nhdb_resale_test$story_level_low <- ifelse(hdb_resale_test$storey_range==\"01 TO 03\"|hdb_resale_test$storey_range==\"04 TO 06\", 1, 0)\n\nMiddle\n\nhdb_resale$story_level_mid <- ifelse(hdb_resale$storey_range==\"07 TO 09\"|hdb_resale$storey_range==\"10 TO 12\", 1, 0)\n\n\nhdb_resale_test$story_level_mid <- ifelse(hdb_resale_test$storey_range==\"07 TO 09\"|hdb_resale_test$storey_range==\"10 TO 12\", 1, 0)\n\nHigh\n\nhdb_resale$story_level_high <- ifelse(hdb_resale$storey_range==\"13 TO 15\"|hdb_resale$storey_range==\"16 TO 18\"|hdb_resale$storey_range==\"19 TO 21\"|hdb_resale$storey_range==\"22 TO 24\", 1, 0)\n\n\nhdb_resale_test$story_level_high <- ifelse(hdb_resale_test$storey_range==\"13 TO 15\"|hdb_resale_test$storey_range==\"16 TO 18\"|hdb_resale_test$storey_range==\"19 TO 21\"|hdb_resale_test$storey_range==\"22 TO 24\", 1, 0)\n\nVery High\n\nhdb_resale$story_level_veryhigh <- ifelse(hdb_resale$storey_range>=\"25 TO 27\", 1, 0)\n\n\nhdb_resale_test$story_level_veryhigh <- ifelse(hdb_resale_test$storey_range>=\"25 TO 27\", 1, 0)\n\n\nCreate Lat Long column\n\nThe below code, i have copied the from our senior Megan website. The below code extracts the Latitude and Longitude of the address through OneMap API. I have commented after I ran the code once, the process took me about 1 hour to finish extracting the longlat.\nI will be exporting it into XLSX file and read in the file.\n\n#library(httr)\n#geocode <- function(block, streetname) {\n#  base_url <- \"https://developers.onemap.sg/commonapi/search\"\n#  address <- paste(block, streetname, sep = \" \")\n#  query <- list(\"searchVal\" = address, \n#                \"returnGeom\" = \"Y\",\n#                \"getAddrDetails\" = \"N\",\n#                \"pageNum\" = \"1\")\n#  \n#  res <- GET(base_url, query = query)\n#  restext<-content(res, as=\"text\")\n#  \n#  output <- fromJSON(restext)  %>% \n#    as.data.frame %>%\n#    select(results.LATITUDE, results.LONGITUDE)\n#\n#  return(output)\n#}\n\n\n#hdb_resale$LATITUDE <- 0\n#hdb_resale$LONGITUDE <- 0\n#\n#for (i in 1:nrow(hdb_resale)){\n#  temp_output <- geocode(hdb_resale[i, 4], hdb_resale[i, 5])\n#  \n#  hdb_resale$LATITUDE[i] <- temp_output$results.LATITUDE\n#  hdb_resale$LONGITUDE[i] <- temp_output$results.LONGITUDE\n#}\n\n\n#hdb_resale_test$LATITUDE <- 0\n#hdb_resale_test$LONGITUDE <- 0\n#\n#for (i in 1:nrow(hdb_resale_test)){\n#  temp_output <- geocode(hdb_resale_test[i, 4], hdb_resale_test[i,5])\n#  \n#  hdb_resale_test$LATITUDE[i] <- temp_output$results.LATITUDE\n#  hdb_resale_test$LONGITUDE[i] <- temp_output$results.LONGITUDE\n#}\n\n\n#write.csv(hdb_resale,\"data/exported/hdb_resale_latlong.csv\")\n\n\n#write.csv(hdb_resale_test,\"data/exported/hdb_resale_test_latlong.csv\")\n\nRead in the hdb resale price with latlong column.\n\nhdb_resale <- read_csv(\"data/exported/hdb_resale_latlong.csv\")\nhdb_resale_test <- read_csv(\"data/exported/hdb_resale_test_latlong.csv\")\n\nLets check for any NA values\n\nsum(is.na(hdb_resale$LATITUDE))\n\n[1] 0\n\nsum(is.na(hdb_resale$LONGITUDE))\n\n[1] 0\n\nsum(is.na(hdb_resale_test$LATITUDE))\n\n[1] 0\n\nsum(is.na(hdb_resale_test$LONGITUDE))\n\n[1] 0\n\n\nThere is no missing value and we can proceed to the next steps.\n\nConvert Remaining lease format\n\n\nstr_list <- str_split(hdb_resale$remaining_lease, \" \")\n\nfor (i in 1:length(str_list)) {\n  if (length(unlist(str_list[i])) > 2) {\n      year <- as.numeric(unlist(str_list[i])[1])\n      month <- as.numeric(unlist(str_list[i])[3])\n      hdb_resale$remaining_lease[i] <- year + round(month/12, 2)\n  }\n  else {\n    year <- as.numeric(unlist(str_list[i])[1])\n    hdb_resale$remaining_lease[i] <- year\n  }\n}\nstr_list <- str_split(hdb_resale_test$remaining_lease, \" \")\n\nfor (i in 1:length(str_list)) {\n  if (length(unlist(str_list[i])) > 2) {\n      year <- as.numeric(unlist(str_list[i])[1])\n      month <- as.numeric(unlist(str_list[i])[3])\n      hdb_resale_test$remaining_lease[i] <- year + round(month/12, 2)\n  }\n  else {\n    year <- as.numeric(unlist(str_list[i])[1])\n    hdb_resale_test$remaining_lease[i] <- year\n  }\n}"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Takehome_Ex03.html#computing-correlation-matrix",
    "href": "Take-home_Ex/Take-home_Ex03/Takehome_Ex03.html#computing-correlation-matrix",
    "title": "Take Home Ex 3",
    "section": "Computing Correlation Matrix",
    "text": "Computing Correlation Matrix\nLets examine if there is a sign of multicolinearity.\n\n#correlation_train <- hdb_resale_train %>%\n#  st_drop_geometry()\n#corrplot::corrplot(cor(correlation_train[, 2:17]), \n#                   diag = FALSE, \n#                   order = \"AOE\",\n#                   tl.pos = \"td\", \n#                   tl.cex = 0.5, \n#                   method = \"number\", \n#                   type = \"upper\")"
  },
  {
    "objectID": "inclass_ex/inclass_ex10/inclass_ex10.html",
    "href": "inclass_ex/inclass_ex10/inclass_ex10.html",
    "title": "Inclass Ex10",
    "section": "",
    "text": "pacman::p_load(tmap, SpatialAcc, sf, \n               ggstatsplot, reshape2,\n               tidyverse, fca)\n\nfca- is additional from the website. This is another method to do floating point catchment area (3 stage).\nMatrix\n\nrow is the destination\ncolumn is the origin\n\n\n\n\nhexagons <- st_read(dsn = \"data/geospatial\", layer = \"hexagons\") \n\nReading layer `hexagons' from data source \n  `C:\\yifei-alpaca\\IS415-GAA\\inclass_ex\\inclass_ex10\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 3125 features and 6 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 21506.33 xmax: 50010.26 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\n\neldercare <- st_read(dsn = \"data/geospatial\", layer = \"ELDERCARE\") \n\nReading layer `ELDERCARE' from data source \n  `C:\\yifei-alpaca\\IS415-GAA\\inclass_ex\\inclass_ex10\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 120 features and 19 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 14481.92 ymin: 28218.43 xmax: 41665.14 ymax: 46804.9\nProjected CRS: SVY21 / Singapore TM\n\nmpsz <- st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_NO_SEA_PL\")\n\nReading layer `MP14_SUBZONE_NO_SEA_PL' from data source \n  `C:\\yifei-alpaca\\IS415-GAA\\inclass_ex\\inclass_ex10\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\n\n\n\nmpsz <- st_transform(mpsz, 3414)\neldercare <- st_transform(eldercare, 3414)\nhexagons <- st_transform(hexagons, 3414)\n\n\n\n\n\neldercare <- eldercare %>%\n  select(fid, ADDRESSPOS) %>%\n  rename(destination_id = fid,\n         postal_code= ADDRESSPOS) %>%\n  mutate(capacity = 100)\n\n\nhexagons <- hexagons %>%\n  select(fid) %>%\n  rename(origin_id = fid) %>%\n  mutate(demand = 100)\n\n\n\n\n\nODMatrix <- read_csv(\"data/aspatial/OD_Matrix.csv\")\n\nthis steps convert from dataframe to matrix.\n\ndistmat <- ODMatrix %>%\n  select(origin_id, destination_id, total_cost) %>%\n  spread(destination_id, total_cost)%>%\n  select(c(-c('origin_id')))\n\nnew function called pivot_wider()\n\ndistmat_km <- as.matrix(distmat/1000)\n\n\n\n\n\n\n\n\n\n\neldercare_coord <- st_coordinates(eldercare)\nhaxegon_coord <- st_coordinates(hexagons)\n\n\nEucMatrix <- SpatialAcc::distance(haxegon_coord,\n                                  eldercare_coord,\n                                  type = \"euclidean\")\n\n\nEucMatrix_km <- as.matrix(EucMatrix/1000)\n\n\n\n\n\nacc_Hansen <- data.frame(ac(hexagons$demand,\n                            eldercare$capacity,\n                            distmat_km, \n                            #d0 = 50, #threshold of 50km \n                            power = 2, \n                            family = \"Hansen\"))\n\n\ncolnames(acc_Hansen) <- \"accHansen\"\n\n\nacc_Hansen <- as_tibble(acc_Hansen)\n\nAcc hansen will be added in to the hexagon data frame\n\nhexagon_Hansen <- bind_cols(hexagons, acc_Hansen)\n\n\nmapex <- st_bbox(hexagons)\n\n\ntmap_mode(\"plot\")\ntm_shape(hexagon_Hansen,\n         bbox = mapex) + \n  tm_fill(col = \"accHansen\",\n          n = 10,\n          style = \"quantile\",\n          border.col = \"black\",\n          border.lwd = 1) +\ntm_shape(eldercare) +\n  tm_symbols(size = 0.1) +\n  tm_layout(main.title = \"Accessibility to eldercare: Hansen method\",\n            main.title.position = \"center\",\n            main.title.size = 2,\n            legend.outside = FALSE,\n            legend.height = 0.45, \n            legend.width = 3.0,\n            legend.format = list(digits = 6),\n            legend.position = c(\"right\", \"top\"),\n            frame = TRUE) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.5)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Takehome_Ex03.html#read-in-the-exported-file",
    "href": "Take-home_Ex/Take-home_Ex03/Takehome_Ex03.html#read-in-the-exported-file",
    "title": "Take Home Ex 3",
    "section": "Read in the exported file",
    "text": "Read in the exported file\n\ntrain_resale <- st_read(dsn = \"data/exported\", layer =\"hdb_resale_train_final\")\n\nReading layer `hdb_resale_train_final' from data source \n  `C:\\yifei-alpaca\\IS415-GAA\\Take-home_Ex\\Take-home_Ex03\\data\\exported' \n  using driver `ESRI Shapefile'\nSimple feature collection with 23656 features and 31 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 11519.79 ymin: 28217.39 xmax: 42645.18 ymax: 48741.06\nProjected CRS: SVY21 / Singapore TM\n\ntest_resale <- st_read(dsn = \"data/exported\", layer =\"hdb_resale_test_final\")\n\nReading layer `hdb_resale_test_final' from data source \n  `C:\\yifei-alpaca\\IS415-GAA\\Take-home_Ex\\Take-home_Ex03\\data\\exported' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1848 features and 31 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 11655.33 ymin: 28287.8 xmax: 42444.75 ymax: 48675.05\nProjected CRS: SVY21 / Singapore TM"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Takehome_Ex03.html#read-in-rds",
    "href": "Take-home_Ex/Take-home_Ex03/Takehome_Ex03.html#read-in-rds",
    "title": "Take Home Ex 3",
    "section": "Read in RDS",
    "text": "Read in RDS\n\nbw_adaptive <- read_rds(\"bwadaptive.rds\")\n\nNow, we can go ahead to calibrate the gwr-based hedonic pricing model by using adaptive bandwidth and Gaussian kernel as shown in the code chunk below.\n\n#gwr_adaptive <- gwr.basic(formula = rsl_prc ~ flr_r_s+ rmnng_l + stry_lvl_l + #stry_lvl_m + stry_lvl_h  + stry_lvl_v  +\n#                  PROX_CH + PROX_EL +\n#                  PROX_FO + PROX_MR + PROX_TO + \n#                  PROX_MA + PROX_SP + NUM_FOO +\n#                  NUM_CHI + NUM_BUS +\n#                  NUM_SPM + NUM_SCH,\n#                         data=train_data_sp,\n#                          bw=bw_adaptive, \n#                          kernel = 'gaussian', \n#                          adaptive=TRUE,\n#                          longlat = FALSE)\n\n\n#saveRDS(gwr_adaptive, \"gwradaptive.rds\")\n\n\ngwr_adaptive <- read_rds(\"gwradaptive.rds\")\n\n\ngwr_adaptive\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2023-03-20 01:08:29 \n   Call:\n   gwr.basic(formula = rsl_prc ~ flr_r_s + rmnng_l + stry_lvl_l + \n    stry_lvl_m + stry_lvl_h + PROX_CH + PROX_EL + PROX_FO + PROX_MR + \n    PROX_TO + PROX_MA + PROX_SP + NUM_FOO + NUM_CHI + NUM_BUS + \n    NUM_SPM + NUM_SCH, data = train_data_sp, bw = bw_adaptive, \n    kernel = \"gaussian\", adaptive = TRUE, longlat = FALSE)\n\n   Dependent (y) variable:  rsl_prc\n   Independent variables:  flr_r_s rmnng_l stry_lvl_l stry_lvl_m stry_lvl_h PROX_CH PROX_EL PROX_FO PROX_MR PROX_TO PROX_MA PROX_SP NUM_FOO NUM_CHI NUM_BUS NUM_SPM NUM_SCH\n   Number of data points: 23656\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n    Min      1Q  Median      3Q     Max \n-353910  -52373   -5979   47973  454155 \n\n   Coefficients:\n                 Estimate Std. Error t value Pr(>|t|)    \n   (Intercept)  2.817e+05  1.002e+04  28.132  < 2e-16 ***\n   flr_r_s      2.360e+03  7.836e+01  30.118  < 2e-16 ***\n   rmnng_l      4.445e+03  4.588e+01  96.872  < 2e-16 ***\n   stry_lvl_l  -2.066e+05  2.984e+03 -69.241  < 2e-16 ***\n   stry_lvl_m  -1.801e+05  2.959e+03 -60.875  < 2e-16 ***\n   stry_lvl_h  -1.508e+05  2.984e+03 -50.530  < 2e-16 ***\n   PROX_CH      2.423e+01  6.901e+00   3.512 0.000446 ***\n   PROX_EL     -2.291e+01  8.903e-01 -25.727  < 2e-16 ***\n   PROX_FO     -7.057e+01  4.667e+00 -15.119  < 2e-16 ***\n   PROX_MR     -1.894e+01  1.344e+00 -14.089  < 2e-16 ***\n   PROX_TO     -1.858e+01  2.730e-01 -68.081  < 2e-16 ***\n   PROX_MA      2.342e+01  1.687e+00  13.884  < 2e-16 ***\n   PROX_SP     -1.771e+01  4.704e+00  -3.765 0.000167 ***\n   NUM_FOO      1.690e+03  3.736e+01  45.242  < 2e-16 ***\n   NUM_CHI     -3.747e+03  2.961e+02 -12.652  < 2e-16 ***\n   NUM_BUS     -6.322e+02  1.882e+02  -3.358 0.000786 ***\n   NUM_SPM      1.564e+03  6.297e+02   2.484 0.013010 *  \n   NUM_SCH     -8.480e+03  3.884e+02 -21.834  < 2e-16 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 78920 on 23638 degrees of freedom\n   Multiple R-squared: 0.6289\n   Adjusted R-squared: 0.6287 \n   F-statistic:  2357 on 17 and 23638 DF,  p-value: < 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 1.472126e+14\n   Sigma(hat): 78889.69\n   AIC:  600649.7\n   AICc:  600649.8\n   BIC:  577338.5\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Adaptive bandwidth: 786 (number of nearest neighbours)\n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                     Min.     1st Qu.      Median     3rd Qu.       Max.\n   Intercept  -1.7389e+06 -1.2155e+05  7.0193e+03  9.9607e+04 3.3940e+05\n   flr_r_s     8.6710e+02  1.9806e+03  2.8876e+03  4.1149e+03 1.3994e+04\n   rmnng_l    -1.1919e+03  3.3808e+03  4.1239e+03  5.4525e+03 8.4989e+03\n   stry_lvl_l -2.3074e+05 -1.2338e+05 -6.7234e+04 -2.9001e+04 1.7166e+06\n   stry_lvl_m -2.0529e+05 -8.3954e+04 -4.6785e+04  5.0384e+02 1.8210e+06\n   stry_lvl_h -1.7942e+05 -5.6567e+04 -3.1012e+04  1.3712e+04 1.7773e+06\n   PROX_CH    -1.3259e+02 -4.0739e+01 -1.6158e+01  7.0767e+00 8.4255e+01\n   PROX_EL    -9.3297e+01 -1.1051e+01 -3.5346e+00  3.5163e+00 3.6019e+01\n   PROX_FO    -1.3438e+02 -7.3820e+01 -1.3345e+01  1.4598e+01 1.1559e+02\n   PROX_MR    -1.5674e+02 -5.4680e+01 -2.5458e+01  3.2652e-01 8.8030e+01\n   PROX_TO    -5.4015e+01 -1.9658e+01 -7.3801e+00 -4.4153e-02 3.2364e+01\n   PROX_MA    -8.3612e+01 -1.3898e+01  4.9998e+00  2.5821e+01 1.1674e+02\n   PROX_SP    -1.4199e+02 -2.6149e+01  9.8640e+00  3.3325e+01 8.8046e+01\n   NUM_FOO    -2.7866e+02  2.9871e+02  8.7951e+02  2.3560e+03 5.8807e+03\n   NUM_CHI    -9.6189e+03 -3.8823e+03 -2.1064e+03  4.0805e+02 7.2433e+03\n   NUM_BUS    -5.1294e+03 -1.1419e+03 -1.1020e+02  1.0291e+03 4.8399e+03\n   NUM_SPM    -1.1477e+04 -4.2146e+03 -1.6747e+02  2.7902e+03 1.2560e+04\n   NUM_SCH    -1.9326e+04 -4.0084e+03  1.7104e+03  5.7388e+03 1.7434e+04\n   ************************Diagnostic information*************************\n   Number of data points: 23656 \n   Effective number of parameters (2trace(S) - trace(S'S)): 368.6028 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 23287.4 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 575401.7 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 575108.7 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 554029.2 \n   Residual sum of squares: 4.949118e+13 \n   R-square value:  0.8752514 \n   Adjusted R-square value:  0.8732767 \n\n   ***********************************************************************\n   Program stops at: 2023-03-20 01:16:42"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Takehome_Ex03.html#preparing-coordinates-data",
    "href": "Take-home_Ex/Take-home_Ex03/Takehome_Ex03.html#preparing-coordinates-data",
    "title": "Take Home Ex 3",
    "section": "Preparing Coordinates data",
    "text": "Preparing Coordinates data\n\n#coords_train <- st_coordinates(train_resale)\n#coords_test <- st_coordinates(test_resale)\n\ncoords_train <- st_coordinates(train_resale_narrow)\ncoords_test <- st_coordinates(test_resale_narrow)\n\n\n#write_rds(coords_train, \"coords_train.rds\" )\n#write_rds(coords_test, \"coords_test.rds\" )"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Takehome_Ex03.html#dropping-geometry-field",
    "href": "Take-home_Ex/Take-home_Ex03/Takehome_Ex03.html#dropping-geometry-field",
    "title": "Take Home Ex 3",
    "section": "Dropping geometry field",
    "text": "Dropping geometry field\n\ntrain_data <- train_resale_narrow %>% \n  st_drop_geometry()"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Takehome_Ex03.html#calibrating-random-forest-model",
    "href": "Take-home_Ex/Take-home_Ex03/Takehome_Ex03.html#calibrating-random-forest-model",
    "title": "Take Home Ex 3",
    "section": "Calibrating Random Forest Model",
    "text": "Calibrating Random Forest Model\n\nset.seed(999)\nrf <- ranger(rsl_prc ~ flr_r_s+ rmnng_l + stry_lvl_l + stry_lvl_m + stry_lvl_h  +\n                  PROX_CH + PROX_EL +\n                  PROX_FO + PROX_MR + PROX_TO + \n                  PROX_MA + PROX_SP + NUM_FOO +\n                  NUM_CHI + NUM_BUS +\n                  NUM_SPM + NUM_SCH,\n             data=train_data)\n\n\nprint(rf)\n\nRanger result\n\nCall:\n ranger(rsl_prc ~ flr_r_s + rmnng_l + stry_lvl_l + stry_lvl_m +      stry_lvl_h + PROX_CH + PROX_EL + PROX_FO + PROX_MR + PROX_TO +      PROX_MA + PROX_SP + NUM_FOO + NUM_CHI + NUM_BUS + NUM_SPM +      NUM_SCH, data = train_data) \n\nType:                             Regression \nNumber of trees:                  500 \nSample size:                      23656 \nNumber of independent variables:  17 \nMtry:                             4 \nTarget node size:                 5 \nVariable importance mode:         none \nSplitrule:                        variance \nOOB prediction error (MSE):       1276057265 \nR squared (OOB):                  0.9239146"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Takehome_Ex03.html#calibrating-geographical-random-forest-model",
    "href": "Take-home_Ex/Take-home_Ex03/Takehome_Ex03.html#calibrating-geographical-random-forest-model",
    "title": "Take Home Ex 3",
    "section": "Calibrating Geographical Random Forest Model",
    "text": "Calibrating Geographical Random Forest Model"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Takehome_Ex03.html#predicting-by-using-test-data",
    "href": "Take-home_Ex/Take-home_Ex03/Takehome_Ex03.html#predicting-by-using-test-data",
    "title": "Take Home Ex 3",
    "section": "Predicting by using test data",
    "text": "Predicting by using test data\n\ntest_data <- cbind(test_resale, coords_test) %>%\n  st_drop_geometry()\n\n\n#gwRF_pred <- predict.grf(gwRF_adaptive, \n#                           test_data, \n#                           x.var.name=\"X\",\n#                           y.var.name=\"Y\", \n#                           local.w=1,\n#                           global.w=0)\n\n\n#write_rds(gwRF_pred, \"GRF_pred2.rds\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Takehome_Ex03.html#converting-the-predicting-output-into-a-data-frame",
    "href": "Take-home_Ex/Take-home_Ex03/Takehome_Ex03.html#converting-the-predicting-output-into-a-data-frame",
    "title": "Take Home Ex 3",
    "section": "Converting the predicting output into a data frame",
    "text": "Converting the predicting output into a data frame\n\nGRF_pred <- read_rds(\"GRF_pred3.rds\")\nGRF_pred_df <- as.data.frame(GRF_pred)\n\n\ntest_data_p <- cbind(test_data, GRF_pred_df)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Takehome_Ex03.html#calculating-root-mean-square-error",
    "href": "Take-home_Ex/Take-home_Ex03/Takehome_Ex03.html#calculating-root-mean-square-error",
    "title": "Take Home Ex 3",
    "section": "Calculating Root Mean Square Error",
    "text": "Calculating Root Mean Square Error\n\nrmse(test_data_p$rsl_prc, \n     test_data_p$gwRF_pred)\n\n[1] NaN"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Takehome_Ex03.html#visualizing-the-predicted-values",
    "href": "Take-home_Ex/Take-home_Ex03/Takehome_Ex03.html#visualizing-the-predicted-values",
    "title": "Take Home Ex 3",
    "section": "Visualizing the predicted values",
    "text": "Visualizing the predicted values\n\nggplot(data = test_data_p,\n       aes(x = GRF_pred,\n           y = rsl_prc)) +\n  geom_point()"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Takehome_Ex03.html#calculating-bandwidth",
    "href": "Take-home_Ex/Take-home_Ex03/Takehome_Ex03.html#calculating-bandwidth",
    "title": "Take Home Ex 3",
    "section": "Calculating Bandwidth",
    "text": "Calculating Bandwidth\n\n#gwRF_bw <- grf.bw(formula = rsl_prc ~ flr_r_s+ rmnng_l + stry_lvl_l + stry_lvl_m + #stry_lvl_h  +\n#                  PROX_CH + PROX_EL +\n#                  PROX_FO + PROX_MR + PROX_TO + \n#                  PROX_MA + PROX_SP + NUM_FOO +\n#                  NUM_CHI + NUM_BUS +\n#                  NUM_SPM + NUM_SCH,\n#                  trees = 50,\n#                  nthreads = 1,\n#                 data = train_data,\n#                 kernel = \"adaptive\",\n#                 coords = coords_train)\n\nAfter letting it run for more than 2 days , I decided to stop and pick the highest R-square of the bandwidth. Below are the image that I have captured what I have ran previously.\n\n\n\n\n\n\n\n\n\n\nThe above output, the highest R2 of the Local model would be Bandwidth of 1202. Hence, I will be using this value for the random forest predict.\nThe code chunk below calibrate a geographic ranform forest model by using grf() of SpatialML package. Previously, we have calculated the adjusted bandwidth, we will use that value for our grf() function. We decided to use adaptive and should be consistent for the kernel.\n\n#set.seed(99)\n#gwRF_adaptive <- grf(formula = rsl_prc ~ flr_r_s+ rmnng_l + stry_lvl_l + stry_lvl_m #+ stry_lvl_h +\n#                  PROX_CH + PROX_EL +\n#                  PROX_FO + PROX_MR + PROX_TO + \n#                  PROX_MA + PROX_SP + NUM_FOO +\n#                  NUM_CHI + NUM_BUS +\n#                  NUM_SPM + NUM_SCH,\n#                     dframe=train_data,\n#                      ntree=50,\n#                     bw = 1202,\n#                     kernel=\"adaptive\",\n#                     coords=coords_train\n#                )\n\n\n\n\n\n#write_rds(gwRF_adaptive, \"gwRF_adaptive_narrow.rds\")\n\n\ngwRF_adaptive <- read_rds(\"gwRF_adaptive_narrow.rds\")\n\nUsing the grf function gives us information about the model fit, including the number of trees in the forest and the out-of-bag (OOB) error rate. The OOB error rate is an estimate of the generalization error of the model, which is how well it is expected to perform on new, unseen data. In this model, an R-squared value of 0.66 indicates a moderate-to-strong relationship between the independent variables and the dependent variable, as it implies that 66% of the variance in the dependent variable is explained by the independent variables."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Takehome_Ex03.html#test-for-non-linearity",
    "href": "Take-home_Ex/Take-home_Ex03/Takehome_Ex03.html#test-for-non-linearity",
    "title": "Take Home Ex 3",
    "section": "Test for Non Linearity",
    "text": "Test for Non Linearity\n\nols_plot_resid_hist(resale_train_mlr_revised)\n\n\n\n\nThe figure reveals that the residual of the multiple linear regression model is resemble normal distribution."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Takehome_Ex03.html#test-for-spatial-autocorrelation",
    "href": "Take-home_Ex/Take-home_Ex03/Takehome_Ex03.html#test-for-spatial-autocorrelation",
    "title": "Take Home Ex 3",
    "section": "Test for Spatial Autocorrelation",
    "text": "Test for Spatial Autocorrelation\n\nmlr.output <- as.data.frame(resale_train_mlr_revised$residuals)\n\n\nresale.res.sf <- cbind(hdb_resale.sf, \n                        resale_train_mlr_revised$residuals)\n\n\nresale.sp <- as_Spatial(resale.res.sf)\nresale.sp\n\nclass       : SpatialPointsDataFrame \nfeatures    : 23656 \nextent      : 11519.79, 42645.18, 28217.39, 48741.06  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 18\nnames       :  ...1,   month,       town, flat_type, block,   street_name, storey_range, floor_area_sqm,    flat_model, lease_commence_date, remaining_lease, resale_price,          address, story_level_low, story_level_mid, ... \nmin values  :     1, 2021-01, ANG MO KIO,    4 ROOM,     1,  ADMIRALTY DR,     01 TO 03,             70, Adjoined flat,                1967,            44.5,       250000,   1 CHAI CHEE RD,               0,               0, ... \nmax values  : 23656, 2022-12,     YISHUN,    4 ROOM,    9B, YUNG SHENG RD,     49 TO 51,            145,       Type S1,                2019,           97.33,      1370000, 9B BOON TIONG RD,               1,               1, ... \n\n\nNow, we will display the distribution of the residuals on an interactive map.\n\ntm_shape(mpsz19)+\n  tmap_options(check.and.fix = TRUE) +\n  tm_polygons(alpha = 0.4) +\ntm_shape(resale.res.sf) +  \n  tm_dots(col = \"resale_train_mlr_revised.residuals\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\n\ntrain_data_sp <- as_Spatial(train_resale)\ntrain_data_sp\n\nclass       : SpatialPointsDataFrame \nfeatures    : 23656 \nextent      : 11519.79, 42645.18, 28217.39, 48741.06  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 31\nnames       : X___1,   month,       town, flt_typ, block,       strt_nm,  stry_rn, flr_r_s,       flt_mdl, ls_cmm_, rsl_prc,          address, rmnng_l, stry_lvl_l, stry_lvl_m, ... \nmin values  :     1, 2021-01, ANG MO KIO,  4 ROOM,     1,  ADMIRALTY DR, 01 TO 03,      70, Adjoined flat,    1967,  250000,   1 CHAI CHEE RD,    44.5,          0,          0, ... \nmax values  : 23656, 2022-12,     YISHUN,  4 ROOM,    9B, YUNG SHENG RD, 49 TO 51,     145,       Type S1,    2019, 1370000, 9B BOON TIONG RD,   97.33,          1,          1, ... \n\n\nThe weights have a very large influence on the parameter estimation of the geographically weighted regression (GWR). The weights show the relationship between observations or locations in the model. Types of weights that are often used in GWR are Gaussian kernels. This weighting can also be arranged into two forms. There are the fixed Gaussian kernel and the adaptive Gaussian kernel. Fixed is used when each location has the same bandwidth value. Adaptive is used when each location has a different bandwidth value. Adaptive is appropriate if points are irregularly spread – it ensures that there are enough points to calibrate the regression. In this take home, I’ve decided to use adaptive.\n\n#bw_adaptive <- bw.gwr(rsl_prc ~ flr_r_s+ rmnng_l + stry_lvl_l + stry_lvl_m + #stry_lvl_h + stry_lvl_v  +\n#                  PROX_CH + PROX_EL +\n#                  PROX_FO + PROX_MR + PROX_TO + \n#                  PROX_MA + PROX_SP + NUM_FOO +\n#                  NUM_CHI + NUM_BUS +\n#                  NUM_SPM + NUM_SCH,\n#                  data=train_data_sp,\n#                  approach=\"CV\",\n#                  kernel=\"gaussian\",\n#                  adaptive=TRUE,\n#                  longlat=FALSE)\n\n\n\n\n\n\n\n#saveRDS(bw_adaptive, \"bwadaptive.rds\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Takehome_Ex03.html#visualizing-gwr-output",
    "href": "Take-home_Ex/Take-home_Ex03/Takehome_Ex03.html#visualizing-gwr-output",
    "title": "Take Home Ex 3",
    "section": "Visualizing GWR Output",
    "text": "Visualizing GWR Output\nCondition Number, LocalR2, Predicted, Residual, Coefficient standard error are all stored in a SpatialPointsDataFrame or SpatialPolygonsDataFrame object integrated with fit.points, GWR coefficient estimates, y value, predicted values, coefficient standard errors and t-values in its \"data\" slot in an object called SDF of the output list. Chapter 13\n\nresale.sf.adaptive <- st_as_sf(gwr_adaptive$SDF) %>%\n  st_transform(crs=3414)\n\n\n gwr_adaptive.output <- as.data.frame(gwr_adaptive$SDF)\nresale.sf.adaptive <- cbind(resale.res.sf, as.matrix(gwr_adaptive.output))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Takehome_Ex03.html#local-r2",
    "href": "Take-home_Ex/Take-home_Ex03/Takehome_Ex03.html#local-r2",
    "title": "Take Home Ex 3",
    "section": "Local R2",
    "text": "Local R2\n\ntmap_mode(\"view\")\ntm_shape(mpsz19)+\n  tm_polygons(alpha = 0.1) +\ntm_shape(resale.sf.adaptive) +  \n  tm_dots(col = \"Local_R2\",\n          border.col = \"gray60\",\n          border.lwd = 1) +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\n\nWe can observe that majority of the HDB flats have Local R-squared values are within the range of 0.6 to 1. A high local R2 value indicates that the independent variables explain a large proportion of the variance in the dependent variable within a specific spatial unit, while a low local R2 value indicates that the independent variables are not very good at explaining the variation within the spatial unit. Refer to the map, the central area has a higher range and the east area has a lower range. This shows that the independent variable are not as good at explaining the variation in the central region.\nWith curiosity, lets narrow down to the east and north east region, to find out why there is a poor variation. But before that, we can extract out the area first.\n\ntmap_mode(\"plot\")\ntm_shape(mpsz19[mpsz19$REGION_N==\"NORTH-EAST REGION\", ])+\n  tm_polygons()+\ntm_shape(resale.sf.adaptive) + \n  tm_bubbles(col = \"Local_R2\",\n           size = 0.15,\n           border.col = \"gray60\",\n           border.lwd = 1)\n\n\n\n\n\ntm_shape(mpsz19[mpsz19$REGION_N==\"EAST REGION\", ])+\n  tm_polygons()+\ntm_shape(resale.sf.adaptive) + \n  tm_bubbles(col = \"Local_R2\",\n           size = 0.15,\n           border.col = \"gray60\",\n           border.lwd = 1)\n\n\n\n\n\ntrain_resale_narrow <- st_join(train_resale,mpsz19 ,\n                          by = c(\"PLN_AREA_N\" = \"town\")) %>% filter (REGION_N ==\"NORTH-EAST REGION\" | REGION_N==\"EAST REGION\")\n\n\ntest_resale_narrow <- st_join(test_resale,mpsz19 ,\n                          by = c(\"PLN_AREA_N\" = \"town\")) %>% filter (REGION_N ==\"NORTH-EAST REGION\" | REGION_N==\"EAST REGION\")\n\nDrop columns\n\ntrain_resale_narrow <- train_resale_narrow[ -c(32:37) ]\n\n\ntest_resale_narrow <- test_resale_narrow[ -c(32:37) ]"
  }
]