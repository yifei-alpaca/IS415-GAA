---
title: "Inclass Ex09 - GWR Method"
date: "06 March 2023"
date-modified: "`r Sys.Date()`"
format:
 html:
  toc: true
  toc-location: right
  number-depth: 3
execute: 
  message: false
  warning: false
editor: visual
---

# Getting started

```{r}
pacman::p_load(spdep, tmap, sf,
               ggpubr, tidyverse, GWmodel, SpatialML, olsrr, devtools,tidymodels)
```

Today: how to calibrate SpatialML

Reading the input data sets.

```{r}
mdata <- read_rds("data/aspatial/mdata.rds")
```

## Data sampling

```{r}
set.seed(1234)
resale_split <- initial_split(mdata,
                              prop=6.5/10,
                              )
train_data <- training(resale_split)
test_data <- testing(resale_split)
```

```{r}
write_rds(train_data, "data/model/train_data.rds")
write_rds(test_data, "data/model/test_data.rds")
```

```{r}
summary(train_data)
```

Least Square model

```{r}
price_MLR<- lm(resale_price ~ floor_area_sqm + 
                 storey_order + remaining_lease_mths +
                 PROX_CBD +
                 PROX_ELDERLYCARE + 
                 PROX_HAWKER +
                 PROX_MRT +
                 PROX_PARK+
                 PROX_GOOD_PRISCH+
                 PROX_MALL+
                 PROX_CHAS+
                 PROX_SUPERMARKET + 
                 WITHIN_350M_KINDERGARTEN +
                 WITHIN_350M_CHILDCARE +
                 WITHIN_1KM_PRISCH, data=train_data
                 
                 )
summary(price_MLR)
```

```{r}
write_rds(price_MLR, "data/model/price_mlr.rds")
```

## Change training data to spatial point

sf is a list object

ranger dont understand simple feature

```{r}
train_data_sp <-as_Spatial(train_data)
train_data_sp
```

## Random Forest Method

```{r}
coords <- st_coordinates(mdata)
coords_train <- st_coordinates(train_data)
coords_test <- st_coordinates(test_data)
```

export

```{r}
write_rds(coords_train, "data/model/coords_train.rds")
write_rds(coords_test, "data/model/coords_test.rds")
```

drop the geometry

```{r}
train_data <- train_data %>% 
  st_drop_geometry()
```

model

```{r}
price_rf<- ranger(resale_price ~ floor_area_sqm + 
                 storey_order + remaining_lease_mths +
                 PROX_CBD +
                 PROX_ELDERLYCARE + 
                 PROX_HAWKER +
                 PROX_MRT +
                 PROX_PARK+
                 PROX_GOOD_PRISCH+
                 PROX_MALL+
                 PROX_CHAS+
                 PROX_SUPERMARKET + 
                 WITHIN_350M_KINDERGARTEN +
                 WITHIN_350M_CHILDCARE +
                 WITHIN_1KM_PRISCH, data=train_data
                 
                 )
print(price_rf)
```

For better comparision, we should look at the MSE

the code chunk below is to calibriate a geographic random forest model by using grf()

```{r}
set.seed(1234)
gwRF <- grf(formula = resale_price ~ floor_area_sqm + 
                 storey_order + remaining_lease_mths +
                 PROX_CBD +
                 PROX_ELDERLYCARE + 
                 PROX_HAWKER +
                 PROX_MRT +
                 PROX_PARK+
                 PROX_GOOD_PRISCH+
                 PROX_MALL+
                 PROX_CHAS+
                 PROX_SUPERMARKET + 
                 WITHIN_350M_KINDERGARTEN +
                 WITHIN_350M_CHILDCARE +
                 WITHIN_1KM_PRISCH, dframe=train_data,
            bw=55, # need to calculate by ourself
            kernel = "adaptive",
            coords = coords_train)
```

```{r}
write_rds(gwRF, "data/model/gwRF.rds")

```

Preparing the test data

```{r}
test_data <- cbind(test_data, coords_test) %>%
  st_drop_geometry()
```

```{r}
gwRF_pred <- predict.grf(gwRF, test_data, x.var.name = "X", 
                         y.var.name = "Y",
                         local.w = 1,
                         global.w = 0)
```
